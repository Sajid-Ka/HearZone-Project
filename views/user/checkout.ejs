<%- include('../partials/user/header') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Poppins', sans-serif;
    }

    .checkout-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 30px 20px 60px;
    }

    .checkout-header {
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 30px;
        position: relative;
        padding-bottom: 15px;
        border-bottom: 2px solid #f0f0f0;
    }

    .section-container {
        margin-bottom: 30px;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        background: white;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .section-container:hover {
        box-shadow: 0 12px 28px rgba(0,0,0,0.12);
        transform: translateY(-2px);
    }

    .section-header {
        padding: 18px 25px;
        background: #f8f9fa;
        border-bottom: 1px solid #eaeaea;
        display: flex;
        align-items: center;
    }

    .section-header h4 {
        color: #2c3e50;
        font-weight: 600;
        margin: 0;
        font-size: 18px;
        position: relative;
        display: flex;
        align-items: center;
    }

    .section-header i {
        margin-right: 12px;
        color: #3498db;
        font-size: 20px;
    }

    .section-content {
        padding: 25px;
    }

    /* Address styles */
    .address-section {
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        padding: 0;
        margin-bottom: 30px;
        overflow: hidden;
    }

    .address-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 20px;
        padding: 25px;
    }

    .address-card {
        border: 2px solid #eaeaea;
        border-radius: 12px;
        padding: 20px;
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
        background: #fff;
    }

    .address-card:hover {
        border-color: #3498db;
        box-shadow: 0 8px 20px rgba(52, 152, 219, 0.15);
        transform: translateY(-3px);
    }

    .address-card.selected {
        border-color: #3498db;
        background-color: #f0f9ff;
        box-shadow: 0 8px 20px rgba(52, 152, 219, 0.15);
    }

    .address-radio {
        display: flex;
        align-items: flex-start;
        margin-bottom: 10px;
    }

    .address-radio input[type="radio"] {
        margin-right: 10px;
        transform: scale(1.2);
        accent-color: #3498db;
    }

    .address-info {
        margin-top: 10px;
        padding-left: 25px;
    }

    .address-info p {
        margin-bottom: 5px;
        color: #555;
    }

    .address-type {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        margin-bottom: 10px;
        background: #e8f4f8;
        color: #3498db;
    }

    .address-actions {
        position: absolute;
        top: 20px;
        right: 20px;
    }

    .btn-edit {
        background: transparent;
        color: #3498db;
        border: 1px solid #3498db;
        padding: 5px 12px;
        border-radius: 6px;
        font-size: 13px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-edit:hover {
        background: #3498db;
        color: white;
    }

    .add-address-link {
        display: inline-flex;
        align-items: center;
        margin: 0 25px 25px;
        color: #3498db;
        font-weight: 500;
        text-decoration: none;
        padding: 10px 18px;
        border: 2px dashed #3498db;
        border-radius: 10px;
        transition: all 0.3s ease;
        background: #f0f9ff;
    }

    .add-address-link i {
        margin-right: 8px;
        font-size: 16px;
    }

    .add-address-link:hover {
        background: #e3f2fd;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(52, 152, 219, 0.1);
    }

    /* Coupon styles */
    .coupon-section {
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        padding: 40px; /* Increased padding */
        margin-bottom: 30px;
        overflow: hidden;
        min-height: 250px; /* Increased minimum height */
    }

    .coupon-content {
        padding: 0; /* Adjusted to avoid double padding */
    }

    .coupon-form {
        display: flex;
        gap: 15px; /* Increased gap */
        align-items: center;
        margin-bottom: 20px;
        position: relative;
        flex-wrap: wrap; /* Allow wrapping for smaller screens */
    }

    .coupon-form input {
        flex: 1;
        padding: 14px 18px;
        border: 2px solid #ddd;
        border-radius: 10px;
        font-size: 14px;
        transition: all 0.3s ease;
        background: #f9f9f9;
        min-width: 150px; /* Ensure input doesn't shrink too much */
    }

    .coupon-form input:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.15);
        outline: none;
        background: #fff;
    }

    .coupon-form button {
        background: #3498db;
        color: white;
        border: none;
        padding: 14px 24px;
        border-radius: 10px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(52, 152, 219, 0.2);
        display: flex;
        align-items: center;
        gap: 8px;
        white-space: nowrap; /* Prevent button text from wrapping */
    }

    .coupon-form button:hover {
        background: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(52, 152, 219, 0.3);
    }

    .coupon-error {
        color: #e74c3c;
        font-size: 12px;
        margin-top: 5px;
        width: 100%;
        display: none;
        padding: 5px 10px;
        background: rgba(231, 76, 60, 0.1);
        border-radius: 5px;
    }

    .coupon-error.show {
        display: block;
    }

    .coupon-applied {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #e8f4f8;
        padding: 18px;
        border-radius: 10px;
        margin-bottom: 15px;
        border-left: 4px solid #3498db;
    }

    .coupon-tag {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .coupon-tag i {
        color: #3498db;
        font-size: 18px;
    }

    .coupon-applied span {
        color: #2c3e50;
        font-weight: 500;
    }

    .coupon-discount {
        font-weight: 600;
        color: #2ecc71;
    }

    .coupon-remove {
        color: #e74c3c;
        font-weight: 500;
        cursor: pointer;
        text-decoration: none;
        padding: 6px 12px;
        border-radius: 6px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .coupon-remove:hover {
        background: rgba(231, 76, 60, 0.1);
        color: #c0392b;
    }

    .coupon-options {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        margin-top: 15px;
    }

    .coupon-heading {
        font-size: 14px;
        color: #777;
        margin-bottom: 12px;
    }

    .coupon-option {
        background: #f8f9fa;
        padding: 12px 18px;
        border-radius: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 1px solid #ddd;
        position: relative;
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 100%;
    }

    .coupon-option:hover {
        background: #e8f4f8;
        border-color: #3498db;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }

    .coupon-code {
        font-weight: 600;
        color: #2c3e50;
        font-size: 16px;
    }

    .coupon-desc {
        color: #555;
        font-size: 13px;
    }

    .coupon-min {
        font-size: 12px;
        color: #777;
        font-style: italic;
    }

    /* Payment styles */
    .payment-method-section {
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        padding: 40px; /* Increased padding */
        margin-bottom: 30px;
        overflow: hidden;
        min-height: 250px; /* Increased minimum height */
    }

    .payment-content {
        padding: 0; /* Adjusted to avoid double padding */
    }

    .payment-options {
        display: grid;
        gap: 15px;
    }

    .payment-card {
        border: 2px solid #eaeaea;
        border-radius: 12px;
        padding: 18px;
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        background: #fff;
    }

    .payment-card:hover {
        border-color: #3498db;
        background-color: #f0f9ff;
        transform: translateY(-2px);
    }

    .payment-card.selected {
        border-color: #3498db;
        background-color: #f0f9ff;
        box-shadow: 0 5px 15px rgba(52, 152, 219, 0.15);
    }

    .payment-radio {
        display: flex;
        align-items: center;
        gap: 15px;
        width: 100%;
    }

    .payment-radio input[type="radio"] {
        transform: scale(1.2);
        accent-color: #3498db;
    }

    .payment-label {
        font-weight: 500;
        color: #2c3e50;
        display: flex;
        align-items: center;
        gap: 10px;
        width: 100%;
    }

    .payment-icon {
        background: #f0f9ff;
        width: 40px;
        height: 40px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #3498db;
        font-size: 18px;
    }

    .payment-description {
        font-size: 13px;
        color: #777;
        margin-top: 5px;
        padding-left: 32px;
    }

    .place-order-btn {
        display: block;
        width: 100%;
        padding: 16px;
        background: #3498db;
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 20px;
        box-shadow: 0 8px 15px rgba(52, 152, 219, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .place-order-btn:hover {
        background: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(52, 152, 219, 0.3);
    }

    /* Order summary styles */
    .order-summary {
        position: sticky;
        top: 20px;
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        padding: 40px; /* Increased padding */
        margin-bottom: 30px;
        min-height: 600px; /* Increased minimum height */
    }

    .summary-header {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f0f0f0;
        font-size: 18px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .summary-header i {
        color: #3498db;
    }

    .product-item {
        display: flex;
        align-items: center;
        padding: 15px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .product-item:last-child {
        border-bottom: none;
    }

    .product-item img {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
        margin-right: 15px;
    }

    .product-details {
        flex: 1;
    }

    .product-name {
        font-weight: 500;
        margin-bottom: 5px;
        color: #2c3e50;
    }

    .product-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        font-size: 13px;
        color: #7f8c8d;
    }

    .product-price {
        font-weight: 600;
        color: #2c3e50;
    }

    .order-totals {
        margin-top: 20px;
    }

    .totals-row {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        font-size: 14px;
        color: #555;
    }

    .totals-row.discount {
        color: #2ecc71;
    }

    .totals-row.final {
        font-size: 18px;
        font-weight: 600;
        color: #2c3e50;
        border-top: 1px solid #eee;
        margin-top: 10px;
        padding-top: 15px;
    }

    /* Modals */
    .modal-content {
        border-radius: 16px;
        border: none;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .modal-header {
        border-bottom: 1px solid #f0f0f0;
        padding: 20px 25px;
        background: #f8f9fa;
    }

    .modal-header h5 {
        font-weight: 600;
        color: #2c3e50;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .modal-header h5 i {
        color: #3498db;
    }

    .modal-body {
        padding: 25px;
    }

    .form-label {
        font-weight: 500;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .form-control {
        padding: 14px;
        border-radius: 8px;
        border: 1px solid #ddd;
        transition: all 0.3s ease;
        background: #f9f9f9;
    }

    .form-control:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.15);
        background: #fff;
    }

    .error-message {
        color: #e74c3c;
        font-size: 12px;
        margin-top: 5px;
    }

    @media (max-width: 768px) {
        .coupon-form {
            flex-direction: column;
            align-items: stretch; /* Ensure full width for elements */
        }

        .coupon-form input {
            width: 100%;
        }

        .coupon-form button {
            width: 100%;
        }

        .product-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .product-item img {
            margin-bottom: 10px;
        }

        .address-cards {
            grid-template-columns: 1fr;
        }
    }
</style>

<%- include('../../views/partials/user/breadcrumb', {
    breadcrumbs: [
        { text: 'Shop', url: '/shop' },
        { text: 'Checkout', url: '#', active: true }
    ]
}) %>

<div class="checkout-container">
    <h2 class="checkout-header">Checkout</h2>
    <div class="row">
        <div class="col-md-8">
            <div class="address-section">
                <h4>Select Delivery Address</h4>
                <% addresses.forEach(address => { %>
                    <div class="address-card" data-id="<%= address._id %>">
                        <div class="address-actions">
                            <button class="btn btn-edit" data-bs-toggle="modal" data-bs-target="#editModal<%= address._id %>">Edit</button>
                        </div>
                        <input type="radio" name="address" value="<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
                        <strong><%= address.name %></strong>
                        <p><%= address.addressType %></p>
                        <p><%= address.city %>, <%= address.state %> - <%= address.pinCode %></p>
                        <p>Phone: <%= address.phone %></p>
                    </div>

                    <!-- Edit Modal for each address -->
                    <div class="modal fade" id="editModal<%= address._id %>" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Edit Address</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body p-4">
                                    <form class="edit-address-form" data-address-id="<%= address._id %>">
                                        <div class="mb-3">
                                            <label class="form-label">Full Name</label>
                                            <input type="text" class="form-control" name="name" value="<%= address.name %>">
                                            <div class="error-message" data-field="name"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Address Type</label>
                                            <select class="form-control" name="addressType">
                                                <option value="Home" <%= address.addressType === 'Home' ? 'selected' : '' %>>Home</option>
                                                <option value="Work" <%= address.addressType === 'Work' ? 'selected' : '' %>>Work</option>
                                                <option value="Other" <%= address.addressType === 'Other' ? 'selected' : '' %>>Other</option>
                                            </

select>
                                            <div class="error-message" data-field="addressType"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">City</label>
                                            <input type="text" class="form-control" name="city" value="<%= address.city %>">
                                            <div class="error-message" data-field="city"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Landmark</label>
                                            <input type="text" class="form-control" name="landmark" value="<%= address.landmark %>">
                                            <div class="error-message" data-field="landmark"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">State</label>
                                            <input type="text" class="form-control" name="state" value="<%= address.state %>">
                                            <div class="error-message" data-field="state"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Pin Code</label>
                                            <input type="text" class="form-control" name="pinCode" value="<%= address.pinCode %>">
                                            <div class="error-message" data-field="pinCode"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Phone</label>
                                            <input type="tel" class="form-control" name="phone" value="<%= address.phone %>">
                                            <div class="error-message" data-field="phone"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Alternate Phone (Optional)</label>
                                            <input type="tel" class="form-control" name="altPhone" value="<%= address.altPhone || '' %>">
                                            <div class="error-message" data-field="altPhone"></div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input type="checkbox" class="form-check-input" name="isDefault" id="isDefault<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
                                                <label class="form-check-label" for="isDefault<%= address._id %>">Set as Default</label>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <button type="submit" class="btn btn-dark">Save Changes</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
                <a href="/address" class="btn btn-link">Add New Address</a>
            </div>
        </div>
        <div class="col-md-4">
            <div class="order-summary">
                <h4>Order Summary</h4>
                <% cart.items.forEach(item => { %>
                    <div class="product-item">
                        <img src="<%= item.productId.productImage && item.productId.productImage.length ? '/Uploads/product-images/' + item.productId.productImage[0] : '/Uploads/product-images/placeholder.jpg' %>" 
                             alt="<%= item.productId.productName %>">
                        <span><%= item.productId.productName %></span>
                        <span>Qty: <%= item.quantity %></span>
                        <span>₹<%= item.totalPrice.toFixed(2) %></span>
                        <% if (item.status !== 'placed') { %>
                            <span>Status: <%= item.status %></span>
                            <% if (item.cancellationReason !== 'none') { %>
                                <span>Reason: <%= item.cancellationReason %></span>
                            <% } %>
                        <% } %>
                    </div>
                <% }) %>
                <hr>
                <p>Subtotal: <span>₹<%= subTotal.toFixed(2) %></span></p>
                <p>Discount: <span>-₹<%= discountAmount.toFixed(2) %></span></p>
                <p>Shipping: <span>₹0.00</span></p>
                <p><strong>Total:</strong> <strong>₹<%= finalAmount.toFixed(2) %></strong></p>

                <div class="coupon-section">
                    <h4>Apply Coupon</h4>
                    <% if (appliedCoupon) { %>
                        <div class="coupon-applied">
                            <span>Coupon Applied: <%= appliedCoupon.code %> (-₹<%= appliedCoupon.discountAmount.toFixed(2) %>)</span>
                            <a href="#" class="coupon-remove" onclick="removeCoupon()">Remove</a>
                        </div>
                    <% } else { %>
                        <form class="coupon-form" onsubmit="applyCoupon(event)">
                            <input type="text" id="couponCode" placeholder="Enter coupon code">
                            <button type="submit">Apply</button>
                            <div class="coupon-error" id="couponError"></div>
                        </form>
                        <% if (availableCoupons && availableCoupons.length) { %>
                            <div class="coupon-options">
                                <% availableCoupons.forEach(coupon => { %>
                                    <div class="coupon-option" onclick="selectCoupon('<%= coupon.code %>')">
                                        <span><%= coupon.code %> - 
                                            <%= coupon.discountType === 'percentage' ? 
                                                `${coupon.value}% off` : 
                                                `₹${coupon.value} off` %>
                                            <% if (coupon.minPurchase) { %>
                                                (Min. ₹<%= coupon.minPurchase %>)
                                            <% } %>
                                        </span>
                                    </div>
                                <% }) %>
                            </div>
                        <% } %>
                    <% } %>
                </div>

                <div class="payment-method-section">
                    <h4>Select Payment Method</h4>
                    <div class="payment-options">
                        <label class="payment-card" for="cod">
                            <input type="radio" name="paymentMethod" id="cod" value="Cash on Delivery" checked>
                            <span class="payment-label">Cash on Delivery (COD)</span>
                        </label>
                        <label class="payment-card" for="razorpay">
                            <input type="radio" name="paymentMethod" id="razorpay" value="Razorpay">
                            <span class="payment-label">Pay Now (Razorpay)</span>
                        </label>
                    </div>
                </div>

                <br>

                <button id="placeOrderBtn" class="btn btn-primary w-100">Place Order</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Stop event propagation when clicking edit button
    document.querySelectorAll('.btn-edit').forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation();
        });
    });
    
    // Address card selection
    document.querySelectorAll('.address-card').forEach(card => {
        card.addEventListener('click', function(e) {
            if (e.target.classList.contains('btn-edit')) return;
            document.querySelectorAll('.address-card').forEach(c => c.classList.remove('selected'));
            this.classList.add('selected');
            this.querySelector('input[type="radio"]').checked = true;
        });
    });

    // Coupon functions
    async function applyCoupon(event) {
        event.preventDefault();
        const couponCode = document.getElementById('couponCode').value.trim();
        const errorElement = document.getElementById('couponError');
        
        // Clear previous error
        errorElement.textContent = '';
        errorElement.classList.remove('show');

        if (!couponCode) {
            errorElement.textContent = 'Please enter a coupon code';
            errorElement.classList.add('show');
            return;
        }

        try {
            const response = await fetch('/coupon/apply', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponCode })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire('Success', data.message, 'success').then(() => {
                    window.location.reload();
                });
            } else {
                errorElement.textContent = data.message;
                errorElement.classList.add('show');
            }
        } catch (error) {
            errorElement.textContent = 'Failed to apply coupon';
            errorElement.classList.add('show');
        }
    }

    async function removeCoupon() {
        const errorElement = document.getElementById('couponError');
        errorElement.textContent = '';
        errorElement.classList.remove('show');

        try {
            const response = await fetch('/coupon/remove', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire('Success', data.message, 'success').then(() => {
                    window.location.reload();
                });
            } else {
                errorElement.textContent = data.message;
                errorElement.classList.add('show');
            }
        } catch (error) {
            errorElement.textContent = 'Failed to remove coupon';
            errorElement.classList.add('show');
        }
    }

    function selectCoupon(couponCode) {
        document.getElementById('couponCode').value = couponCode;
        document.querySelector('.coupon-form').dispatchEvent(new Event('submit'));
    }

    // Place Order
    document.getElementById('placeOrderBtn').addEventListener('click', async () => {
        const addressId = document.querySelector('input[name="address"]:checked')?.value;
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
        
        if (!addressId) {
            Swal.fire('Error', 'Please select a delivery address', 'error');
            return;
        }
        
        if (!paymentMethod) {
            Swal.fire('Error', 'Please select a payment method', 'error');
            return;
        }

        try {
            const response = await fetch('/place-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ addressId, paymentMethod })
            });
            
            const data = await response.json();

            if (!response.ok || !data.success) {
                Swal.fire('Error', data.message || 'Failed to place order', 'error');
                return;
            }

            if (paymentMethod === 'Razorpay') {
                const options = {
                    key: '<%= razorpayKeyId %>',
                    amount: data.amount,
                    currency: data.currency,
                    name: 'Your E-commerce Store',
                    description: 'Order Payment',
                    order_id: data.razorpayOrderId,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                Swal.fire({
                                    title: 'Payment Successful!',
                                    text: `Your order #${verifyData.orderId} has been placed successfully`,
                                    icon: 'success'
                                }).then(() => {
                                    window.location.href = `/order-success?orderId=${verifyData.orderId}`;
                                });
                            } else {
                                Swal.fire({
                                    title: 'Payment Failed!',
                                    text: verifyData.message || 'Payment verification failed. Please try again.',
                                    icon: 'error'
                                }).then(() => {
                                    window.location.href = `/order-failure?orderId=${data.razorpayOrderId}`;
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Payment Failed!',
                                text: 'An error occurred during payment verification. Please try again.',
                                icon: 'error'
                            }).then(() => {
                                window.location.href = `/order-failure?orderId=${data.razorpayOrderId}`;
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone || "" %>'
                    },
                    theme: {
                        color: '#3498db'
                    },
                    modal: {
                        ondismiss: function() {
                            Swal.fire({
                                title: 'Payment Cancelled',
                                text: 'The payment failed, Please try again later',
                                icon: 'error'
                            }).then(() => {
                                window.location.href = `/order-failure?orderId=${data.razorpayOrderId}`;
                            });
                        }
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
            } else {
                Swal.fire({
                    title: 'Order Placed!',
                    text: `Your order #${data.orderId} has been placed successfully`,
                    icon: 'success'
                }).then(() => {
                    window.location.href = `/order-success?orderId=${data.orderId}`;
                });
            }
        } catch (error) {
            Swal.fire('Error', 'Something went wrong', 'error');
        }
    });

    // Edit Address Forms
    document.querySelectorAll('.edit-address-form').forEach(form => {
        const modalId = form.closest('.modal').id;
        const modal = document.getElementById(modalId);
        let originalValues = {};

        modal.addEventListener('show.bs.modal', function() {
            form.querySelectorAll('input, select').forEach(input => {
                originalValues[input.name] = input.type === 'checkbox' ? input.checked : input.value;
            });
        });

        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            const addressId = this.getAttribute('data-address-id');
            const formData = new FormData(this);
            const jsonData = Object.fromEntries(formData);

            form.querySelectorAll('.error-message').forEach(el => el.textContent = '');
            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

            let hasChanges = false;
            Object.keys(jsonData).forEach(key => {
                const currentValue = key === 'isDefault' ? (jsonData[key] === 'on') : jsonData[key];
                const originalValue = key === 'isDefault' ? originalValues[key] : originalValues[key];
                if (currentValue !== originalValue) hasChanges = true;
            });

            if (!hasChanges) {
                await Swal.fire({
                    icon: 'info',
                    title: 'No Changes',
                    text: 'No changes were detected in the address',
                    confirmButtonColor: '#222'
                });
                return;
            }

            try {
                const response = await fetch(`/address/edit/${addressId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ...jsonData,
                        isDefault: jsonData.isDefault === 'on'
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    if (result.noChanges) {
                        await Swal.fire({
                            icon: 'info',
                            title: 'No Changes',
                            text: 'No changes were detected in the address',
                            confirmButtonColor: '#222'
                        });
                    } else {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: result.message,
                            confirmButtonColor: '#222'
                        }).then(() => window.location.reload());
                    }
                } else if (result.errors) {
                    Object.entries(result.errors).forEach(([field, message]) => {
                        const errorElement = form.querySelector(`.error-message[data-field="${field}"]`);
                        const inputElement = form.querySelector(`[name="${field}"]`);
                        if (errorElement && inputElement) {
                            errorElement.textContent = message;
                            inputElement.classList.add('is-invalid');
                        }
                    });
                } else {
                    throw new Error(result.errors?.general || 'Failed to update address');
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonColor: '#222'
                });
            }
        });
    });

    // Handle retry payment
    document.addEventListener('DOMContentLoaded', async function() {
        const urlParams = new URLSearchParams(window.location.search);
        const isRetry = urlParams.get('retry') === 'true';
        const razorpayOrderId = urlParams.get('razorpayOrderId');

        if (isRetry && razorpayOrderId) {
            // Ensure Razorpay is selected
            document.getElementById('razorpay').checked = true;

            try {
                // Clear session data before retry
                await fetch('/clear-session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                // Fetch the order details for retry
                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        addressId: document.querySelector('input[name="address"]:checked')?.value,
                        paymentMethod: 'Razorpay'
                    })
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    Swal.fire('Error', data.message || 'Failed to retry payment', 'error');
                    return;
                }

                // Open Razorpay modal
                const options = {
                    key: '<%= razorpayKeyId %>',
                    amount: data.amount,
                    currency: data.currency,
                    name: 'Your E-commerce Store',
                    description: 'Order Payment',
                    order_id: data.razorpayOrderId,
                    handler: async function (response) {
                        try {
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });

                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                Swal.fire({
                                    title: 'Payment Successful!',
                                    text: `Your order #${verifyData.orderId} has been placed successfully`,
                                    icon: 'success'
                                }).then(() => {
                                    window.location.href = `/order-success?orderId=${verifyData.orderId}`;
                                });
                            } else {
                                Swal.fire({
                                    title: 'Payment Failed!',
                                    text: verifyData.message || 'Payment verification failed. Please try again.',
                                    icon: 'error'
                                }).then(() => {
                                    window.location.href = `/order-failure?orderId=${data.razorpayOrderId}`;
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Payment Failed!',
                                text: 'An error occurred during payment verification. Please try again.',
                                icon: 'error'
                            }).then(() => {
                                window.location.href = `/order-failure?orderId=${data.razorpayOrderId}`;
                            });
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone || "" %>'
                    },
                    theme: {
                        color: '#3498db'
                    },
                    modal: {
                        ondismiss: function() {
                            Swal.fire({
                                title: 'Payment Cancelled',
                                text: 'You closed the payment window. Please try again.',
                                icon: 'error'
                            }).then(() => {
                                window.location.href = `/order-failure?orderId=${data.razorpayOrderId}`;
                            });
                        }
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
            } catch (error) {
                Swal.fire('Error', 'Failed to initiate retry payment', 'error');
            }
        }
    });
</script>

<%- include('../partials/user/footer') %>