<%- include('../partials/user/header') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    
    .order-details-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 40px 15px;
    }

    
    .order-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        padding: 30px;
        max-width: 900px;
        margin: 0 auto;
    }

    .order-header {
        color: #2c3e50;
        font-weight: 700;
        margin-bottom: 25px;
        position: relative;
    }

    .order-header::after {
        content: '';
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 50px;
        height: 3px;
        background: #3498db;
        border-radius: 2px;
    }

    
    .btn-back {
        background: #636e72;
        border: none;
        padding: 10px 20px;
        border-radius: 20px;
        color: white;
        font-weight: 500;
        transition: all 0.3s ease;
        margin-bottom: 20px;
        display: inline-flex;
        align-items: center;
    }

    .btn-back:hover {
        background: #2c3e50;
        transform: translateX(-3px);
        box-shadow: 0 4px 10px rgba(99,110,114,0.3);
        color: white;
        text-decoration: none;
    }

    .btn-back i {
        margin-right: 8px;
    }

    
    .order-info p {
        color: #636e72;
        margin-bottom: 15px;
        font-size: 1rem;
    }

    .order-info p strong {
        color: #2c3e50;
        font-weight: 600;
        min-width: 100px;
        display: inline-block;
    }

    
    .items-section {
        margin: 20px 0;
    }

    .items-section h4 {
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 20px;
    }

    .item-row {
        display: grid;
        grid-template-columns: 60px 2fr 1fr 1fr 1.5fr;
        align-items: center;
        gap: 15px;
        padding: 15px 0;
        border-bottom: 1px solid #eee;
    }

    .item-row img {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 8px;
    }

    .item-row span {
        color: #636e72;
        font-size: 0.95rem;
        display: flex;
        align-items: center;
    }

    .item-row span:nth-child(4) {
        font-weight: 600;
        color: #2c3e50;
    }

    .item-row .item-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
        margin-top: 5px;
    }

    .badge {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
        text-align: center;
        white-space: nowrap;
    }

    
    @media (max-width: 768px) {
        .item-row {
            grid-template-columns: 1fr;
            gap: 10px;
        }
        
        .item-row a {
            display: flex;
            justify-content: center;
        }
        
        .item-row .itemSamll {
            justify-content: center;
        }
    }

    
    .pricing-section hr {
        margin: 25px 0;
        border-color: #eee;
    }

    .pricing-section p {
        display: flex;
        justify-content: space-between;
        margin: 12px 0;
        color: #636e72;
    }

    .pricing-section p strong {
        color: #2c3e50;
        font-size: 1.2rem;
    }

    
    .action-buttons {
        margin-top: 25px;
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    .btn-danger {
        background: #e74c3c;
        border: none;
        padding: 10px 25px;
        border-radius: 20px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-danger:hover {
        background: #c0392b;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(231,76,60,0.3);
    }

    .btn-primary {
        background: #3498db;
        border: none;
        padding: 10px 25px;
        border-radius: 20px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: #2980b9;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(52,152,219,0.3);
    }

    .btn-warning {
        background: #f1c40f;
        border: none;
        padding: 10px 25px;
        border-radius: 20px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-warning:hover {
        background: #e1b307;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(241,196,15,0.3);
    }

    .item-row a img {
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    .item-row a:hover img {
        transform: scale(1.05);
        opacity: 0.9;
        cursor: pointer;
    }

    .text-danger {
        color: #dc3545;
    }

    .alert-warning {
        padding: 10px 15px;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 4px;
        color: #856404;
        margin-bottom: 15px;
    }

    .status-pending { background: #fff3cd; color: #856404; }
    .status-processing { background: #cce5ff; color: #004085; }
    .status-shipped { background: #d4edda; color: #155724; }
    .status-out-for-delivery { background: #d1ecf1; color: #0c5460; }
    .status-delivered { background: #28a745; color: #fff; }
    .status-cancelled { background: #dc3545; color: #fff; }
    .status-cancel-request { background: #f8d7da; color: #721c24; }
    .status-return-request { background: #fff3cd; color: #856404; }
    .status-returned { background: #6c757d; color: #fff; }
    .status-payment-failed { background: #dc3545; color: #fff; }
    .status-failed { background: #dc3545; color: #fff; }

    .payment-status-pending { background: #fff3cd; color: #856404; }
    .payment-status-paid { background: #28a745; color: #fff; }
    .payment-status-failed { background: #dc3545; color: #fff; }
    .payment-status-refunded { background: #6c757d; color: #fff; }

    @media (max-width: 768px) {
        .order-card {
            padding: 20px;
            margin: 15px;
        }
        .item-row {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        .item-row img {
            margin-bottom: 10px;
        }
        .action-buttons {
            flex-direction: column;
            gap: 10px;
        }
        .btn-back, .btn-danger, .btn-primary, .btn-warning {
            width: 100%;
        }
    }
</style>

<br>
<br>
<br>
<br>
<br>
<br>

<div class="order-details-container">
    <div class="order-card">
        <a href="/orders" class="btn-back">
            <i class="fas fa-arrow-left"></i> Back to Orders
        </a>
        <h2 class="order-header">Order Details - #<%= order.orderId %></h2>
        <div class="order-info">
            <p><strong>Status:</strong> <span class="status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>"><%= order.status %></span></p>
            <p><strong>Date:</strong> <%= order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A' %></p>
            <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
            <p><strong>Payment Status:</strong> <span class="badge payment-status-<%= order.paymentStatus.toLowerCase().replace(/\s+/g, '-') %>"><%= order.paymentStatus %></span></p>
            <p><strong>Address:</strong> <%= order.address.name %>, <%= order.address.city %>, <%= order.address.landmark %> - <%= order.address.pinCode %></p>
        </div>
        <div class="items-section">
            <h4>Items</h4>
            <% order.orderedItems.forEach((item, index) => { %>
                <div class="item-row" data-item-index="<%= index %>">
                    <a href="/product-details?id=<%= item.product._id %>">
                        <img src="<%= item.product && item.product.productImage && item.product.productImage.length ? '/Uploads/product-images/' + item.product.productImage[0] : '/Uploads/product-images/placeholder.jpg' %>" 
                             alt="<%= item.product ? item.product.productName : 'Product' %>">
                    </a>
                    <span><%= item.product.productName %></span>
                    <span>Qty: <%= item.quantity %></span>
                    <span>â‚¹<%= (item.price * item.quantity).toFixed(2) %></span>
                    <span>
                        <% if (item.cancellationStatus !== 'None') { %>
                            <span class="badge bg-danger status-<%= item.cancellationStatus.toLowerCase().replace(/\s+/g, '-') %>">
                                <%= item.cancellationStatus %>
                            </span>
                        <% } else if (item.returnStatus !== 'None') { %>
                            <span class="badge bg-secondary status-<%= item.returnStatus.toLowerCase().replace(/\s+/g, '-') %>">
                                <%= item.returnStatus %>
                            </span>
                        <% } else { %>
                            <span class="badge status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                                <%= order.status %>
                            </span>
                        <% } %>
                    </span>
                    <div class="item-actions">
                        <% if (order.paymentStatus !== 'Failed' && 
                              item.cancellationStatus === 'None' && 
                              item.returnStatus === 'None' && 
                              order.status === 'Pending') { %>
                            <% if (!item.cancellationRejected) { %>
                                <button class="btn btn-sm btn-danger cancel-item-btn" 
                                        data-item-index="<%= index %>">
                                    Cancel Item
                                </button>
                            <% } else { %>
                                <span class="text-danger small">Cancel request was rejected</span>
                            <% } %>
                        <% } %>
                        <% if (order.status === 'Delivered' && 
                              item.cancellationStatus === 'None' && 
                              item.returnStatus === 'None') { %>
                            <% if (!item.returnRejected) { %>
                                <button class="btn btn-sm btn-warning return-item-btn" 
                                        data-item-index="<%= index %>">
                                    Return Item
                                </button>
                            <% } else { %>
                                <span class="text-danger small">Return request was rejected</span>
                            <% } %>
                        <% } %>
                        <% if (item.returnStatus === 'Return Request') { %>
                            <button class="btn btn-sm btn-danger cancel-return-item-btn" 
                                    data-item-index="<%= index %>">
                                Cancel Return
                            </button>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        </div>
       
        <div class="pricing-section">
            <hr>
            <p>Subtotal: <span>â‚¹<%= newSubtotal.toFixed(2) %></span></p>

            <% if (order.discount > 0) { %>
                <p>Product Discount: <span>-â‚¹<%= order.discount.toFixed(2) %></span></p>
            <% } %>

            <% if (order.couponDiscount > 0) { %>
                <p>Coupon Discount: <span>-â‚¹<%= order.couponDiscount.toFixed(2) %></span></p>
            <% } %>

            <p>Shipping: <span>â‚¹<%= (order.shippingCost || 0).toFixed(2) %></span></p>

            <% 
            // Calculate returned items total
            let returnedItemsTotal = 0;
            order.orderedItems.forEach(item => {
                if (item.returnStatus === 'Returned') {
                    returnedItemsTotal += (item.price * item.quantity);
                }
            });
            if (returnedItemsTotal > 0) { %>
                <p>Returned Items: <span style="color: #dc3545;">-â‚¹<%= returnedItemsTotal.toFixed(2) %></span></p>
            <% } %>

            <p><strong>Total:</strong> <strong>â‚¹<%= (order.totalPrice - returnedItemsTotal).toFixed(2) %></strong></p>
        </div>
        <div class="action-buttons">
            <% if (order.paymentStatus === 'Paid' || order.paymentStatus === 'Pending') { %>
                <a href="/orders/<%= order.orderId %>/invoice" class="btn btn-primary">Download Invoice</a>
            <% } %>
            <% if (order.paymentStatus === 'Failed') { %>
                <button class="btn btn-warning retry-payment-btn" data-order-id="<%= order.orderId %>">Retry Payment</button>
            <% } %>
        </div>
    </div>
</div>

<br>
<br>
<br>

<script>
   
    document.querySelectorAll('.cancel-item-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const itemIndex = e.target.dataset.itemIndex;
            const result = await Swal.fire({
                title: 'Cancel Item',
                input: 'text',
                inputLabel: 'Reason for cancellation (optional)',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel'
            });
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/orders/<%= order.orderId %>/cancel-item`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ itemIndex, reason: result.value })
                    });
                    const data = await response.json();
                    if (data.success) {
                        Swal.fire('Success', data.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error', 'Failed to request cancellation', 'error');
                }
            }
        });
    });

    
    document.querySelectorAll('.return-item-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const itemIndex = e.target.dataset.itemIndex;
            const result = await Swal.fire({
                title: 'Return Item',
                input: 'text',
                inputLabel: 'Reason for return (required)',
                inputValidator: (value) => !value && 'Reason is required!',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel'
            });
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/orders/<%= order.orderId %>/return-item`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ itemIndex, reason: result.value })
                    });
                    const data = await response.json();
                    if (data.success) {
                        Swal.fire('Success', data.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error', 'Failed to request return', 'error');
                }
            }
        });
    });

    
    document.querySelectorAll('.cancel-return-item-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const itemIndex = e.target.dataset.itemIndex;
            const result = await Swal.fire({
                title: 'Cancel Return Request',
                text: 'Are you sure you want to cancel the return request for this item?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, cancel it',
                cancelButtonText: 'No'
            });
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/orders/<%= order.orderId %>/cancel-return-item`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ itemIndex })
                    });
                    const data = await response.json();
                    if (data.success) {
                        Swal.fire('Success', data.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error', 'Failed to cancel return request', 'error');
                }
            }
        });
    });

    
    document.querySelectorAll('.retry-payment-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
            const orderId = e.target.dataset.orderId;
            try {
                const response = await fetch(`/orders/${orderId}/retry-payment`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                const data = await response.json();
                if (data.success) {
                    if (data.razorpayOrderId) {
                        const options = {
                            key: '<%= process.env.RAZORPAY_KEY_ID %>',
                            amount: data.amount,
                            currency: data.currency,
                            order_id: data.razorpayOrderId,
                            name: 'Your Company Name',
                            description: `Retry Payment for Order #${orderId}`,
                            handler: async function (response) {
                                try {
                                    const verifyResponse = await fetch('/verify-payment', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            razorpay_payment_id: response.razorpay_payment_id,
                                            razorpay_order_id: response.razorpay_order_id,
                                            razorpay_signature: response.razorpay_signature
                                        })
                                    });
                                    const verifyData = await verifyResponse.json();
                                    if (verifyData.success) {
                                        Swal.fire('Success', verifyData.message, 'success').then(() => {
                                            window.location.href = `/order-success?orderId=${verifyData.orderId}`;
                                        });
                                    } else {
                                        Swal.fire('Error', verifyData.message, 'error').then(() => {
                                            window.location.href = `/order-failure?orderId=${verifyData.orderId}`;
                                        });
                                    }
                                } catch (error) {
                                    Swal.fire('Error', 'Failed to verify payment', 'error');
                                }
                            },
                            prefill: {
                                name: '<%= order.address.name %>',
                                contact: '<%= order.address.phone %>'
                            },
                            theme: {
                                color: '#3498db'
                            }
                        };
                        const rzp = new Razorpay(options);
                        rzp.open();
                    } else {
                        Swal.fire('Success', data.message, 'success').then(() => {
                            window.location.href = `/order-success?orderId=${data.orderId}`;
                        });
                    }
                } else {
                    Swal.fire('Error', data.message, 'error');
                }
            } catch (error) {
                Swal.fire('Error', 'Failed to retry payment', 'error');
            }
        });
    });
</script>
<%- include('../partials/user/footer') %>