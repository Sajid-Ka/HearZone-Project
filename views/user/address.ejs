<%- include('../partials/user/header') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f5f5f5;
    }

    
    .card {
        background: white;
        border: none;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    h2 {
        font-weight: 600;
        color: #444;
        margin-bottom: 20px;
    }

    .card h4 {
        font-weight: 600;
        color: #444;
    }

    .form-label {
        font-weight: 500;
        color: #555;
    }

    .form-control {
        border-radius: 8px;
        padding: 12px;
        border: 1px solid #ddd;
    }

    .form-control:focus {
        border-color: #f1c40f;
        box-shadow: 0 0 5px rgba(241, 196, 15, 0.5);
    }

    .btn-dark {
        background-color: #222;
        border-radius: 8px;
        transition: all 0.3s ease;
        color: white;
    }

    .btn-dark:hover {
        background-color: #f1c40f;
        color: #222;
    }

    .btn-danger {
        background-color: #e74c3c;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .btn-danger:hover {
        background-color: #c0392b;
    }

    .is-invalid ~ .invalid-feedback {
        display: block;
    }
    .invalid-feedback {
        display: none;
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    .badge {
        font-size: 12px;
        padding: 5px 10px;
        border-radius: 12px;
    }

    .modal-content {
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        background-color: #222;
        color: white;
        border-radius: 10px 10px 0 0;
    }

    .modal-title {
        font-weight: 600;
    }

    .btn-close {
        filter: invert(1);
    }

    .address-card {
        padding: 15px;
        margin-bottom: 20px;
    }

    .address-card p {
        color: #666;
        margin-bottom: 10px;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
        display: none;
    }
    .is-invalid ~ .error-message {
        display: block;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
        display: none;
    }
    .is-invalid ~ .error-message {
        display: block;
    }
    .is-invalid {
        border-color: #dc3545;
    }
</style>

<br>
<br>
<br>
<br>
<br>
<br>

<%- include('../../views/partials/user/breadcrumb', {
    breadcrumbs: [
        { text: 'Address', url: '#', active: true }
    ]
}) %>


<div class="container-fluid mt-5">
    <div class="row">
        <%- include('../partials/user/profile/sidebar') %>

        <div class="col-md-9">
            <h2>Manage Addresses</h2>

            <div class="card p-4 mb-4">
                <h4>Add New Address</h4>
                <form action="/address/add" method="POST" id="addAddressForm" novalidate>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Full Name</label>
                            <input type="text" class="form-control" name="name" placeholder="Full Name" value="<%= user.name || '' %>" required>
                            <div class="error-message" data-field="name"><%= errors.name || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Address Type</label>
                            <select class="form-control" name="addressType" required>
                                <option value="" disabled selected>Select Address Type</option>
                                <option value="Home">Home</option>
                                <option value="Work">Work</option>
                                <option value="Other">Other</option>
                            </select>
                            <div class="error-message" data-field="addressType"><%= errors.addressType || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">City</label>
                            <input type="text" class="form-control" name="city" placeholder="City" required>
                            <div class="error-message" data-field="city"><%= errors.city || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Landmark</label>
                            <input type="text" class="form-control" name="landmark" placeholder="Landmark" required>
                            <div class="error-message" data-field="landmark"><%= errors.landmark || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">State</label>
                            <input type="text" class="form-control" name="state" placeholder="State" required>
                            <div class="error-message" data-field="state"><%= errors.state || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Pin Code</label>
                            <input type="text" class="form-control" name="pinCode" placeholder="Pin Code" pattern="\d{6}" required>
                            <div class="error-message" data-field="pinCode"><%= errors.pinCode || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Phone</label>
                            <input type="tel" class="form-control" name="phone" placeholder="Phone" value="<%= user.phone || '' %>" pattern="\d{10}" required>
                            <div class="error-message" data-field="phone"><%= errors.phone || '' %></div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Alternate Phone (Optional)</label>
                            <input type="tel" class="form-control" name="altPhone" placeholder="Alternate Phone" pattern="\d{10}">
                            <div class="error-message" data-field="altPhone"><%= errors.altPhone || '' %></div>
                        </div>
                        <div class="col-md-12 mb-3">
                            <div class="form-check">
                                <input type="checkbox" class="form-check-input" name="isDefault" id="isDefault">
                                <label class="form-check-label" for="isDefault">Set as Default</label>
                            </div>
                        </div>
                        <div class="col-md-12 text-end">
                            <button type="submit" class="btn btn-dark">Add Address</button>
                        </div>
                    </div>
                </form>
            </div>

            <div class="row">
                <% (addresses || []).forEach(address => { %>
                    <div class="col-md-6">
                        <div class="card address-card">
                            <div class="card-body">
                                <h5 class="card-title"><%= address.name %> 
                                    <% if (address.isDefault) { %>
                                        <span class="badge bg-success">Default</span>
                                    <% } %>
                                </h5>
                                <p class="card-text">
                                    <%= address.addressType %><br>
                                    <%= address.city %>, <%= address.state %> - <%= address.pinCode %><br>
                                    Landmark: <%= address.landmark %><br>
                                    Phone: <%= address.phone %>
                                    <% if (address.altPhone) { %>
                                        <br>Alt Phone: <%= address.altPhone %>
                                    <% } %>
                                </p>
                                <div class="d-flex justify-content-end gap-2">
                                    <button class="btn btn-dark btn-sm" data-bs-toggle="modal" data-bs-target="#editModal<%= address._id %>">Edit</button>
                                    <button class="btn btn-danger btn-sm delete-address-btn" data-address-id="<%= address._id %>">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
            
                    <!-- Edit Modal -->
                    <div class="modal fade" id="editModal<%= address._id %>" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Edit Address</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body p-4">
                                    <form action="/address/edit/<%= address._id %>" method="POST" class="edit-address-form">
                                        <div class="mb-3">
                                            <label class="form-label">Full Name</label>
                                            <input type="text" class="form-control" name="name" value="<%= address.name %>">
                                            <div class="error-message" data-field="name"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Address Type</label>
                                            <select class="form-control" name="addressType">
                                                <option value="Home" <%= address.addressType === 'Home' ? 'selected' : '' %>>Home</option>
                                                <option value="Work" <%= address.addressType === 'Work' ? 'selected' : '' %>>Work</option>
                                                <option value="Other" <%= address.addressType === 'Other' ? 'selected' : '' %>>Other</option>
                                            </select>
                                            <div class="error-message" data-field="addressType"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">City</label>
                                            <input type="text" class="form-control" name="city" value="<%= address.city %>">
                                            <div class="error-message" data-field="city"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Landmark</label>
                                            <input type="text" class="form-control" name="landmark" value="<%= address.landmark %>">
                                            <div class="error-message" data-field="landmark"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">State</label>
                                            <input type="text" class="form-control" name="state" value="<%= address.state %>">
                                            <div class="error-message" data-field="state"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Pin Code</label>
                                            <input type="text" class="form-control" name="pinCode" value="<%= address.pinCode %>">
                                            <div class="error-message" data-field="pinCode"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Phone</label>
                                            <input type="tel" class="form-control" name="phone" value="<%= address.phone %>">
                                            <div class="error-message" data-field="phone"></div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Alternate Phone (Optional)</label>
                                            <input type="tel" class="form-control" name="altPhone" value="<%= address.altPhone || '' %>">
                                            <div class="error-message" data-field="altPhone"></div>
                                        </div>
                                        <div class="mb-3">
                                            <div class="form-check">
                                                <input type="checkbox" class="form-check-input" name="isDefault" id="isDefault<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
                                                <label class="form-check-label" for="isDefault<%= address._id %>">Set as Default</label>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <button type="submit" class="btn btn-dark">Save Changes</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
        </div>
    </div>
</div>

<br>
<br>
<br>

<script>
    // In your address form script (client-side)
    document.getElementById('addAddressForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const form = this;
        const formData = new FormData(form);
        const jsonData = Object.fromEntries(formData);

        // Clear previous error messages
        form.querySelectorAll('.error-message').forEach(error => {
            error.textContent = '';
            error.previousElementSibling.classList.remove('is-invalid');
        });

        // Client-side validation
        let hasErrors = false;
        const errors = {};

        // Validate required fields
        const requiredFields = ['name', 'addressType', 'city', 'landmark', 'state', 'pinCode', 'phone'];
        requiredFields.forEach(field => {
            const value = jsonData[field]?.trim();
            if (!value) {
                errors[field] = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
                hasErrors = true;
            }
        });

        // Relax the validation patterns
        const namePattern = /^[A-Za-z\s\-']+$/; // Allows hyphens and apostrophes in names
        const addressPattern = /^[A-Za-z0-9\s\-.,'()]+$/; // More permissive for addresses
        
        if (jsonData.name && !namePattern.test(jsonData.name)) {
            errors.name = 'Please enter a valid name';
            hasErrors = true;
        }
        
        if (jsonData.city && !addressPattern.test(jsonData.city)) {
            errors.city = 'Please enter a valid city name';
            hasErrors = true;
        }
        
        if (jsonData.state && !addressPattern.test(jsonData.state)) {
            errors.state = 'Please enter a valid state name';
            hasErrors = true;
        }
        
        if (jsonData.landmark && !addressPattern.test(jsonData.landmark)) {
            errors.landmark = 'Please enter a valid landmark';
            hasErrors = true;
        }

        // Phone number validation
        if (jsonData.phone && !/^\d{10}$/.test(jsonData.phone)) {
            errors.phone = 'Phone must be exactly 10 digits';
            hasErrors = true;
        }
        
        if (jsonData.altPhone && jsonData.altPhone.trim() !== '' && !/^\d{10}$/.test(jsonData.altPhone)) {
            errors.altPhone = 'Alternate phone must be exactly 10 digits';
            hasErrors = true;
        }
        
        if (jsonData.pinCode && !/^\d{6}$/.test(jsonData.pinCode)) {
            errors.pinCode = 'PIN code must be exactly 6 digits';
            hasErrors = true;
        }

        // If there are client-side errors, display them and stop submission
        if (hasErrors) {
            Object.entries(errors).forEach(([field, message]) => {
                const errorElement = form.querySelector(`.error-message[data-field="${field}"]`);
                const inputElement = form.querySelector(`[name="${field}"]`);
                if (errorElement && inputElement) {
                    errorElement.textContent = message;
                    inputElement.classList.add('is-invalid');
                }
            });
            return;
        }

        // Proceed with form submission if no client-side errors
        try {
            const response = await fetch('/address/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(jsonData)
            });

            const result = await response.json();

            if (response.ok) {
                // Success - redirect or show success message
                window.location.href = '/address'; // or wherever you want to redirect
            } else if (result.errors) {
                // Server-side validation errors
                Object.entries(result.errors).forEach(([field, message]) => {
                    const errorElement = form.querySelector(`.error-message[data-field="${field}"]`);
                    const inputElement = form.querySelector(`[name="${field}"]`);
                    if (errorElement && inputElement) {
                        errorElement.textContent = message;
                        inputElement.classList.add('is-invalid');
                    }
                });
            } else {
                throw new Error(result.message || 'Failed to add address');
            }
        } catch (error) {
            console.error('Error:', error);
            // Show generic error message
            const generalError = form.querySelector('.error-message[data-field="general"]');
            if (generalError) {
                generalError.textContent = 'An error occurred while saving the address';
                generalError.style.display = 'block';
            }
        }
    });

    // Edit Address Forms
    document.querySelectorAll('.edit-address-form').forEach(form => {
        const modalId = form.closest('.modal').id;
        const modal = document.getElementById(modalId);
        let originalValues = {};

        // Store original values when modal is shown
        modal.addEventListener('show.bs.modal', function() {
            form.querySelectorAll('input, select').forEach(input => {
                originalValues[input.name] = input.type === 'checkbox' ? input.checked : input.value;
            });
        });

        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            const addressId = this.action.split('/').pop();
            const formData = new FormData(this);
            const jsonData = Object.fromEntries(formData);

            // Clear previous errors
            form.querySelectorAll('.error-message').forEach(el => el.textContent = '');
            form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

            // Check for changes
            let hasChanges = false;
            Object.keys(jsonData).forEach(key => {
                const currentValue = key === 'isDefault' ? (jsonData[key] === 'on') : jsonData[key];
                const originalValue = key === 'isDefault' ? originalValues[key] : originalValues[key];
                if (currentValue !== originalValue) hasChanges = true;
            });

            if (!hasChanges) {
                await Swal.fire({
                    icon: 'info',
                    title: 'No Changes',
                    text: 'No changes were detected in the address',
                    confirmButtonColor: '#222',
                    confirmButtonText: 'OK'
                });
                return;
            }

            try {
                const response = await fetch(`/address/edit/${addressId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ...jsonData,
                        isDefault: jsonData.isDefault === 'on'
                    })
                });

                const result = await response.json();

                if (response.ok) {
                    if (result.noChanges) {
                        await Swal.fire({
                            icon: 'info',
                            title: 'No Changes',
                            text: 'No changes were detected in the address',
                            confirmButtonColor: '#222',
                            confirmButtonText: 'OK'
                        });
                    } else {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Address updated successfully',
                            confirmButtonColor: '#222',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.reload();
                            }
                        });
                    }
                } else if (result.errors) {
                    // Show field-specific errors under inputs
                    Object.entries(result.errors).forEach(([field, message]) => {
                        const errorElement = form.querySelector(`.error-message[data-field="${field}"]`);
                        const inputElement = form.querySelector(`[name="${field}"]`);
                        if (errorElement && inputElement) {
                            errorElement.textContent = message;
                            inputElement.classList.add('is-invalid');
                        }
                    });
                    // Show SweetAlert with all errors combined
                    const errorMessages = Object.values(result.errors).join('\n');
                    await Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: errorMessages,
                        confirmButtonColor: '#222',
                        confirmButtonText: 'OK'
                    });
                } else {
                    throw new Error(result.errors?.general || 'Failed to update address');
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An unexpected error occurred while updating the address',
                    confirmButtonColor: '#222',
                    confirmButtonText: 'OK'
                });
            }
        });
    });

    // Delete Address Buttons
    document.querySelectorAll('.delete-address-btn').forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            const addressId = this.getAttribute('data-address-id');

            const confirmation = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to delete this address?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#222',
                cancelButtonColor: '#e74c3c',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, keep it'
            });

            if (!confirmation.isConfirmed) return;

            try {
                const response = await fetch(`/address/delete/${addressId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (response.ok) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: result.message || 'Address deleted successfully',
                        confirmButtonColor: '#222',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.reload();
                        }
                    });
                } else {
                    throw new Error(result.error || 'Failed to delete address');
                }
            } catch (error) {
                console.error('Error:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'An unexpected error occurred while deleting the address',
                    confirmButtonColor: '#222',
                    confirmButtonText: 'OK'
                });
            }
        });
    });
</script>
<%- include('../partials/user/footer') %>