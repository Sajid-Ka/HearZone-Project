<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
    <style>
        .content-main {
            padding: 2rem;
            background-color: #f8f9fa;
            min-height: 100vh;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        .category-form {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }
        .table-container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }
        .content-title {
            color: #2c3e50;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
            font-weight: 600;
        }
        .form-control {
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 0.75rem;
            transition: all 0.3s ease;
        }
        .form-control:focus {
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background-color: #4299e1;
            border: none;
        }
        .btn-primary:hover {
            background-color: #3182ce;
            transform: translateY(-1px);
        }
        .table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }
        .table th {
            background-color: #f8f9fa;
            color: #2d3748;
            font-weight: 600;
            padding: 1rem;
            text-align: left;
        }
        .table td {
            padding: 1rem;
            border-bottom: 1px solid #e2e8f0;
            vertical-align: middle;
        }
        .badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 500;
            font-size: 0.875rem;
        }
        .badge-success {
            background-color: #48bb78;
        }
        .badge-danger {
            background-color: #f56565;
        }
        .modal-content {
            background: white;
            padding: 2rem;
            margin: 10% auto;
            width: 40%;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        .close {
            font-size: 1.5rem;
            color: #a0aec0;
            transition: color 0.3s ease;
        }
        .close:hover {
            color: #2d3748;
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 2rem 0;
            gap: 0.5rem;
        }
        .pagination a, .pagination span {
            padding: 0.75rem 1.25rem;
            border-radius: 6px;
            color: #4a5568;
            text-decoration: none;
            transition: all 0.3s ease;
            background: #fff;
            border: 1px solid #e2e8f0;
        }
        .pagination a:hover {
            background-color: #edf2f7;
            color: #2d3748;
        }
        .pagination a.disabled {
            pointer-events: none;
            opacity: 0.5;
        }
        .current-page {
            background-color: #4299e1 !important;
            color: white !important;
            border: 1px solid #4299e1 !important;
        }
        .error-message {
            color: #e53e3e;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: none;
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.1);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4299e1;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            .modal-content {
                width: 90%;
            }
        }
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 1rem;
        }
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
        .table-responsive {
            margin: 1.5rem 0;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .table {
            margin-bottom: 0;
        }
        .table th {
            background-color: #f8fafc;
            padding: 1rem 1.5rem;
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .table td {
            padding: 1.25rem 1.5rem;
            vertical-align: middle;
        }
        .table tr:hover {
            background-color: #f8fafc;
        }
        .table td .btn {
            margin: 0 0.25rem;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }
        .badge {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: none;
        }
        .form-control.is-invalid {
            border-color: #dc3545;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            position: relative;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .badge {
            padding: 0.5em 0.75em;
            font-size: 0.875rem;
            font-weight: 500;
            border-radius: 0.25rem;
        }
        .badge-info {
            background-color: #17a2b8;
            color: white;
        }
        .badge-warning {
            background-color: #ffc107;
            color: #212529;
        }
    </style>
</head>
<body>
    <section class="content-main">
        <div class="loading-overlay" id="loadingOverlay">
            <div class="loading-spinner"></div>
        </div>
        <div class="container">
            <!-- Category Form -->
            <div class="category-form">
                <h2 class="content-title">Add Category</h2>
                <form onsubmit="return handleFormSubmit(event)">
                    <div class="form-grid">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Name</label>
                            <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" />
                            <div id="name-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label for="descriptionId" class="form-label">Description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" ></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Create Category</button>
                    </div>
                </form>
            </div>

            <!-- Category Table -->
            <div class="table-container">
                <h2 class="content-title">Manage Categories</h2>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Offer</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="categoryTableBody">
                            <% data.forEach((category) => { %>
                            <tr data-category-id="<%= category._id %>">
                                <td><%= category.name %></td>
                                <td><%= category.description %></td>
                                <td>
                                    <span class="badge <%= category.isListed ? 'badge-success' : 'badge-danger' %>">
                                        <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                    </span>
                                </td>
                                <td>
                                    <% if (category.offer && category.offer.isActive) { %>
                                        <span class="badge badge-info">
                                            <%= category.offer.percentage %>%
                                        </span>
                                    <% } else { %>
                                        No active offer
                                    <% } %>
                                </td>
                                <td>
                                    <button class="btn <%= category.isListed ? 'btn-danger' : 'btn-success' %>" 
                                            onclick="handleListUnlist('<%= category._id %>', <%= category.isListed %>)">
                                        <%= category.isListed ? 'Unlist' : 'List' %>
                                    </button>
                                    <button class="btn btn-info" 
                                            onclick="openEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">
                                        Edit
                                    </button>
                                    <button class="btn btn-outline-danger" 
                                            onclick="handleDelete('<%= category._id %>')">
                                        Delete
                                    </button>
                                    <% if (category.offer && category.offer.isActive) { %>
                                        <button class="btn btn-warning" 
                                                onclick="handleCancelOffer('<%= category._id %>')">
                                            Cancel Offer
                                        </button>
                                    <% } else { %>
                                        <button class="btn btn-success" 
                                                onclick="openOfferModal('<%= category._id %>', '<%= category.name.replace(/'/g, "\\'") %>')">
                                            Add Offer
                                        </button>
                                    <% } %>
                                </td>
                            </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
                <div class="pagination" id="pagination">
                    <% if (currentPage > 1) { %>
                        <a href="#" onclick="loadPage(1); return false;">First</a>
                        <a href="#" onclick="loadPage(<%= currentPage - 1 %>); return false;">«</a>
                    <% } %>
                    
                    <% 
                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(totalPages, startPage + 4);
                    if (endPage - startPage < 4) {
                        startPage = Math.max(1, endPage - 4);
                    }
                    %>
                    
                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <% if (i === currentPage) { %>
                            <span class="current-page"><%= i %></span>
                        <% } else { %>
                            <a href="#" onclick="loadPage(<%= i %>); return false;"><%= i %></a>
                        <% } %>
                    <% } %>
                    
                    <% if (currentPage < totalPages) { %>
                        <a href="#" onclick="loadPage(<%= currentPage + 1 %>); return false;">»</a>
                        <a href="#" onclick="loadPage(<%= totalPages %>); return false;">Last</a>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Edit Modal -->
        <div id="editModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeEditModal()">×</span>
                <h2>Edit Category</h2>
                <form id="editCategoryForm" onsubmit="return handleEditSubmit(event)">
                    <input type="hidden" id="editCategoryId">
                    <div class="mb-4">
                        <label for="editCategoryName" class="form-label">Name</label>
                        <input type="text" id="editCategoryName" name="categoryName" class="form-control" required>
                    </div>
                    <div class="mb-4">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea id="editDescription" name="description" class="form-control" required></textarea>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Update Category</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Add Offer Modal -->
        <div id="offerModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeOfferModal()">×</span>
                <h2>Add Category Offer</h2>
                <form id="offerForm" onsubmit="return handleOfferSubmit(event)">
                    <input type="hidden" id="offerCategoryId">
                    <div class="mb-4">
                        <label for="categoryName" class="form-label">Category Name</label>
                        <input type="text" id="categoryName" class="form-control" readonly>
                    </div>
                    <div class="mb-4">
                        <label for="offerPercentage" class="form-label">Offer Percentage</label>
                        <input type="number" id="offerPercentage" name="percentage" class="form-control" min="0" max="100" required>
                        <div id="percentage-error" class="error-message"></div>
                    </div>
                    <div class="mb-4">
                        <label for="offerEndDate" class="form-label">End Date</label>
                        <input type="datetime-local" id="offerEndDate" name="endDate" class="form-control" required>
                        <div id="endDate-error" class="error-message"></div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Add Offer</button>
                    </div>
                </form>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script>
        let isLoading = false;

        // Get current page from URL
        function getCurrentPage() {
            const urlParams = new URLSearchParams(window.location.search);
            return parseInt(urlParams.get('page')) || 1;
        }

        // Toggle loading state
        function toggleLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            const paginationLinks = document.querySelectorAll('.pagination a');
            isLoading = show;
            overlay.style.display = show ? 'flex' : 'none';
            paginationLinks.forEach(link => {
                link.classList.toggle('disabled', show);
            });
        }

        // Function to load categories for a specific page
        async function loadPage(page) {
            if (isLoading) return;
            toggleLoading(true);
            try {
                const response = await fetch(`/admin/category?page=${page}`, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                });
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const data = await response.json();
                if (data.success) {
                    updateCategoryTable(data.data);
                    updatePagination(data.currentPage, data.totalPages);
                    window.history.pushState({}, '', `/admin/category?page=${data.currentPage}`);
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to load categories',
                        icon: 'error',
                    });
                }
            } catch (error) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to fetch categories. Please check your network connection.',
                    icon: 'error',
                });
            } finally {
                toggleLoading(false);
            }
        }

        // Function to update the category table dynamically
        function updateCategoryTable(categories) {
            const tbody = document.getElementById('categoryTableBody');
            if (!tbody) return;

            tbody.innerHTML = '';

            if (categories.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center">No categories available</td></tr>';
                return;
            }

            categories.forEach(category => {
                const hasActiveOffer = category.offer && category.offer.isActive;
                const offerHtml = hasActiveOffer ? 
                    `<span class="badge badge-info">
                        ${category.offer.percentage}%
                    </span>` : 
                    'No active offer';
                
                const offerButtonHtml = hasActiveOffer ? 
                    `<button class="btn btn-warning" onclick="handleCancelOffer('${category._id}')">
                        Cancel Offer
                    </button>` :
                    `<button class="btn btn-success" onclick="openOfferModal('${category._id}', '${category.name.replace(/'/g, "\\'")}')">
                        Add Offer
                    </button>`;

                const row = 
                    `<tr data-category-id="${category._id}">
                        <td>${category.name}</td>
                        <td>${category.description}</td>
                        <td>
                            <span class="badge ${category.isListed ? 'badge-success' : 'badge-danger'}">
                                ${category.isListed ? 'Listed' : 'Unlisted'}
                            </span>
                        </td>
                        <td>${offerHtml}</td>
                        <td>
                            <button class="btn ${category.isListed ? 'btn-danger' : 'btn-success'}" 
                                    onclick="handleListUnlist('${category._id}', ${category.isListed})">
                                ${category.isListed ? 'Unlist' : 'List'}
                            </button>
                            <button class="btn btn-info" 
                                    onclick="openEditModal('${category._id}', '${category.name.replace(/'/g, "\\'")}', '${category.description.replace(/'/g, "\\'")}')">
                                Edit
                            </button>
                            <button class="btn btn-outline-danger" 
                                    onclick="handleDelete('${category._id}')">
                                Delete
                            </button>
                            ${offerButtonHtml}
                        </td>
                    </tr>`;
                tbody.innerHTML += row;
            });
        }

        // Function to update pagination dynamically
        function updatePagination(currentPage, totalPages) {
            const pagination = document.getElementById('pagination');
            if (!pagination) return;

            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }

            let newPagination = '';

            if (currentPage > 1) {
                newPagination += `<a href="#" onclick="loadPage(1); return false;">First</a>`;
                newPagination += `<a href="#" onclick="loadPage(${currentPage - 1}); return false;">«</a>`;
            }

            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    newPagination += `<span class="current-page">${i}</span>`;
                } else {
                    newPagination += `<a href="#" onclick="loadPage(${i}); return false;">${i}</a>`;
                }
            }

            if (currentPage < totalPages) {
                newPagination += `<a href="#" onclick="loadPage(${currentPage + 1}); return false;">»</a>`;
                newPagination += `<a href="#" onclick="loadPage(${totalPages}); return false;">Last</a>`;
            }

            pagination.innerHTML = newPagination;
        }

        // Form Submission for Adding Category
        function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) return;

            const name = document.getElementsByName("name")[0].value;
            const description = document.getElementById("descriptionId").value;

            Swal.fire({
                title: 'Add Category',
                text: 'Are you sure you want to add this category?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, add it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleLoading(true);
                    fetch('/admin/category', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name, description })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success!', data.message, 'success').then(() => {
                                loadPage(1);
                                document.querySelector('form').reset();
                            });
                        } else {
                            Swal.fire('Error!', data.error, 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error!', 'An error occurred while adding category', 'error');
                    })
                    .finally(() => toggleLoading(false));
                }
            });
        }

        // List/Unlist Category
        function handleListUnlist(categoryId, isListed) {
            const action = isListed ? 'unlistCategory' : 'listCategory';
            const actionText = isListed ? 'Unlist' : 'List';

            Swal.fire({
                title: `Are you sure?`,
                text: `Do you want to ${actionText.toLowerCase()} this category?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: `Yes, ${actionText.toLowerCase()} it!`
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleLoading(true);
                    fetch(`/admin/${action}?id=${categoryId}`, { 
                        method: 'GET' 
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire(`${actionText}ed!`, data.message, 'success').then(() => {
                                updateCategoryRow(categoryId, data.category);
                            });
                        } else {
                            Swal.fire('Error!', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error!', 'Something went wrong', 'error');
                    })
                    .finally(() => toggleLoading(false));
                }
            });
        }

        // Update Category Row
        function updateCategoryRow(categoryId, category) {
            const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
            if (row) {
                // Update basic info
                row.cells[0].textContent = category.name;
                row.cells[1].textContent = category.description;

                // Update status badge
                const statusCell = row.cells[2];
                const statusBadge = statusCell.querySelector('.badge');
                statusBadge.className = `badge ${category.isListed ? 'badge-success' : 'badge-danger'}`;
                statusBadge.textContent = category.isListed ? 'Listed' : 'Unlisted';

                // Update offer info
                const offerCell = row.cells[3];
                if (category.offer && category.offer.isActive) {
                    offerCell.innerHTML = `<span class="badge badge-info">
                        ${category.offer.percentage}%
                    </span>`;
                } else {
                    offerCell.textContent = 'No active offer';
                }

                // Update action buttons
                const actionCell = row.cells[4];
                actionCell.innerHTML = `
                    <button class="btn ${category.isListed ? 'btn-danger' : 'btn-success'}" 
                            onclick="handleListUnlist('${category._id}', ${category.isListed})">
                        ${category.isListed ? 'Unlist' : 'List'}
                    </button>
                    <button class="btn btn-info" 
                            onclick="openEditModal('${category._id}', '${category.name.replace(/'/g, "\\'")}', '${category.description.replace(/'/g, "\\'")}')">
                        Edit
                    </button>
                    <button class="btn btn-outline-danger" 
                            onclick="handleDelete('${category._id}')">
                        Delete
                    </button>
                    ${category.offer && category.offer.isActive ? 
                        `<button class="btn btn-warning" 
                                onclick="handleCancelOffer('${category._id}')">
                            Cancel Offer
                        </button>` :
                        `<button class="btn btn-success" 
                                onclick="openOfferModal('${category._id}', '${category.name.replace(/'/g, "\\'")}')">
                            Add Offer
                        </button>`
                    }
                `;
            }
        }

        // Edit Category Submission
        function handleEditSubmit(event) {
            event.preventDefault();
            const categoryId = document.getElementById('editCategoryId').value;
            const categoryName = document.getElementById('editCategoryName').value;
            const description = document.getElementById('editDescription').value;

            // Get original values from the row
            const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
            const originalName = row.cells[0].textContent;
            const originalDescription = row.cells[1].textContent;

            // Check if there are any changes
            if (categoryName === originalName && description === originalDescription) {
                Swal.fire('Info', 'No changes were made to the category', 'info');
                closeEditModal();
                return;
            }

            Swal.fire({
                title: 'Confirm Changes',
                text: 'Are you sure you want to save these changes?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, save it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleLoading(true);
                    fetch('/admin/editCategory', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            categoryId,
                            categoryName, 
                            description 
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Updated!', data.message, 'success').then(() => {
                                updateCategoryRow(categoryId, data.category);
                                closeEditModal();
                            });
                        } else {
                            Swal.fire('Error!', data.error || data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Edit error:', error);
                        Swal.fire('Error!', 'Something went wrong while updating the category', 'error');
                    })
                    .finally(() => toggleLoading(false));
                }
            });
        }

        // Open Edit Modal
        function openEditModal(categoryId, name, description) {
            document.getElementById('editCategoryId').value = categoryId;
            document.getElementById('editCategoryName').value = name;
            document.getElementById('editDescription').value = description;
            document.getElementById('editModal').style.display = 'block';
        }

        // Close Edit Modal
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Delete Category
        function handleDelete(categoryId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to delete this category?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleLoading(true);
                    fetch(`/admin/deleteCategory?id=${categoryId}`, { method: 'GET' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Deleted!', data.message, 'success').then(() => {
                                const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
                                if (row) row.remove();
                                const tbody = document.getElementById('categoryTableBody');
                                if (tbody.children.length === 0) {
                                    const currentPage = getCurrentPage();
                                    loadPage(currentPage > 1 ? currentPage - 1 : 1);
                                }
                            });
                        } else {
                            Swal.fire('Error!', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error!', 'Something went wrong', 'error');
                    })
                    .finally(() => toggleLoading(false));
                }
            });
        }

        // Form Validation
        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName("name")[0];
            const description = document.getElementById("descriptionId");
            let isValid = true;

            if (!name.value.trim()) {
                displayErrorMessage("name-error", "Category name is required");
                name.classList.add('is-invalid');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name.value.trim())) {
                displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
                name.classList.add('is-invalid');
                isValid = false;
            } else {
                name.classList.remove('is-invalid');
            }

            if (!description.value.trim()) {
                displayErrorMessage("description-error", "Description is required");
                description.classList.add('is-invalid');
                isValid = false;
            } else {
                description.classList.remove('is-invalid');
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            const formInputs = document.querySelectorAll('.form-control');
            
            Array.from(errorElements).forEach(element => {
                element.textContent = "";
                element.style.display = "none";
            });
            
            Array.from(formInputs).forEach(input => {
                input.classList.remove('is-invalid');
            });
        }

        document.getElementsByName("name")[0].addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.remove('is-invalid');
                document.getElementById("name-error").style.display = "none";
            }
        });

        document.getElementById("descriptionId").addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.remove('is-invalid');
                document.getElementById("description-error").style.display = "none";
            }
        });

        // Open Offer Modal
        function openOfferModal(categoryId, categoryName) {
            document.getElementById('offerCategoryId').value = categoryId;
            document.getElementById('categoryName').value = categoryName;
            document.getElementById('offerModal').style.display = 'block';
        }

        // Close Offer Modal
        function closeOfferModal() {
            document.getElementById('offerModal').style.display = 'none';
            document.getElementById('offerForm').reset();
        }

        // Handle Offer Submission
        function handleOfferSubmit(event) {
            event.preventDefault();
            
            const categoryId = document.getElementById('offerCategoryId').value;
            const percentage = document.getElementById('offerPercentage').value;
            const endDate = document.getElementById('offerEndDate').value;

            // Validate percentage
            if (percentage < 0 || percentage > 100) {
                Swal.fire('Error!', 'Percentage must be between 0 and 100', 'error');
                return false;
            }

            // Validate end date
            const endDateObj = new Date(endDate);
            if (endDateObj <= new Date()) {
                Swal.fire('Error!', 'End date must be in the future', 'error');
                return false;
            }

            toggleLoading(true);
            fetch('/admin/addCategoryOffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    categoryId,
                    percentage: parseInt(percentage),
                    endDate
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success!', data.message, 'success').then(() => {
                        closeOfferModal();
                        loadPage(getCurrentPage());
                    });
                } else {
                    Swal.fire('Error!', data.message, 'error');
                }
            })
            .catch(error => {
                Swal.fire('Error!', 'An error occurred while adding the offer', 'error');
            })
            .finally(() => toggleLoading(false));

            return false;
        }

        // Handle Cancel Offer
        function handleCancelOffer(categoryId) {
            Swal.fire({
                title: 'Cancel Offer',
                text: 'Are you sure you want to cancel this offer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    toggleLoading(true);
                    fetch('/admin/cancelCategoryOffer', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ categoryId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Success!', data.message, 'success').then(() => {
                                loadPage(getCurrentPage());
                            });
                        } else {
                            Swal.fire('Error!', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        Swal.fire('Error!', 'An error occurred while canceling the offer', 'error');
                    })
                    .finally(() => toggleLoading(false));
                }
            });
        }
    </script>
<%- include("../../views/partials/admin/footer") %>