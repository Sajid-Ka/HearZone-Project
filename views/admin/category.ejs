<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
    <style>
        .content-main {
            padding: 2rem;
            background-color: #f8f9fa;
            min-height: 100vh;
        }
        .container {
            display: flex;
            flex-direction: column;
            gap: 2rem;
            max-width: 1200px;
            margin: 0 auto;
        }
        .category-form {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }
        .table-container {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        }
        .content-title {
            color: #2c3e50;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
            font-weight: 600;
        }
        .form-control {
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 0.75rem;
            transition: all 0.3s ease;
        }
        .form-control:focus {
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        .btn-primary {
            background-color: #4299e1;
            border: none;
        }
        .btn-primary:hover {
            background-color: #3182ce;
            transform: translateY(-1px);
        }
        .table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }
        .table th {
            background-color: #f8f9fa;
            color: #2d3748;
            font-weight: 600;
            padding: 1rem;
            text-align: left;
        }
        .table td {
            padding: 1rem;
            border-bottom: 1px solid #e2e8f0;
            vertical-align: middle;
        }
        .badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 500;
            font-size: 0.875rem;
        }
        .badge-success {
            background-color: #48bb78;
        }
        .badge-danger {
            background-color: #f56565;
        }
        .modal-content {
            background: white;
            padding: 2rem;
            margin: 10% auto;
            width: 40%;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        .close {
            font-size: 1.5rem;
            color: #a0aec0;
            transition: color 0.3s ease;
        }
        .close:hover {
            color: #2d3748;
        }
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 2rem 0;
            gap: 0.5rem;
        }
        .pagination a, .pagination span {
            padding: 0.75rem 1.25rem;
            border-radius: 6px;
            color: #4a5568;
            text-decoration: none;
            transition: all 0.3s ease;
            background: #fff;
            border: 1px solid #e2e8f0;
        }
        .pagination a:hover {
            background-color: #edf2f7;
            color: #2d3748;
        }
        .current-page {
            background-color: #4299e1 !important;
            color: white !important;
            border: 1px solid #4299e1 !important;
        }
        .error-message {
            color: #e53e3e;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: none;
        }
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            .modal-content {
                width: 90%;
            }
        }
        /* New styles for the form */
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 1rem;
        }
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
        .table-responsive {
            margin: 1.5rem 0;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .table {
            margin-bottom: 0;
        }
        .table th {
            background-color: #f8fafc;
            padding: 1rem 1.5rem;
            font-size: 0.95rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .table td {
            padding: 1.25rem 1.5rem;
            vertical-align: middle;
        }
        .table tr:hover {
            background-color: #f8fafc;
        }
        .table td .btn {
            margin: 0 0.25rem;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }
        .badge {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .error-message {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: none;
        }
        .form-control.is-invalid {
            border-color: #dc3545;
        }
    </style>
</head>
<body>
    <section class="content-main">
        <div class="container">
            <!-- Category Form -->
            <div class="category-form">
                <h2 class="content-title">Add Category</h2>
                <form onsubmit="return handleFormSubmit(event)">
                    <div class="form-grid">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Name</label>
                            <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" />
                            <div id="name-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label for="descriptionId" class="form-label">Description</label>
                            <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" ></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Create Category</button>
                    </div>
                </form>
            </div>

            <!-- Category Table -->
            <div class="table-container">
                <h2 class="content-title">Manage Categories</h2>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% data.forEach((category) => { %>
                            <tr data-category-id="<%= category._id %>">
                                <td><%= category.name %></td>
                                <td><%= category.description %></td>
                                <td>
                                    <span class="badge <%= category.isListed ? 'badge-success' : 'badge-danger' %>">
                                        <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                    </span>
                                </td>
                                <td>
                                    <button class="btn <%= category.isListed ? 'btn-danger' : 'btn-success' %>" 
                                            onclick="handleListUnlist('<%= category._id %>', <%= category.isListed %>)">
                                        <%= category.isListed ? 'Unlist' : 'List' %>
                                    </button>
                                    <button class="btn btn-info" 
                                            onclick="openEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>')">
                                        Edit
                                    </button>
                                    <button class="btn btn-outline-danger" 
                                            onclick="handleDelete('<%= category._id %>')">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
                <div class="pagination">
                    <% if (currentPage > 1) { %>
                        <a href="?page=1">First</a>
                        <a href="?page=<%= currentPage - 1 %>">Â«</a>
                    <% } %>
                    
                    <% 
                    let startPage = Math.max(1, currentPage - 2);
                    let endPage = Math.min(totalPages, startPage + 4);
                    if (endPage - startPage < 4) {
                        startPage = Math.max(1, endPage - 4);
                    }
                    %>
                    
                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <% if (i === currentPage) { %>
                            <span class="current-page"><%= i %></span>
                        <% } else { %>
                            <a href="?page=<%= i %>"><%= i %></a>
                        <% } %>
                    <% } %>
                    
                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>">Â»</a>
                        <a href="?page=<%= totalPages %>">Last</a>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Edit Modal -->
        <div id="editModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeEditModal()">&times;</span>
                <h2>Edit Category</h2>
                <form id="editCategoryForm" onsubmit="return handleEditSubmit(event)">
                    <input type="hidden" id="editCategoryId">
                    <div class="mb-4">
                        <label for="editCategoryName" class="form-label">Name</label>
                        <input type="text" id="editCategoryName" name="categoryName" class="form-control" required>
                    </div>
                    <div class="mb-4">
                        <label for="editDescription" class="form-label">Description</label>
                        <textarea id="editDescription" name="description" class="form-control" required></textarea>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Update Category</button>
                    </div>
                </form>
            </div>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
        // Form Submission for Adding Category
        function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) return;

            const name = document.getElementsByName("name")[0].value;
            const description = document.getElementById("descriptionId").value;

            fetch('/admin/category', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, description })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Success!', data.message, 'success').then(() => {
                        window.location.href = '/admin/category?page=1'; // Redirect to first page
                    });
                } else {
                    Swal.fire('Error!', data.error, 'error');
                }
            })
            .catch(error => Swal.fire('Error!', 'An error occurred while adding category', 'error'));
        }

        // List/Unlist Category
        function handleListUnlist(categoryId, isListed) {
    const action = isListed ? 'unlistCategory' : 'listCategory';
    const actionText = isListed ? 'Unlist' : 'List';

    Swal.fire({
        title: `Are you sure?`,
        text: `Do you want to ${actionText.toLowerCase()} this category?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${actionText.toLowerCase()} it!`
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/${action}?id=${categoryId}`, { 
                method: 'GET' 
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire(`${actionText}d!`, data.message, 'success').then(() => {
                        updateCategoryRow(categoryId, data.category);
                    });
                } else {
                    Swal.fire('Error!', data.message, 'error');
                }
            })
            .catch(error => Swal.fire('Error!', 'Something went wrong', 'error'));
        }
    });
}

// Update the updateCategoryRow function
function updateCategoryRow(categoryId, category) {
    const row = document.querySelector(`tr[data-category-id="${categoryId}"]`);
    if (row) {
        // Update name and description
        row.cells[0].textContent = category.name;
        row.cells[1].textContent = category.description;

        // Update status badge
        const statusCell = row.cells[2];
        const statusBadge = statusCell.querySelector('.badge');
        statusBadge.className = `badge ${category.isListed ? 'badge-success' : 'badge-danger'}`;
        statusBadge.textContent = category.isListed ? 'Listed' : 'Unlisted';

        // Update action buttons
        const actionCell = row.cells[3];
        
        // Update list/unlist button
        const listButton = actionCell.querySelector('.btn-danger, .btn-success');
        if (listButton) {
            listButton.className = `btn ${category.isListed ? 'btn-danger' : 'btn-success'}`;
            listButton.textContent = category.isListed ? 'Unlist' : 'List';
            listButton.onclick = () => handleListUnlist(categoryId, category.isListed);
        }

        // Update edit button onclick
        const editButton = actionCell.querySelector('.btn-info');
        if (editButton) {
            editButton.onclick = () => openEditModal(categoryId, category.name, category.description);
        }
    }
}

// Replace the handleEditSubmit function
function handleEditSubmit(event) {
    event.preventDefault();
    const categoryId = document.getElementById('editCategoryId').value;
    const categoryName = document.getElementById('editCategoryName').value;
    const description = document.getElementById('editDescription').value;

    Swal.fire({
        title: 'Confirm Changes',
        text: 'Are you sure you want to save these changes?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, save it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/editCategory/${categoryId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ categoryName, description })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Updated!', data.message, 'success').then(() => {
                        updateCategoryRow(categoryId, data.category);
                        closeEditModal();
                    });
                } else {
                    // Check if it's a "no changes" error
                    if (data.error === "No changes detected") {
                        Swal.fire('Info', 'No changes were made to the category', 'info');
                        closeEditModal();
                    } else {
                        Swal.fire('Error!', data.error, 'error');
                    }
                }
            })
            .catch(error => Swal.fire('Error!', 'Something went wrong', 'error'));
        }
    });
}

        // Open Edit Modal
        function openEditModal(categoryId, name, description) {
            document.getElementById('editCategoryId').value = categoryId;
            document.getElementById('editCategoryName').value = name;
            document.getElementById('editDescription').value = description;
            document.getElementById('editModal').style.display = 'block';
        }

        // Close Edit Modal
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Delete Category
        function handleDelete(categoryId) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to delete this category?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/deleteCategory?id=${categoryId}`, { method: 'GET' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Deleted!', data.message, 'success').then(() => {
                                document.querySelector(`tr[data-category-id="${categoryId}"]`).remove();
                            });
                        } else {
                            Swal.fire('Error!', data.message, 'error');
                        }
                    })
                    .catch(error => Swal.fire('Error!', 'Something went wrong', 'error'));
                }
            });
        }

        // Form Validation
        function validateForm() {
            clearErrorMessages();
            const name = document.getElementsByName("name")[0];
            const description = document.getElementById("descriptionId");
            let isValid = true;

            // Validate name
            if (!name.value.trim()) {
                displayErrorMessage("name-error", "Category name is required");
                name.classList.add('is-invalid');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name.value.trim())) {
                displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
                name.classList.add('is-invalid');
                isValid = false;
            } else {
                name.classList.remove('is-invalid');
            }

            // Validate description
            if (!description.value.trim()) {
                displayErrorMessage("description-error", "Description is required");
                description.classList.add('is-invalid');
                isValid = false;
            } else {
                description.classList.remove('is-invalid');
            }

            return isValid;
        }

        // Update the displayErrorMessage function
        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.textContent = message;
            errorElement.style.display = "block";
        }

        // Update the clearErrorMessages function
        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            const formInputs = document.querySelectorAll('.form-control');
            
            Array.from(errorElements).forEach(element => {
                element.textContent = "";
                element.style.display = "none";
            });
            
            Array.from(formInputs).forEach(input => {
                input.classList.remove('is-invalid');
            });
        }
        
        // Add real-time validation
        document.getElementsByName("name")[0].addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.remove('is-invalid');
                document.getElementById("name-error").style.display = "none";
            }
        });

        document.getElementById("descriptionId").addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.remove('is-invalid');
                document.getElementById("description-error").style.display = "none";
            }
        });
    </script>
<%- include("../../views/partials/admin/footer") %>