<%- include("../../views/partials/admin/header") %>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
    .brand-image {
        width: 100px;  
        height: 100px; 
        object-fit: contain; 
        border-radius: 8px;
        margin-bottom: 5px;
    }
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 5px;
    }
    
    .pagination .page-item {
        list-style: none;
    }
    
    .pagination .page-link {
        padding: 8px 16px;
        border: 1px solid #ddd;
        color: #333;
        text-decoration: none;
        border-radius: 4px;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    .pagination .page-link:hover {
        background-color: #f8f9fa;
    }

    .status-active {
        color: green;
        font-weight: bold;
    }
    .status-blocked {
        color: red;
        font-weight: bold;
    }
</style>
<div class="container">
    <div class="card">
        <h2 class="card-title">Add New Brand</h2>
        <form id="addBrandForm" action="/admin/brands/add" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <label for="brandName">Brand Name:</label>
                <input type="text" id="brandName" name="brandName" class="form-control" required>
                <small id="brandNameError" class="text-danger" style="display: none;">Please enter a Brand Name</small>
            </div>
            <div class="form-group">
                <label for="brandImage">Brand Logo:</label>
                <input type="file" id="brandImage" name="brandImage" class="form-control">
            </div>
            <button type="button" onclick="submitBrandForm()" class="btn btn-primary">Add Brand</button>
        </form>
    </div>

    <div class="card">
        <h2 class="card-title">Existing Brands</h2>
        <table class="brand-table">
            <thead>
                <tr>
                    <th>Brand</th>
                    <th>Logo</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% brands.forEach(brand => { %>
                    <tr>
                        <td><%= brand.brandName %></td>
                        <td>
                            <% if (brand.brandImage && brand.brandImage.length > 0) { %>
                                <img src="<%= brand.brandImage[0] %>" alt="<%= brand.brandName %>" class="brand-image img-fluid">
                            <% } %>
                        </td>
                        <td>
                            <span class="<%= brand.isBlocked ? 'status-blocked' : 'status-active' %>">
                                <%= brand.isBlocked ? 'Blocked' : 'Active' %>
                            </span>
                        </td>
                        <td class="action-buttons">
                            <button onclick="toggleBrand('<%= brand._id %>', <%= brand.isBlocked %>)" class="btn <%= brand.isBlocked ? 'btn-success' : 'btn-danger' %>">
                                <%= brand.isBlocked ? 'Unblock' : 'Block' %>
                            </button>
                            <button onclick="deleteBrand('<%= brand._id %>')" class="btn btn-danger">Delete</button>
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="loadPage(<%= currentPage - 1 %>); return false;">Previous</a>
                    </li>
                <% } %>
        
                <% for(let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                        <a class="page-link" href="#" onclick="loadPage(<%= i %>); return false;"><%= i %></a>
                    </li>
                <% } %>
        
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" onclick="loadPage(<%= currentPage + 1 %>); return false;">Next</a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    
    function getCurrentPage() {
        const urlParams = new URLSearchParams(window.location.search);
        return parseInt(urlParams.get('page')) || 1;
    }

   
    function loadPage(page) {
        fetch(`/admin/brands?page=${page}`, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest', 
            },
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    
                    updateBrandTable(data.brands);
                    
                    updatePagination(data.currentPage, data.totalPages);
                    
                    window.history.pushState({}, '', `/admin/brands?page=${data.currentPage}`);
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Failed to load brands',
                        icon: 'error',
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    title: 'Error!',
                    text: 'An unexpected error occurred',
                    icon: 'error',
                });
            });
    }

   
    function updateBrandTable(brands) {
        const tbody = document.querySelector('table.brand-table tbody');
        if (!tbody) return;

        
        tbody.innerHTML = '';

       
        if (brands.length === 0) {
            tbody.innerHTML = '<tr><td colspan="4" class="text-center">No brands available</td></tr>';
            return;
        }

        
        brands.forEach(brand => {
            const row = `
                <tr>
                    <td>${brand.brandName}</td>
                    <td>
                        ${brand.brandImage && brand.brandImage.length > 0
                            ? `<img src="${brand.brandImage[0]}" alt="${brand.brandName}" class="brand-image img-fluid">`
                            : ''}
                    </td>
                    <td>
                        <span class="${brand.isBlocked ? 'status-blocked' : 'status-active'}">
                            ${brand.isBlocked ? 'Blocked' : 'Active'}
                        </span>
                    </td>
                    <td class="action-buttons">
                        <button onclick="toggleBrand('${brand._id}', ${brand.isBlocked})" class="btn ${brand.isBlocked ? 'btn-success' : 'btn-danger'}">
                            ${brand.isBlocked ? 'Unblock' : 'Block'}
                        </button>
                        <button onclick="deleteBrand('${brand._id}')" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            `;
            tbody.innerHTML += row;
        });
    }

    
    function updatePagination(currentPage, totalPages) {
        const pagination = document.querySelector('.pagination');
        if (!pagination) return;

        let newPagination = '';

        
        if (currentPage > 1) {
            newPagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadPage(${currentPage - 1}); return false;">Previous</a></li>`;
        }

        
        for (let i = 1; i <= totalPages; i++) {
            newPagination += `<li class="page-item ${currentPage === i ? 'active' : ''}">
                <a class="page-link" href="#" onclick="loadPage(${i}); return false;">${i}</a>
            </li>`;
        }

        
        if (currentPage < totalPages) {
            newPagination += `<li class="page-item"><a class="page-link" href="#" onclick="loadPage(${currentPage + 1}); return false;">Next</a></li>`;
        }

        pagination.innerHTML = newPagination;
    }

    
    function submitBrandForm() {
        
        const brandNameInput = document.getElementById('brandName');
        const brandImageInput = document.getElementById('brandImage');
        const brandNameError = document.getElementById('brandNameError');
        brandNameError.style.display = 'none';
        brandNameInput.classList.remove('is-invalid');
        brandImageInput.classList.remove('is-invalid');

        
        if (!brandNameInput.value.trim()) {
            brandNameInput.classList.add('is-invalid');
            brandNameError.style.display = 'block';
            return;
        }

        
        if (!brandImageInput.files || brandImageInput.files.length === 0) {
            brandImageInput.classList.add('is-invalid');
            Swal.fire({
                title: 'Error!',
                text: 'Please select a brand image',
                icon: 'error',
            });
            return;
        }

        
        Swal.fire({
            title: 'Add New Brand',
            text: 'Are you sure you want to add this brand?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Add Brand',
        }).then(result => {
            if (result.isConfirmed) {
                const form = document.getElementById('addBrandForm');
                const formData = new FormData(form);

                fetch('/admin/brands/add', {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                            }).then(() => {
                                
                                loadPage(getCurrentPage());
                                
                                form.reset();
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message,
                                icon: 'error',
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An unexpected error occurred',
                            icon: 'error',
                        });
                    });
            }
        });
    }

    function toggleBrand(brandId, isBlocked) {
        Swal.fire({
            title: isBlocked ? 'Unblock Brand?' : 'Block Brand?',
            text: `Are you sure you want to ${isBlocked ? 'unblock' : 'block'} this brand?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: `Yes, ${isBlocked ? 'Unblock' : 'Block'}`,
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/admin/brands/toggle', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ brandId }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                            }).then(() => {
                                
                                const row = document.querySelector(
                                    `tr td button[onclick*="${brandId}"]`
                                ).closest('tr');
                                if (!row) {
                                    console.error('Brand row not found for ID:', brandId);
                                    return;
                                }
                                const statusCell = row.querySelector('td:nth-child(3) span');
                                const actionButton = row.querySelector(
                                    'td.action-buttons button:first-child'
                                );

                                
                                statusCell.textContent = isBlocked ? 'Active' : 'Blocked';
                                statusCell.className = isBlocked
                                    ? 'status-active'
                                    : 'status-blocked';

                                
                                actionButton.textContent = isBlocked ? 'Block' : 'Unblock';
                                actionButton.className = isBlocked
                                    ? 'btn btn-danger'
                                    : 'btn btn-success';

                                
                                actionButton.setAttribute(
                                    'onclick',
                                    `toggleBrand('${brandId}', ${!isBlocked})`
                                );
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message,
                                icon: 'error',
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An unexpected error occurred',
                            icon: 'error',
                        });
                    });
            }
        });
    }

    function deleteBrand(brandId) {
        Swal.fire({
            title: 'Delete Brand?',
            text: 'This action cannot be undone!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, Delete',
        }).then(result => {
            if (result.isConfirmed) {
                fetch('/admin/brands/delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ brandId }),
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                            }).then(() => {
                                
                                const currentPage = getCurrentPage();
                                loadPage(currentPage);
                            });
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: data.message,
                                icon: 'error',
                            });
                        }
                    })
                    .catch(error => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'An unexpected error occurred',
                            icon: 'error',
                        });
                    });
            }
        });
    }
</script>

<%- include("../../views/partials/admin/footer") %>
