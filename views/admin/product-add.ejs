<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin Panel</title>
    
    <!-- Required CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    
    <!-- Custom Styles -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f1f4f8;
        }

        .content-main {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: none;
        }

        .error-message {
            color: red;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            padding: 10px;
            gap: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 15px;
            min-height: 100px;
            align-items: center;
        }

        .thumbnail {
            position: relative;
            flex-shrink: 0;
        }

        .thumbnail img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: white;
            border-radius: 50%;
            width: 15px;
            height: 15px;
            line-height: 15px;
            text-align: center;
            cursor: pointer;
            font-weight: bold;
            color: red;
        }

        .image-preview {
            max-width: 150px;
            max-height: 150px;
            margin-bottom: 10px;
            display: none;
            border-radius: 4px;
            width: 150px;
            height: 150px;
            object-fit: cover;
            border: 1px solid #ddd;
        }

        .hover-up:hover {
            transform: translateY(-2px);
            transition: all 0.2s ease;
        }

        .img-container {
            max-height: 400px;
            overflow: hidden;
        }

        .cropper-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
        }
        
        /* Added styles for image input container */
        .image-input-container {
            position: relative;
            margin-bottom: 20px;
        }
        
        /* Input file customize */
        .custom-file-input {
            position: relative;
            z-index: 2;
            width: 100%;
            height: calc(1.5em + 0.75rem + 2px);
            margin: 0;
            opacity: 0;
        }
        
        .custom-file-label {
            position: absolute;
            top: 0;
            right: 0;
            left: 0;
            z-index: 1;
            height: calc(1.5em + 0.75rem + 2px);
            padding: 0.375rem 0.75rem;
            font-weight: 400;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            cursor: pointer;
        }

        /* Add these new styles */
        .loading {
            pointer-events: none;
            opacity: 0.7;
        }

        .image-input-container {
            min-height: 200px;
            border: 1px dashed #ddd;
            padding: 10px;
            margin-bottom: 15px;
        }

        #cropperImage {
            max-width: 100%;
            max-height: 500px;
        }

        .modal-dialog.modal-lg {
            max-width: 800px;
        }

        .img-container {
            height: 500px;
            width: 100%;
            overflow: hidden;
            background: #f8f9fa;
        }

        .custom-file-label.selected {
            visibility: hidden;
        }

        .image-input-container {
            position: relative;
            min-height: 200px;
            border: 1px dashed #ddd;
            padding: 10px;
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .image-preview {
            margin-bottom: 10px;
            width: 150px;
            height: 150px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .custom-file {
            position: absolute;
            bottom: 10px;
            width: 90%;
        }

        /* Add these styles to prevent UI jumping */
        body.modal-open {
            overflow: hidden;
            padding-right: 0 !important;
        }

        .modal {
            padding-right: 0 !important;
        }

        /* Fix image container styles */
        .image-input-container {
            position: relative;
            height: 200px;
            border: 1px dashed #ddd;
            padding: 10px;
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between;
        }

        .image-preview {
            position: absolute;
            top: 10px;
            max-width: 150px;
            max-height: 150px;
            margin: 0 auto;
            border-radius: 4px;
            object-fit: cover;
        }

        .custom-file {
            position: absolute;
            bottom: 10px;
            width: 90%;
        }

        /* Prevent modal from shifting content */
        .modal-backdrop {
            position: fixed;
        }

        .modal-dialog {
            margin: 1.75rem auto;
            max-width: 800px;
            pointer-events: all;
        }

        .modal-content {
            border: none;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .img-container {
            height: 400px;
            width: 100%;
            overflow: hidden;
            background: #f8f9fa;
        }
        
        .cropper-view-box,
        .cropper-face {
            border-radius: 0;
        }
        
        .modal-body.p-0 {
            padding: 0 !important;
        }
        
        .modal-content {
            border: none;
            border-radius: 8px;
            overflow: hidden;
        }
        .img-container {
        height: 400px;
        width: 100%;
        overflow: hidden;
        background: #f8f9fa;
        position: relative;
    }

    #cropperImage {
        max-width: 100%;
        max-height: 400px;
        display: block;
    }

    .modal-dialog.modal-lg {
        max-width: 800px;
        margin: 1.75rem auto;
    }

    .modal-content {
        border: none;
        border-radius: 8px;
        overflow: hidden;
    }

    .modal-body {
        padding: 0;
    }

    .cropper-container {
        width: 100%;
        height: 400px;
        position: relative;
    }

    /* Fix modal positioning and prevent shaking */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: hidden;
    }

    .modal-open {
        overflow: hidden;
        padding-right: 0 !important;
    }

    .modal-backdrop {
        position: fixed;
        z-index: 1040;
    }

    /* Ensure cropper stays stable */
    .cropper-crop-box,
    .cropper-view-box {
        outline: 1px solid #39f;
        outline-color: rgba(51, 153, 255, 0.75);
    }

    /* Replace existing modal and cropper styles with these */
    .modal {
        padding: 0 !important;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }

    .modal-dialog {
        position: fixed;
        margin: 0;
        width: 100%;
        height: 100%;
        padding: 0;
        max-width: 100%;
    }

    .modal-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 800px;
        border: none;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .modal-body {
        padding: 0;
        background: #f8f9fa;
    }

    .img-container {
        height: 500px;
        width: 100%;
        position: relative;
        background: #000;
        overflow: hidden;
    }

    #cropperImage {
        max-width: 100%;
        max-height: 100%;
    }

    .cropper-container {
        width: 100% !important;
        height: 100% !important;
    }

    .cropper-wrap-box {
        background-color: #000;
    }

    .cropper-view-box {
        outline: none;
        border: none;
    }

    .cropper-face {
        opacity: 0.1;
    }

    /* Prevent body shift */
    body.modal-open {
        overflow: hidden;
        padding-right: 0 !important;
        width: 100%;
        position: fixed;
    }

    /* New modal and cropper styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1040;
    }

    #cropperModal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050;
        width: 800px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .img-container {
        width: 100%;
        height: 400px;
        overflow: hidden;
        background: #000;
    }

    #cropperImage {
        display: block;
        max-width: 100%;
    }

    .cropper-container {
        position: relative !important;
    }

    /* Lock body when modal is open */
    body.modal-open {
        position: fixed;
        width: 100%;
        height: 100%;
    }

    /* Simplified image styles */
    .image-input-container {
        position: relative;
        height: 200px;
        border: 1px dashed #ddd;
        padding: 10px;
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .image-preview {
        max-width: 150px;
        max-height: 150px;
        margin: 10px auto;
        display: none;
        border-radius: 4px;
        object-fit: cover;
    }

    .custom-file {
        position: absolute;
        bottom: 10px;
        width: 90%;
    }

    .thumbnails-container {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
        min-height: 100px;
        flex-wrap: wrap;
    }

    .thumbnail {
        position: relative;
        width: 100px;
        height: 100px;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 4px;
    }

    .remove-icon {
        position: absolute;
        top: -5px;
        right: -5px;
        background: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        text-align: center;
        line-height: 20px;
        cursor: pointer;
        box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    }
    </style>
</head>
<body>
    <%- include("../../views/partials/admin/header") %>
    
    <!-- Main Content -->
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <!-- Assuming brands come from server -->
                                    <% for(let i=0; i < (brand || []).length; i++) { %>
                                        <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                    <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select border" name="category">
                                    <!-- Assuming categories come from server -->
                                    <% for(let i=0; i < (cat || []).length; i++) { %>
                                        <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>

                                <div class="card-body">
                                    <div class="thumbnails-container" id="addedImagesContainer"></div>
                                    <div class="row">
                                        <% for(let i = 1; i <= 4; i++) { %>
                                        <div class="col-md-3">
                                            <div class="image-input-container">
                                                <img class="image-preview" id="imgView<%= i %>">
                                                <div class="custom-file">
                                                    <input class="custom-file-input" type="file" 
                                                           name="images" 
                                                           id="imageFile<%= i %>"
                                                           accept="image/png, image/jpeg, image/jpg"
                                                           onchange="handleImageSelect(this, <%= i %>)">
                                                    <label class="custom-file-label" for="imageFile<%= i %>">Choose image</label>
                                                </div>
                                            </div>
                                        </div>
                                        <% } %>
                                    </div>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>

                            <button class="btn btn-md rounded font-sm hover-up btn-primary" type="button" onclick="validateAndSubmit()">Publish</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <%- include("../../views/partials/admin/footer") %>

    <!-- Required Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Custom Script -->
    <script>
    class ImageManager {
        constructor() {
            this.selectedImages = [];
            this.init();
        }

        init() {
            for (let i = 1; i <= 4; i++) {
                const fileInput = document.getElementById(`imageFile${i}`);
                if (fileInput) {
                    fileInput.addEventListener('change', (e) => this.handleImageSelect(e, i));
                }
            }
        }

        handleImageSelect(event, index) {
            const file = event.target.files[0];
            if (!file) return;

            if (!file.type.match('image.*')) {
                Swal.fire('Error', 'Please select an image file', 'error');
                this.clearInput(index);
                return;
            }

            if (file.size > 5 * 1024 * 1024) {
                Swal.fire('Error', 'File size should not exceed 5MB', 'error');
                this.clearInput(index);
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.getElementById(`imgView${index}`);
                preview.src = e.target.result;
                preview.style.display = 'block';
                
                const label = event.target.nextElementSibling;
                label.textContent = file.name;
                
                this.addThumbnail(file, index, e.target.result);
            };
            reader.readAsDataURL(file);
        }

        clearInput(index) {
            const input = document.getElementById(`imageFile${index}`);
            input.value = '';
            const preview = document.getElementById(`imgView${index}`);
            preview.style.display = 'none';
            const label = input.nextElementSibling;
            label.textContent = 'Choose image';
        }

        addThumbnail(file, index, blobUrl) {
            const container = document.getElementById('addedImagesContainer');
            this.removeExistingThumbnail(index);
            
            const thumbnail = document.createElement('div');
            thumbnail.classList.add('thumbnail');
            thumbnail.setAttribute('data-index', index);
            
            const img = document.createElement('img');
            img.src = blobUrl;
            
            const removeIcon = document.createElement('span');
            removeIcon.classList.add('remove-icon');
            removeIcon.innerHTML = '×';
            removeIcon.onclick = () => this.removeThumbnail(index, thumbnail);
            
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            container.appendChild(thumbnail);
            
            this.selectedImages.push({ file, index, blobUrl });
        }

        getImageCount() {
            return document.querySelectorAll('.custom-file-input').length;
        }

        static async submit() {
            if (!this.validate()) {
                Swal.fire('Error', 'Please fix all validation errors', 'error');
                return;
            }

            try {
                const form = document.getElementById('productForm');
                const formData = new FormData(form);
                
                Swal.fire({
                    title: 'Submitting...',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                const response = await fetch('/admin/addProducts', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (response.ok && data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Product added successfully',
                    }).then(() => window.location.href = '/admin/products');
                } else {
                    throw new Error(data.message || 'Failed to add product');
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }
    }

    class FormValidator {
        static validate() {
            this.clearErrors();
            const form = document.getElementById('productForm');
            const imageManager = window.imageManager;
            let isValid = true;

            const validations = [
                { field: 'productName', errorId: 'productName-error', message: 'Please enter a product name', check: v => v.trim() === '' },
                { field: 'description', errorId: 'description-error', message: 'Please enter a product description', check: v => v.trim() === '' },
                { field: 'regularPrice', errorId: 'regularPrice-error', message: 'Please enter a valid price', check: v => !v || isNaN(v) || Number(v) < 0 },
                { field: 'quantity', errorId: 'quantity-error', message: 'Please enter a valid quantity', check: v => !v || isNaN(v) || Number(v) < 0 },
                { field: 'color', errorId: 'color-error', message: 'Please enter a color', check: v => v.trim() === '' }
            ];

            validations.forEach(val => {
                const value = form.elements[val.field].value;
                if (val.check(value)) {
                    this.displayError(val.errorId, val.message);
                    isValid = false;
                }
            });

            const regularPrice = Number(form.elements['regularPrice'].value);
            const salePrice = form.elements['salePrice'].value;
            if (salePrice) {
                if (isNaN(salePrice) || Number(salePrice) < 0) {
                    this.displayError('salePrice-error', 'Please enter a valid sale price');
                    isValid = false;
                } else if (Number(salePrice) >= regularPrice) {
                    this.displayError('salePrice-error', 'Sale price must be less than regular price');
                    isValid = false;
                }
            }

            if (imageManager.getImageCount() === 0) {
                this.displayError('images-error', 'Please upload at least one image');
                isValid = false;
            }

            return isValid;
        }

        static async submit() {
            if (!this.validate()) {
                Swal.fire('Error', 'Please fix all validation errors', 'error');
                return;
            }

            Swal.fire({ title: 'Submitting...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
            
            try {
                const form = document.getElementById('productForm');
                const response = await fetch('/admin/addProducts', {
                    method: 'POST',
                    body: new FormData(form)
                });
                const data = await response.json();

                if (response.ok && data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Product added successfully',
                    }).then(() => window.location.href = '/admin/products');
                } else {
                    throw new Error(data.message || 'Failed to add product');
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }

        static displayError(id, message) {
            document.getElementById(id).textContent = message;
        }

        static clearErrors() {
            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Initialize image manager
        window.imageManager = new ImageManager();
        
        // Initialize cropper when modal is shown
        $('#cropperModal').on('shown.bs.modal', function () {
            window.imageManager.initCropper();
        });
    });

    function validateAndSubmit() {
        FormValidator.submit();
    }
    </script>
</body>
</html>