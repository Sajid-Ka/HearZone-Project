<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin Panel</title>
    
    <!-- Required CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    
    <!-- Custom Styles -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f1f4f8;
        }

        .content-main {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: none;
        }

        .error-message {
            color: red;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            padding: 10px;
            gap: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 15px;
            min-height: 80px;
        }

        .thumbnail {
            position: relative;
            flex-shrink: 0;
        }

        .thumbnail img {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: white;
            border-radius: 50%;
            width: 15px;
            height: 15px;
            line-height: 15px;
            text-align: center;
            cursor: pointer;
            font-weight: bold;
            color: red;
        }

        .image-preview {
            max-width: 150px;
            max-height: 150px;
            margin-bottom: 10px;
            display: none;
            border-radius: 4px;
        }

        .hover-up:hover {
            transform: translateY(-2px);
            transition: all 0.2s ease;
        }

        .img-container {
            max-height: 400px;
            overflow: hidden;
        }

        .cropper-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
        }
        
        /* Added styles for image input container */
        .image-input-container {
            position: relative;
            margin-bottom: 20px;
        }
        
        /* Input file customize */
        .custom-file-input {
            position: relative;
            z-index: 2;
            width: 100%;
            height: calc(1.5em + 0.75rem + 2px);
            margin: 0;
            opacity: 0;
        }
        
        .custom-file-label {
            position: absolute;
            top: 0;
            right: 0;
            left: 0;
            z-index: 1;
            height: calc(1.5em + 0.75rem + 2px);
            padding: 0.375rem 0.75rem;
            font-weight: 400;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <%- include("../../views/partials/admin/header") %>
    
    <!-- Main Content -->
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data" id="productForm">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <!-- Assuming brands come from server -->
                                    <% for(let i=0; i < (brand || []).length; i++) { %>
                                        <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                    <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select border" name="category">
                                    <!-- Assuming categories come from server -->
                                    <% for(let i=0; i < (cat || []).length; i++) { %>
                                        <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>

                                <!-- Cropper Modal -->
                                <div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-hidden="true">
                                    <div class="modal-dialog modal-lg">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title">Crop Image</h5>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">Ã—</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <div class="img-container">
                                                    <img id="cropperImage" src="" style="max-width: 100%;">
                                                </div>
                                                <div class="cropper-controls mt-3">
                                                    <button type="button" class="btn btn-sm btn-secondary" id="rotateLeft">Rotate Left</button>
                                                    <button type="button" class="btn btn-sm btn-secondary" id="rotateRight">Rotate Right</button>
                                                    <button type="button" class="btn btn-sm btn-secondary" id="zoomIn">Zoom In</button>
                                                    <button type="button" class="btn btn-sm btn-secondary" id="zoomOut">Zoom Out</button>
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                                <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="card-body">
                                    <div class="thumbnails-container" id="addedImagesContainer"></div>
                                    <div class="row">
                                        <div class="col-md-3 image-input-container" id="imageInput1">
                                            <img class="image-preview" id="imgView1">
                                            <div class="custom-file">
                                                <input class="custom-file-input" type="file" name="images" id="imageFile1" accept="image/png, image/jpeg, image/jpg">
                                                <label class="custom-file-label" for="imageFile1">Choose image</label>
                                            </div>
                                        </div>
                                        <div class="col-md-3 image-input-container" id="imageInput2">
                                            <img class="image-preview" id="imgView2">
                                            <div class="custom-file">
                                                <input class="custom-file-input" type="file" name="images" id="imageFile2" accept="image/png, image/jpeg, image/jpg">
                                                <label class="custom-file-label" for="imageFile2">Choose image</label>
                                            </div>
                                        </div>
                                        <div class="col-md-3 image-input-container" id="imageInput3">
                                            <img class="image-preview" id="imgView3">
                                            <div class="custom-file">
                                                <input class="custom-file-input" type="file" name="images" id="imageFile3" accept="image/png, image/jpeg, image/jpg">
                                                <label class="custom-file-label" for="imageFile3">Choose image</label>
                                            </div>
                                        </div>
                                        <div class="col-md-3 image-input-container" id="imageInput4">
                                            <img class="image-preview" id="imgView4">
                                            <div class="custom-file">
                                                <input class="custom-file-input" type="file" name="images" id="imageFile4" accept="image/png, image/jpeg, image/jpg">
                                                <label class="custom-file-label" for="imageFile4">Choose image</label>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>

                            <button class="btn btn-md rounded font-sm hover-up btn-primary" type="button" onclick="validateAndSubmit()">Publish</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <%- include("../../views/partials/admin/footer") %>

    <!-- Required Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Custom Script -->
    <script>
    class ImageManager {
        constructor() {
            this.cropper = null;
            this.currentInput = null;
            this.currentPreview = null;
            this.currentIndex = null;
            this.selectedImages = [];
            this.init();
        }

        init() {
            this.setupEventListeners();
        }

        setupEventListeners() {
            // Set up file input change listeners
            for (let i = 1; i <= 4; i++) {
                const fileInput = document.getElementById(`imageFile${i}`);
                if (fileInput) {
                    fileInput.addEventListener('change', (e) => this.handleImageSelect(e, i));
                }
            }

            // Set up cropper control buttons
            document.getElementById('cropButton').addEventListener('click', () => this.saveCroppedImage());
            document.getElementById('rotateLeft').addEventListener('click', () => {
                if (this.cropper) this.cropper.rotate(-90);
            });
            document.getElementById('rotateRight').addEventListener('click', () => {
                if (this.cropper) this.cropper.rotate(90);
            });
            document.getElementById('zoomIn').addEventListener('click', () => {
                if (this.cropper) this.cropper.zoom(0.1);
            });
            document.getElementById('zoomOut').addEventListener('click', () => {
                if (this.cropper) this.cropper.zoom(-0.1);
            });

            // Handle modal close
            $('#cropperModal').on('hidden.bs.modal', () => this.destroyCropper());
            
            // Update file input labels when files are selected
            $('.custom-file-input').on('change', function() {
                const fileName = $(this).val().split('\\').pop();
                $(this).next('.custom-file-label').html(fileName || 'Choose image');
            });
        }

        handleImageSelect(event, index) {
            const input = event.target;
            const file = input.files[0];
            
            if (!file) return;
            
            // Store current context
            this.currentInput = input;
            this.currentPreview = document.getElementById(`imgView${index}`);
            this.currentIndex = index;
            
            // Read the file
            const reader = new FileReader();
            reader.onload = (e) => {
                // Set image source for cropper and preview
                const cropperImage = document.getElementById('cropperImage');
                cropperImage.src = e.target.result;
                
                // Show the cropper modal
                $('#cropperModal').modal('show');
            };
            reader.readAsDataURL(file);
        }

        initCropper() {
            const image = document.getElementById('cropperImage');
            
            if (this.cropper) {
                this.cropper.destroy();
            }
            
            // Initialize the cropper with options
            this.cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 0.8,
                responsive: true,
                zoomable: true,
                rotatable: true,
                scalable: true,
                background: true,
                guides: true,
                minCropBoxWidth: 100,
                minCropBoxHeight: 100,
                ready: function() {
                    // The cropper is ready
                    console.log('Cropper initialized successfully');
                }
            });
        }

        saveCroppedImage() {
            if (!this.cropper) {
                console.error('Cropper not initialized');
                return;
            }

            // Get the cropped canvas
            this.cropper.getCroppedCanvas({
                width: 600,
                height: 600,
                imageSmoothingQuality: 'high'
            }).toBlob((blob) => {
                // Create a new file from the blob
                const fileName = `cropped_${Date.now()}.png`;
                const file = new File([blob], fileName, { type: 'image/png' });
                
                // Create a new FileList-like object
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                
                // Update the file input with the new cropped file
                this.currentInput.files = dataTransfer.files;
                
                // Update preview image
                this.currentPreview.src = URL.createObjectURL(blob);
                this.currentPreview.style.display = 'block';
                
                // Update label
                $(this.currentInput).next('.custom-file-label').html(fileName);
                
                // Add to thumbnails
                this.addThumbnail(file, this.currentIndex);
                
                // Close modal
                $('#cropperModal').modal('hide');
            }, 'image/png', 0.95);
        }

        addThumbnail(file, index) {
            const container = document.getElementById('addedImagesContainer');
            
            // Check if thumbnail for this index already exists and remove it
            const existingThumbnail = document.querySelector(`.thumbnail[data-index="${index}"]`);
            if (existingThumbnail) {
                existingThumbnail.remove();
                
                // Remove from selected images array if exists
                this.selectedImages = this.selectedImages.filter(img => img.index !== index);
            }
            
            // Create new thumbnail
            const thumbnail = document.createElement('div');
            thumbnail.classList.add('thumbnail');
            thumbnail.setAttribute('data-index', index);
            
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            
            const removeIcon = document.createElement('span');
            removeIcon.classList.add('remove-icon');
            removeIcon.innerHTML = 'Ã—';
            removeIcon.onclick = () => {
                // Remove from selected images
                this.selectedImages = this.selectedImages.filter(img => img.index !== index);
                
                // Remove thumbnail
                thumbnail.remove();
                
                // Clear file input
                const input = document.getElementById(`imageFile${index}`);
                input.value = '';
                $(input).next('.custom-file-label').html('Choose image');
                
                // Hide preview
                const preview = document.getElementById(`imgView${index}`);
                preview.style.display = 'none';
            };
            
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            container.appendChild(thumbnail);
            
            // Add to selected images with index
            this.selectedImages.push({ file, index });
        }

        destroyCropper() {
            if (this.cropper) {
                this.cropper.destroy();
                this.cropper = null;
            }
        }

        getImageCount() {
            return this.selectedImages.length;
        }
    }

    class FormValidator {
        static validate() {
            this.clearErrors();
            const form = document.getElementById('productForm');
            const imageManager = window.imageManager;
            let isValid = true;

            const validations = [
                { field: 'productName', errorId: 'productName-error', message: 'Please enter a product name', check: v => v.trim() === '' },
                { field: 'description', errorId: 'description-error', message: 'Please enter a product description', check: v => v.trim() === '' },
                { field: 'regularPrice', errorId: 'regularPrice-error', message: 'Please enter a valid price', check: v => !v || isNaN(v) || Number(v) < 0 },
                { field: 'quantity', errorId: 'quantity-error', message: 'Please enter a valid quantity', check: v => !v || isNaN(v) || Number(v) < 0 },
                { field: 'color', errorId: 'color-error', message: 'Please enter a color', check: v => v.trim() === '' }
            ];

            validations.forEach(val => {
                const value = form.elements[val.field].value;
                if (val.check(value)) {
                    this.displayError(val.errorId, val.message);
                    isValid = false;
                }
            });

            const regularPrice = Number(form.elements['regularPrice'].value);
            const salePrice = form.elements['salePrice'].value;
            if (salePrice) {
                if (isNaN(salePrice) || Number(salePrice) < 0) {
                    this.displayError('salePrice-error', 'Please enter a valid sale price');
                    isValid = false;
                } else if (Number(salePrice) >= regularPrice) {
                    this.displayError('salePrice-error', 'Sale price must be less than regular price');
                    isValid = false;
                }
            }

            if (imageManager.getImageCount() === 0) {
                this.displayError('images-error', 'Please upload at least one image');
                isValid = false;
            }

            return isValid;
        }

        static async submit() {
            if (!this.validate()) {
                Swal.fire('Error', 'Please fix all validation errors', 'error');
                return;
            }

            Swal.fire({ title: 'Submitting...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
            
            try {
                const form = document.getElementById('productForm');
                const response = await fetch('/admin/addProducts', {
                    method: 'POST',
                    body: new FormData(form)
                });
                const data = await response.json();

                if (response.ok && data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: data.message || 'Product added successfully',
                    }).then(() => window.location.href = '/admin/products');
                } else {
                    throw new Error(data.message || 'Failed to add product');
                }
            } catch (error) {
                Swal.fire('Error', error.message, 'error');
            }
        }

        static displayError(id, message) {
            document.getElementById(id).textContent = message;
        }

        static clearErrors() {
            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        // Initialize image manager
        window.imageManager = new ImageManager();
        
        // Initialize cropper when modal is shown
        $('#cropperModal').on('shown.bs.modal', function () {
            window.imageManager.initCropper();
        });
    });

    function validateAndSubmit() {
        FormValidator.submit();
    }
    </script>
</body>
</html>