<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin Panel</title>
    
    <!-- Required CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
    
    <!-- Custom Styles -->
    <style>
        body {
            font-family: Arial, sans-serif;
            background: #f1f4f8;
        }

        .content-main {
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .card {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            border: none;
        }

        .error-message {
            color: red;
            font-size: 0.9em;
            margin-top: 5px;
        }

        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            padding: 10px;
            gap: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            margin-bottom: 15px;
            min-height: 100px;
            align-items: center;
        }

        .thumbnail {
            position: relative;
            flex-shrink: 0;
        }

        .thumbnail img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid #ddd;
        }

        .remove-icon {
            position: absolute;
            top: -5px;
            right: -5px;
            background: white;
            border-radius: 50%;
            width: 15px;
            height: 15px;
            line-height: 15px;
            text-align: center;
            cursor: pointer;
            font-weight: bold;
            color: red;
        }

        .image-preview {
            max-width: 150px;
            max-height: 150px;
            margin-bottom: 10px;
            display: none;
            border-radius: 4px;
            width: 150px;
            height: 150px;
            object-fit: cover;
            border: 1px solid #ddd;
        }

        .hover-up:hover {
            transform: translateY(-2px);
            transition: all 0.2s ease;
        }
        
        /* Image input container */
        .image-input-container {
            position: relative;
            height: 220px; /* Increased height to accommodate the crop button */
            border: 1px dashed #ddd;
            padding: 10px;
            margin-bottom: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        /* Better positioning for the crop button */
        #cropBtn1, #cropBtn2, #cropBtn3, #cropBtn4 {
            position: absolute;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 10;
        }
        
        /* Input file customize */
        .custom-file-input {
            position: relative;
            z-index: 2;
            width: 100%;
            height: calc(1.5em + 0.75rem + 2px);
            margin: 0;
            opacity: 0;
        }
        
        .custom-file-label {
            position: absolute;
            top: 0;
            right: 0;
            left: 0;
            z-index: 1;
            height: calc(1.5em + 0.75rem + 2px);
            padding: 0.375rem 0.75rem;
            font-weight: 400;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            cursor: pointer;
        }

        /* Image preview and file input positioning */
        .image-preview {
            max-width: 150px;
            max-height: 150px;
            margin: 10px auto;
            display: none;
            border-radius: 4px;
            object-fit: cover;
        }

        .custom-file {
            position: absolute;
            bottom: 10px;
            width: 90%;
            z-index: 5;
        }
        
        /* Cropper modal styles */
        #cropperModal .modal-dialog {
            max-width: 800px;
        }

        .modal-content {
            position: relative;
        }
        
        .img-container {
            height: 400px;
            width: 100%;
            padding: 20px;  /* Add padding */
            background: #f8f9fa;
        }
        
        .cropper-container {
            width: 100% !important;
            height: 100% !important;
        }

        .modal-backdrop {
            opacity: 0.5 !important;
        }

        .modal-footer {
            justify-content: space-between;
            padding: 15px;
        }
                
        .cropper-view-box,
        .cropper-face {
            border-radius: 0;
        }
        
        .cropper-controls {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            width: 100%;
        }

        #cropperImage {
            max-height: 100%;
            max-width: 100%;
            display: block;
        }

        #cropBtn {
            background-color: #007bff;
            color: white;
            font-weight: bold;
        }
        
        /* Prevent modal from shifting content */
        body.modal-open {
            overflow: hidden;
            padding-right: 0 !important;
        }
        
        .modal-backdrop {
            position: fixed;
        }
    </style>
</head>
<body>
    <%- include("../../views/partials/admin/header") %>
    
    <!-- Main Content -->
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" enctype="multipart/form-data" id="productForm">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <!-- Assuming brands come from server -->
                                    <% for(let i=0; i < (brand || []).length; i++) { %>
                                        <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                    <% } %>
                                </select>
                                <div id="brand-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>


                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale price</label>
                                        <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select border" name="category">
                                    <!-- Assuming categories come from server -->
                                    <% for(let i=0; i < (cat || []).length; i++) { %>
                                        <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>


                            <div class="mb-4">
                                <label class="form-label">Product Specifications (One per line)</label>
                                <textarea placeholder="Enter each specification on a new line" name="specifications" class="form-control border" rows="4"></textarea>
                                <div id="specifications-error" class="-error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Product Highlights (One per line)</label>
                                <textarea placeholder="Enter each highlight on a new line" name="highlights" class="form-control border" rows="4"></textarea>
                                <div id="highlights-error" class="error-message"></div>
                            </div>


                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4>Product Images</h4>
                                </div>

                                <div class="card-body">
                                    <div class="thumbnails-container" id="addedImagesContainer"></div>
                                    <div class="row">
                                        <% for(let i = 1; i <= 4; i++) { %>
                                        <div class="col-md-3">
                                            <div class="image-input-container">
                                                <img class="image-preview" id="imgView<%= i %>">
                                                <div class="custom-file mt-2">
                                                    <input class="custom-file-input" type="file" 
                                                        name="images" 
                                                        id="imageFile<%= i %>"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="handleImageSelect(this, <%= i %>)">
                                                    <label class="custom-file-label" for="imageFile<%= i %>">Choose image</label>
                                                </div>
                                                <!-- Add crop button -->
                                                <button type="button" id="cropBtn<%= i %>" class="btn btn-sm btn-outline-primary mt-2" style="display:none;" onclick="openCropModal(<%= i %>)">
                                                    Crop Image
                                                </button>
                                            </div>
                                        </div>
                                        <% } %>
                                    </div>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>

                            <button class="btn btn-md rounded font-sm hover-up btn-primary" type="button" onclick="validateAndSubmit()">Publish</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    
   <!-- Cropper Modal -->
   <div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body p-0">
                <div class="img-container">
                    <img id="cropperImage" src="" alt="Image to crop">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropBtn">Crop & Save</button>
            </div>
        </div>
    </div>
</div>

    <%- include("../../views/partials/admin/footer") %>

    <!-- Required Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.js" integrity="sha512-lR8d1BXfYQuiqoM/LeGFVtxFyspzWFTZNyYIiE5O2CcAGtTCRRUMLloxATRuLz8EmR2fYqdXYlrGh+D6TVGp3g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


    <!-- Custom Script -->
    <script>
class ImageManager {
    constructor() {
        this.selectedImages = [];
        this.cropper = null;
        this.currentImageIndex = null;
        this.init();
    }

    init() {
        // Initialize cropper modal handlers
        document.getElementById('cropBtn').addEventListener('click', () => this.cropImage());
        
        // Clear cropper instance when modal is hidden
        $('#cropperModal').on('hidden.bs.modal', () => {
                    if (this.cropper) {
                        this.cropper.destroy();
                        this.cropper = null;
                    }
                });

                // Initialize cropper when modal is shown
                $('#cropperModal').on('shown.bs.modal', () => {
            const image = document.getElementById('cropperImage');
            
            // Ensure we destroy any existing cropper before creating a new one
            if (this.cropper) {
                this.cropper.destroy();
            }
            
            // Wait a brief moment for the image to fully render
            setTimeout(() => {
                // Initialize new cropper
                this.cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,  // Changed to viewMode 1
                    zoomable: true,
                    scalable: true,
                    rotatable: true,
                    movable: true,
                    dragMode: 'move',
                    autoCropArea: 0.9,  // Increased auto crop area
                    responsive: true,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: true,
                    minContainerWidth: 200,
                    minContainerHeight: 200
                });
            }, 300);
        });

        // Ensure modal close buttons work
        $('.close, .btn-secondary').on('click', () => {
            $('#cropperModal').modal('hide');
        });
    }

    handleImageSelect(input, index) {
        const file = input.files[0];
        if (!file) return;

        if (!file.type.match('image.*')) {
            Swal.fire('Error', 'Please select an image file', 'error');
            this.clearInput(index);
            return;
        }

        if (file.size > 5 * 1024 * 1024) {
            Swal.fire('Error', 'File size should not exceed 5MB', 'error');
            this.clearInput(index);
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            const preview = document.getElementById(`imgView${index}`);
            preview.src = e.target.result;
            preview.style.display = 'block';

            const label = input.nextElementSibling;
            label.textContent = file.name;

            const cropBtn = document.getElementById(`cropBtn${index}`);
            cropBtn.style.display = 'inline-block';

            this.addThumbnail(file, index, e.target.result);

            // Ensure name attribute is set
            input.name = 'images';
            console.log(`File selected for input ${index}:`, {
                name: file.name,
                size: file.size,
                fieldName: input.name
            });
        };
        reader.readAsDataURL(file);
    }

    openCropModal(index) {
        this.currentImageIndex = index;
        const imagePreview = document.getElementById(`imgView${index}`);
        const cropperImage = document.getElementById('cropperImage');
        
        // Reset cropper if it exists
        if (this.cropper) {
            this.cropper.destroy();
            this.cropper = null;
        }
        
        // Set source and show modal
        cropperImage.src = imagePreview.src;
        
        // Show modal after a short delay to ensure image is loaded
        setTimeout(() => {
            $('#cropperModal').modal('show');
        }, 100);
    }

    cropImage() {
        if (!this.cropper) {
            console.error('Cropper not initialized');
            return;
        }

        try {
            const canvas = this.cropper.getCroppedCanvas({
                width: 600,
                height: 600,
                fillColor: '#fff',
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high'
            });

            if (!canvas) {
                console.error('Failed to create cropped canvas');
                return;
            }

            canvas.toBlob((blob) => {
                if (!blob) {
                    console.error('Failed to create blob from canvas');
                    return;
                }

                const index = this.currentImageIndex;
                const file = new File([blob], `cropped_image_${index}.jpg`, { type: 'image/jpeg' });
                console.log('Cropped file created:', {
                    name: file.name,
                    size: file.size,
                    type: file.type
                });

                this.updateFileInput(index, file);

                const preview = document.getElementById(`imgView${index}`);
                const blobUrl = URL.createObjectURL(blob);
                preview.src = blobUrl;

                this.updateThumbnail(index, blobUrl);

                $('#cropperModal').modal('hide');
            }, 'image/jpeg', 0.9);
        } catch (error) {
            console.error('Error cropping image:', error);
            Swal.fire('Error', 'Failed to crop image. Please try again.', 'error');
        }
    }


    updateFileInput(index, file) {
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);

        const fileInput = document.getElementById(`imageFile${index}`);
        fileInput.files = dataTransfer.files;
        fileInput.name = 'images'; // Explicitly set name to "images"

        // Update the label
        const label = fileInput.nextElementSibling;
        label.textContent = file.name;

        // Log for debugging
        console.log(`Updated file input ${index}:`, {
            name: file.name,
            size: file.size,
            type: file.type,
            fieldName: fileInput.name
        });
    }

    updateThumbnail(index, blobUrl) {
        // Find existing thumbnail for this index
        const existingThumbnail = document.querySelector(`.thumbnail[data-index="${index}"]`);
        if (existingThumbnail) {
            const img = existingThumbnail.querySelector('img');
            img.src = blobUrl;
        } else {
            this.addThumbnail({ name: `cropped_image_${index}.jpg` }, index, blobUrl);
        }
    }

    clearInput(index) {
        const input = document.getElementById(`imageFile${index}`);
        input.value = '';
        const preview = document.getElementById(`imgView${index}`);
        preview.style.display = 'none';
        const label = input.nextElementSibling;
        label.textContent = 'Choose image';
        const cropBtn = document.getElementById(`cropBtn${index}`);
        cropBtn.style.display = 'none';
        this.removeExistingThumbnail(index);
    }

    addThumbnail(file, index, blobUrl) {
        const container = document.getElementById('addedImagesContainer');
        
        // First remove existing thumbnail for this index if it exists
        this.removeExistingThumbnail(index);
        
        // Create new thumbnail element
        const thumbnail = document.createElement('div');
        thumbnail.classList.add('thumbnail');
        thumbnail.setAttribute('data-index', index);
        
        const img = document.createElement('img');
        img.src = blobUrl;
        
        const removeIcon = document.createElement('span');
        removeIcon.classList.add('remove-icon');
        removeIcon.innerHTML = '×';
        removeIcon.onclick = (e) => {
            e.stopPropagation(); // Prevent event bubbling
            this.removeThumbnail(index);
        };
        
        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        container.appendChild(thumbnail);
        
        // Update the stored images array
        const imageInfo = { file, index, blobUrl };
        const existingIndex = this.selectedImages.findIndex(img => img.index === index);
        
        if (existingIndex !== -1) {
            this.selectedImages[existingIndex] = imageInfo;
        } else {
            this.selectedImages.push(imageInfo);
        }
    }

    removeThumbnail(index) {
        // Remove the thumbnail element
        this.removeExistingThumbnail(index);
        
        // Clear the file input
        this.clearInput(index);
        
        // Remove from selected images array
        this.selectedImages = this.selectedImages.filter(img => img.index !== index);
    }

    removeExistingThumbnail(index) {
        const existingThumbnail = document.querySelector(`.thumbnail[data-index="${index}"]`);
        if (existingThumbnail) {
            existingThumbnail.remove();
        }
    }

    getImageCount() {
        return this.selectedImages.length;
    }
}


class FormValidator {
    static async validate() {
        this.clearErrors();
        const form = document.getElementById('productForm');
        const imageManager = window.imageManager;
        let isValid = true;

        // Define validations for all form fields
        const validations = [
            { field: 'productName', errorId: 'productName-error', message: 'Please enter a product name', check: v => v.trim() === '' },
            { field: 'brand', errorId: 'brand-error', message: 'Please select a brand', check: v => v.trim() === '' || v === 'undefined' },
            { field: 'description', errorId: 'description-error', message: 'Please enter a product description', check: v => v.trim() === '' },
            { field: 'regularPrice', errorId: 'regularPrice-error', message: 'Please enter a valid price', check: v => !v || isNaN(v) || Number(v) <= 0 },
            { field: 'salePrice', errorId: 'salePrice-error', message: 'Please enter a valid sale price (or leave blank)', check: v => v && (isNaN(v) || Number(v) < 0), optional: true },
            { field: 'quantity', errorId: 'quantity-error', message: 'Please enter a valid quantity', check: v => !v || isNaN(v) || Number(v) < 0 },
            { field: 'color', errorId: 'color-error', message: 'Please enter a color', check: v => v.trim() === '' },
            { field: 'category', errorId: 'category-error', message: 'Please select a category', check: v => v.trim() === '' || v === 'undefined' },
            { field: 'specifications', errorId: 'specifications-error', message: 'Please add at least one specification', check: v => v.trim() === '' },
            { field: 'highlights', errorId: 'highlights-error', message: 'Please add at least one highlight', check: v => v.trim() === '' }
        ];

        // Validate all fields
        for (const val of validations) {
            const value = form.elements[val.field].value;
            if (!val.optional && val.check(value)) {
                this.displayError(val.errorId, val.message);
                isValid = false;
            }
        }

        // Check product name uniqueness
        if (isValid) {
            const productName = form.elements['productName'].value;
            try {
                console.log('Checking product name:', productName);
                const response = await fetch(`/admin/checkProductName?name=${encodeURIComponent(productName)}`, {
                    headers: { 'Accept': 'application/json' }
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Check product name response:', data);
                if (data.exists) {
                    this.displayError('productName-error', 'This product name already exists');
                    isValid = false;
                }
            } catch (error) {
                console.error('Error checking product name:', error);
                this.displayError('productName-error', 'Error checking product name availability');
                isValid = false;
            }
        }

        // Validate price relationship
        const regularPrice = Number(form.elements['regularPrice'].value);
        const salePrice = form.elements['salePrice'].value;
        if (salePrice) {
            if (isNaN(salePrice) || Number(salePrice) < 0) {
                this.displayError('salePrice-error', 'Please enter a valid sale price');
                isValid = false;
            } else if (Number(salePrice) >= regularPrice) {
                this.displayError('salePrice-error', 'Sale price must be less than regular price');
                isValid = false;
            }
        }

        // Validate images
        if (imageManager.getImageCount() < 3) {
            this.displayError('images-error', 'Please upload at least Three image');
            isValid = false;
        }

        // Validate highlights (ensure at least one non-empty line)
        const highlights = form.elements['highlights'].value.trim();
        if (!highlights) {
            this.displayError('highlights-error', 'Please add at least one highlight');
            isValid = false;
        } else {
            const highlightLines = highlights.split('\n').map(h => h.trim()).filter(h => h.length > 0);
            if (highlightLines.length === 0) {
                this.displayError('highlights-error', 'Please add at least one valid highlight');
                isValid = false;
            }
        }

        // Validate specifications (ensure at least one non-empty line)
        const specifications = form.elements['specifications'].value.trim();
        if (!specifications) {
            this.displayError('specifications-error', 'Please add at least one specification');
            isValid = false;
        } else {
            const specLines = specifications.split('\n').map(s => s.trim()).filter(s => s.length > 0);
            if (specLines.length === 0) {
                this.displayError('specifications-error', 'Please add at least one valid specification');
                isValid = false;
            }
        }


        return isValid;
    }

    static async submit() {
        const isValid = await this.validate();
        if (!isValid) {
            Swal.fire('Error', 'Please fix all validation errors', 'error');
            return;
        }

        const form = document.getElementById('productForm');
        const formData = new FormData(form);

        // Log FormData contents
        console.log('FormData contents:');
        for (let [key, value] of formData.entries()) {
            if (value instanceof File) {
                console.log(`${key}: File - ${value.name}, Size: ${value.size}, Type: ${value.type}`);
            } else {
                console.log(`${key}: ${value}`);
            }
        }

        Swal.fire({ title: 'Submitting...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });

        try {
            const response = await fetch('/admin/addProducts', {
                method: 'POST',
                body: formData,
                headers: { 'Accept': 'application/json' }
            });
            const text = await response.text();
            console.log('Raw server response:', text);
            const data = JSON.parse(text);

            if (response.ok && data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message || 'Product added successfully',
                }).then(() => window.location.href = '/admin/products');
            } else {
                throw new Error(data.message || 'Failed to add product');
            }
        } catch (error) {
            console.error('Submission error:', error);
            Swal.fire('Error', error.message || 'An error occurred while submitting the form', 'error');
        }
    }

        static displayError(id, message) {
            document.getElementById(id).textContent = message;
        }

        static clearErrors() {
            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        }
}

function addSpecification() {
    const container = document.querySelector('.specification-entries');
    const newEntry = document.createElement('div');
    newEntry.className = 'specification-entry d-flex mb-2';
    newEntry.innerHTML = `
        <input type="text" class="form-control border me-2" name="specKey[]" placeholder="Key (e.g., Material)">
        <input type="text" class="form-control border me-2" name="specValue[]" placeholder="Value (e.g., Aluminum)">
        <button type="button" class="btn btn-danger" onclick="removeSpecification(this)">×</button>
    `;
    container.appendChild(newEntry);
}

function removeSpecification(button) {
    button.closest('.specification-entry').remove();
}

    
   
  
document.addEventListener('DOMContentLoaded', () => {
    
    window.imageManager = new ImageManager();
    
    
    $(document).on('click', '.modal', function(e) {
            if ($(e.target).hasClass('modal')) {
                $(this).modal('hide');
            }
        });
        
        
        $('.close, .btn-secondary').on('click', function() {
            $('#cropperModal').modal('hide');
        });
    });

    
    function handleImageSelect(input, index) {
        window.imageManager.handleImageSelect(input, index);
    }

    function openCropModal(index) {
        window.imageManager.openCropModal(index);
    }

    function validateAndSubmit() {
        FormValidator.submit();
    }

</script>