<%- include('../partials/admin/header') %>


<div class="main-content">
    <div class="container-fluid">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">Pending Requests</h1>
            <div class="btn-toolbar mb-2 mb-md-0">
                <button type="button" class="btn btn-sm btn-outline-secondary" id="refreshBtn">
                    <i class="fas fa-sync-alt"></i> Refresh
                </button>
            </div>
        </div>

        <!-- Request Count Cards -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <h5 class="card-title">Cancel Requests</h5>
                        <h2 class="card-text" id="cancelRequestCount">0</h2>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h5 class="card-title">Return Requests</h5>
                        <h2 class="card-text" id="returnRequestCount">0</h2>
                    </div>
                </div>
            </div>
        </div>

        <!-- Request Tabs -->
        <ul class="nav nav-tabs mb-4" id="requestTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="cancel-tab" data-bs-toggle="tab" data-bs-target="#cancel" type="button" role="tab">Cancel Requests</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="return-tab" data-bs-toggle="tab" data-bs-target="#return" type="button" role="tab">Return Requests</button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="requestTabsContent">
            <!-- Cancel Requests -->
            <div class="tab-pane fade show active" id="cancel" role="tabpanel">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Reason</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="cancelRequestsList">
                            <!-- Cancel requests will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Return Requests -->
            <div class="tab-pane fade" id="return" role="tabpanel">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Reason</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="returnRequestsList">
                            <!-- Return requests will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to update request counts
    async function updateRequestCounts() {
        try {
            const response = await fetch('/admin/orders/request-counts');
            const data = await response.json();
            document.getElementById('cancelRequestCount').textContent = data.cancelRequests;
            document.getElementById('returnRequestCount').textContent = data.returnRequests;
        } catch (error) {
            console.error('Error updating request counts:', error);
        }
    }

    // Function to load cancel requests
    async function loadCancelRequests() {
        try {
            const response = await fetch('/admin/orders/cancel-requests');
            const requests = await response.json();
            const tbody = document.getElementById('cancelRequestsList');
            tbody.innerHTML = '';

            requests.forEach(order => {
                // Filter items with cancel requests
                const itemsWithCancelRequest = order.orderedItems.filter(item => 
                    item.cancellationStatus === 'Cancel Request'
                );

                itemsWithCancelRequest.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${order.orderId}</td>
                        <td>${order.userId.name}</td>
                        <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                        <td>
                            <strong>${item.product.productName}</strong><br>
                            <small>${item.cancellationReason || 'No reason provided'}</small>
                        </td>
                        <td>
                            <a href="/admin/orders/details/${order.orderId}" class="btn btn-primary btn-sm">
                                <i class="fas fa-eye"></i> View Order Details
                            </a>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            });
        } catch (error) {
            console.error('Error loading cancel requests:', error);
        }
    }

    // Function to load return requests
    async function loadReturnRequests() {
        try {
            const response = await fetch('/admin/orders/return-requests');
            const requests = await response.json();
            const tbody = document.getElementById('returnRequestsList');
            tbody.innerHTML = '';

            requests.forEach(order => {
                // Filter items with return requests
                const itemsWithReturnRequest = order.orderedItems.filter(item => 
                    item.returnStatus === 'Return Request'
                );

                itemsWithReturnRequest.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${order.orderId}</td>
                        <td>${order.userId.name}</td>
                        <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                        <td>
                            <strong>${item.product.productName}</strong><br>
                            <small>${item.returnReason || 'No reason provided'}</small>
                        </td>
                        <td>
                            <a href="/admin/orders/details/${order.orderId}" class="btn btn-primary btn-sm">
                                <i class="fas fa-eye"></i> View Order Details
                            </a>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            });
        } catch (error) {
            console.error('Error loading return requests:', error);
        }
    }

    // Function to handle request approval/rejection
    async function handleRequest(orderId, type, action, itemIndex) {
        try {
            const response = await fetch(`/admin/orders/${type}-item/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action, itemIndex })
            });

            if (response.ok) {
                // Refresh the lists and counts
                updateRequestCounts();
                loadCancelRequests();
                loadReturnRequests();
            } else {
                console.error('Error handling request');
            }
        } catch (error) {
            console.error('Error handling request:', error);
        }
    }

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
        updateRequestCounts();
        loadCancelRequests();
        loadReturnRequests();

        // Add refresh button handler
        document.getElementById('refreshBtn').addEventListener('click', function() {
            updateRequestCounts();
            loadCancelRequests();
            loadReturnRequests();
        });

        // Add tab change handlers
        document.getElementById('cancel-tab').addEventListener('click', loadCancelRequests);
        document.getElementById('return-tab').addEventListener('click', loadReturnRequests);

        // Update counts every 30 seconds
        setInterval(updateRequestCounts, 30000);
    });
</script>

<%- include('../partials/admin/footer') %> 