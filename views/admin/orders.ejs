<%- include('../partials/admin/header') %>

<style>
    .order-management-container {
        padding: 2rem;
        background-color: #f8fafc;
        min-height: calc(100vh - 120px);
    }
    
    .filter-section {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid #e2e8f0;
    }
    
    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin-bottom: 1rem;
    }
    
    .filter-group {
        flex: 1;
        min-width: 220px;
    }
    
    .filter-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #4a5568;
        font-size: 0.875rem;
    }
    
    .filter-group .form-control,
    .filter-group .form-select {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        background-color: #fff;
        transition: border-color 0.2s, box-shadow 0.2s;
        font-size: 0.875rem;
    }
    
    .filter-group .form-control:focus,
    .filter-group .form-select:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
        outline: none;
    }
    
    .clear-filters {
        margin-top: 1rem;
    }
    
    .order-card {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.05);
    }
    
    .order-card:hover {
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        transform: translateY(-2px);
        border-color: #cbd5e0;
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid #edf2f7;
    }
    
    .order-id {
        font-weight: 600;
        color: #2d3748;
        font-size: 1.125rem;
    }
    
    .order-status {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .status-pending { background: #fff3cd; color: #856404; }
    .status-shipped { background: #d4edda; color: #155724; }
    .status-delivered { background: #28a745; color: #fff; }
    .status-cancelled { background: #dc3545; color: #fff; }
    .status-cancel-request { background: #f8d7da; color: #721c24; }
    .status-return-request { background: #fff3cd; color: #856404; }
    .status-returned { background: #6c757d; color: #fff; }
    
    .order-details {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 1.25rem;
        margin-bottom: 1.25rem;
    }
    
    .detail-group {
        padding: 0.5rem;
    }
    
    .detail-label {
        font-size: 0.75rem;
        color: #718096;
        margin-bottom: 0.25rem;
        font-weight: 500;
    }
    
    .detail-value {
        font-weight: 500;
        color: #2d3748;
    }
    
    .detail-value small {
        display: block;
        font-size: 0.75rem;
        color: #718096;
        margin-top: 0.25rem;
    }
    
    .order-actions {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
        align-items: center;
        padding-top: 1rem;
        border-top: 1px solid #edf2f7;
    }
    
    .order-actions .btn {
        padding: 0.375rem 0.75rem;
        font-size: 0.8125rem;
        border-radius: 6px;
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
    }
    
    .order-actions .btn i {
        font-size: 0.75rem;
    }
    
    .update-status {
        padding: 0.375rem 2.25rem 0.375rem 0.75rem;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-position: right 0.75rem center;
        background-size: 16px 12px;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        font-size: 0.8125rem;
        transition: all 0.2s;
    }
    
    .update-status:focus {
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.2);
        outline: none;
    }
    
    .pagination {
        justify-content: center;
        margin-top: 2.5rem;
        display: flex;
        gap: 0.5rem;
    }
    
    .page-item .page-link {
        padding: 0.5rem 0.875rem;
        border: 1px solid #e2e8f0;
        color: #4a5568;
        border-radius: 6px;
        font-size: 0.875rem;
        transition: all 0.2s;
    }
    
    .page-item.active .page-link {
        background-color: #4299e1;
        border-color: #4299e1;
        color: white;
    }
    
    .page-item:not(.active) .page-link:hover {
        background-color: #ebf8ff;
        border-color: #bee3f8;
        color: #2b6cb0;
    }
    
    .no-orders {
        text-align: center;
        padding: 3rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.05);
        border: 1px dashed #cbd5e0;
    }
    
    .no-orders i {
        font-size: 3rem;
        color: #cbd5e0;
        margin-bottom: 1.5rem;
    }
    
    .no-orders h4 {
        color: #4a5568;
        margin-bottom: 0.5rem;
    }
    
    .no-orders p {
        color: #718096;
        font-size: 0.875rem;
    }

    .update-status:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background-color: #f8f9fa;
    }
    
    @media (max-width: 768px) {
        .order-management-container {
            padding: 1rem;
        }
        
        .order-details {
            grid-template-columns: 1fr;
        }
        
        .order-actions {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .update-status {
            width: 100%;
        }
    }
</style>

<div class="order-management-container">
    <h2 class="mb-4">Order Management</h2>
    
    <div class="filter-section">
        <form id="filterForm" class="row g-3">
            <div class="col-md-3">
                <label for="search" class="form-label">Search</label>
                <input type="text" class="form-control" id="search" name="search" 
                       value="<%= search %>" placeholder="Order ID, Customer">
            </div>
            
            <div class="col-md-2">
                <label for="status" class="form-label">Status</label>
                <select class="form-select" id="status" name="status">
                    <option value="">All Statuses</option>
                    <% statuses.forEach(status => { %>
                        <option value="<%= status %>" <%= statusFilter === status ? 'selected' : '' %>>
                            <%= status %>
                        </option>
                    <% }) %>
                </select>
            </div>
            
            <div class="col-md-2">
                <label for="dateFrom" class="form-label">From Date</label>
                <input type="date" class="form-control" id="dateFrom" 
                       name="dateFrom" value="<%= dateFrom %>">
            </div>
            
            <div class="col-md-2">
                <label for="dateTo" class="form-label">To Date</label>
                <input type="date" class="form-control" id="dateTo" 
                       name="dateTo" value="<%= dateTo %>">
            </div>
            
            <div class="col-md-2">
                <label for="sortBy" class="form-label">Sort By</label>
                <select class="form-select" id="sortBy" name="sortBy">
                    <option value="createdAt" <%= sortBy === 'createdAt' ? 'selected' : '' %>>Order Date</option>
                    <option value="finalAmount" <%= sortBy === 'finalAmount' ? 'selected' : '' %>>Amount</option>
                </select>
            </div>
            
            <div class="col-md-1">
                <label for="sortOrder" class="form-label">Order</label>
                <select class="form-select" id="sortOrder" name="sortOrder">
                    <option value="desc" <%= sortOrder === -1 ? 'selected' : '' %>>Desc</option>
                    <option value="asc" <%= sortOrder === 1 ? 'selected' : '' %>>Asc</option>
                </select>
            </div>
            
            <div class="col-12">
                <button type="submit" class="btn btn-primary">Apply Filters</button>
                <a href="/admin/orders" class="btn btn-outline-secondary ms-2">Clear Filters</a>
            </div>
        </form>
    </div>
    
    
    <% if (orders.length === 0) { %>
        <div class="no-orders">
            <i class="fas fa-box-open fa-3x mb-3"></i>
            <h4>No orders found</h4>
            <p>Try adjusting your search or filter criteria</p>
        </div>
    <% } else { %>
        <% orders.forEach(order => { %>
            <div class="order-card">
                <div class="order-header">
                    <div>
                        <span class="order-id">Order #<%= order.orderId %></span>
                    </div>
                    <span class="order-status status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                        <%= order.status %>
                    </span>
                </div>
                
                <div class="order-details">
                    <div class="detail-group">
                        <div class="detail-label">Customer</div>
                        <div class="detail-value">
                            <%= order.userId ? order.userId.name : 'Guest' %>
                            <% if (order.userId) { %>
                                <br><small><%= order.userId.email %></small>
                            <% } %>
                        </div>
                    </div>
                    
                    <div class="detail-group">
                        <div class="detail-label">Order Date</div>
                        <div class="detail-value"><%= order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A' %></div>
                    </div>
                    
                    <div class="detail-group">
                        <div class="detail-label">Amount</div>
                        <div class="detail-value">₹<%= order.finalAmount.toFixed(2) %></div>
                    </div>
                    
                    <div class="detail-group">
                        <div class="detail-label">Payment Method</div>
                        <div class="detail-value"><%= order.paymentMethod %></div>
                    </div>
                </div>
                
                <div class="order-actions">
                    <a href="/admin/orders/details/<%= order.orderId %>" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-eye"></i> View Details
                    </a>
                    
                    <a href="/admin/orders/invoice/<%= order.orderId %>" class="btn btn-sm btn-outline-secondary">
                        <i class="fas fa-file-invoice"></i> Download Invoice
                    </a>
                    
                    <button class="btn btn-sm btn-outline-info view-timeline" data-order-id="<%= order.orderId %>">
                        <i class="fas fa-clock"></i> View Timeline
                    </button>
                    
                    <select class="form-select update-status w-auto d-inline-block" 
                            data-order-id="<%= order.orderId %>"
                            data-original-status="<%= order.status %>">
                        <% statuses.forEach(status => { %>
                            <option value="<%= status %>" <%= order.status === status ? 'selected' : '' %>>
                                <%= status %>
                            </option>
                        <% }) %>
                    </select>
                    
                    <% if (order.status === 'Return Request') { %>
                        <button class="btn btn-sm btn-success approve-return" data-order-id="<%= order.orderId %>">
                            <i class="fas fa-check-circle"></i> Approve Return
                        </button>
                        
                        <button class="btn btn-sm btn-danger reject-return" data-order-id="<%= order.orderId %>">
                            <i class="fas fa-times-circle"></i> Reject Return
                        </button>
                    <% } %>
                    
                    <% if (order.status === 'Cancel Request') { %>
                        <button class="btn btn-sm btn-success approve-cancel" data-order-id="<%= order.orderId %>">
                            <i class="fas fa-check-circle"></i> Approve Cancel
                        </button>
                        
                        <button class="btn btn-sm btn-danger reject-cancel" data-order-id="<%= order.orderId %>">
                            <i class="fas fa-times-circle"></i> Reject Cancel
                        </button>
                    <% } %>
                </div>
            </div>
        <% }) %>
        
        <% if (totalPages > 1) { %>
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    <% if (currentPage > 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="/admin/orders?page=<%= currentPage-1 %><%= search ? '&search='+search : '' %><%= statusFilter ? '&status='+statusFilter : '' %><%= dateFrom ? '&dateFrom='+dateFrom : '' %><%= dateTo ? '&dateTo='+dateTo : '' %>">Previous</a>
                        </li>
                    <% } %>
                    
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                            <a class="page-link" href="/admin/orders?page=<%= i %><%= search ? '&search='+search : '' %><%= statusFilter ? '&status='+statusFilter : '' %><%= dateFrom ? '&dateFrom='+dateFrom : '' %><%= dateTo ? '&dateTo='+dateTo : '' %>"><%= i %></a>
                        </li>
                    <% } %>
                    
                    <% if (currentPage < totalPages) { %>
                        <li class="page-item">
                            <a class="page-link" href="/admin/orders?page=<%= currentPage+1 %><%= search ? '&search='+search : '' %><%= statusFilter ? '&status='+statusFilter : '' %><%= dateFrom ? '&dateFrom='+dateFrom : '' %><%= dateTo ? '&dateTo='+dateTo : '' %>">Next</a>
                        </li>
                    <% } %>
                </ul>
            </nav>
        <% } %>
    <% } %>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    $(document).ready(function() {
        // Function to update dropdown state based on order status
        function updateDropdownState(dropdown, status) {
            const allowedStatuses = ['Pending', 'Shipped', 'Delivered'];
            const terminalStatuses = ['Cancel Request', 'Cancelled', 'Return Request', 'Returned', 'Delivered'];
            
            if (terminalStatuses.includes(status)) {
                dropdown.prop('disabled', true);
            } else if (allowedStatuses.includes(status)) {
                dropdown.prop('disabled', false);
            }
        }

        // Initialize dropdown states on page load
        $('.update-status').each(function() {
            const orderStatus = $(this).data('original-status');
            updateDropdownState($(this), orderStatus);
        });

        // Handle filter form submission
        $('#filterForm').on('submit', function(e) {
            e.preventDefault();
            const formData = $(this).serialize();
            window.location.href = `/admin/orders?${formData}`;
        });

        // Handle status updates
        $('.update-status').change(function() {
            const orderId = $(this).data('order-id');
            const newStatus = $(this).val();
            const $dropdown = $(this);

            Swal.fire({
                title: 'Update Order Status',
                text: `Are you sure you want to change the status to ${newStatus}?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Update',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/admin/orders/update-status/${orderId}`,
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ status: newStatus }),
                        success: function(response) {
                            Swal.fire('Success', response.message, 'success').then(() => {
                                // Update the original status data attribute
                                $dropdown.data('original-status', newStatus);
                                // Update dropdown state
                                updateDropdownState($dropdown, newStatus);
                                // Update the displayed status badge
                                const statusBadge = $dropdown.closest('.order-card').find('.order-status');
                                statusBadge.text(newStatus);
                                statusBadge.removeClass(function(index, className) {
                                    return (className.match(/(^|\s)status-\S+/g) || []).join(' ');
                                });
                                statusBadge.addClass(`status-${newStatus.toLowerCase().replace(/\s+/g, '-')}`);
                            });
                        },
                        error: function(xhr) {
                            Swal.fire('Error', xhr.responseJSON?.message || 'Failed to update status', 'error');
                            $dropdown.val($dropdown.data('original-status')); // Reset on error
                        }
                    });
                } else {
                    $dropdown.val($dropdown.data('original-status')); // Reset on cancel
                }
            });
        });

        // Timeline functionality
        $('.view-timeline').click(function() {
            const orderId = $(this).data('order-id');
            
            $.ajax({
                url: `/admin/orders/timeline/${orderId}`,
                method: 'GET',
                success: function(response) {
                    if (response.success) {
                        let timelineHtml = '<ul class="list-group">';
                        response.timeline.forEach(item => {
                            timelineHtml += `
                                <li class="list-group-item">
                                    <strong>${item.status}</strong> - 
                                    ${new Date(item.date).toLocaleString()} 
                                    <br><small>${item.description}</small>
                                </li>`;
                        });
                        timelineHtml += '</ul>';

                        Swal.fire({
                            title: `Order #${orderId} Timeline`,
                            html: timelineHtml,
                            width: '600px'
                        });
                    }
                },
                error: function(xhr) {
                    Swal.fire('Error', 'Failed to fetch timeline', 'error');
                }
            });
        });

        // Return request handling
        $('.approve-return').click(function() {
            const orderId = $(this).data('order-id');
            Swal.fire({
                title: 'Approve Return Request',
                text: 'Are you sure you want to approve this return and refund the amount?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Approve',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/admin/orders/${orderId}/return`,
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ action: 'approve' }),
                        success: function(response) {
                            Swal.fire('Success', response.message, 'success').then(() => {
                                location.reload();
                            });
                        },
                        error: function(xhr) {
                            Swal.fire('Error', xhr.responseJSON?.message || 'Failed to process return', 'error');
                        }
                    });
                }
            });
        });

        $('.reject-return').click(function() {
            const orderId = $(this).data('order-id');
            Swal.fire({
                title: 'Reject Return Request',
                text: 'Are you sure you want to reject this return request?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Reject',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/admin/orders/${orderId}/return`,
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ action: 'reject' }),
                        success: function(response) {
                            Swal.fire('Success', response.message, 'success').then(() => {
                                location.reload();
                            });
                        },
                        error: function(xhr) {
                            Swal.fire('Error', xhr.responseJSON?.message || 'Failed to process return', 'error');
                        }
                    });
                }
            });
        });

        // Handle cancel request approval
        $('.approve-cancel').click(function() {
            const orderId = $(this).data('order-id');
            Swal.fire({
                title: 'Approve Cancel Request',
                text: 'Are you sure you want to approve this cancellation and refund the amount (if applicable)?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Approve',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/admin/orders/cancel/${orderId}`,
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ action: 'approve' }),
                        success: function(response) {
                            Swal.fire('Success', response.message, 'success').then(() => {
                                const $card = $(`.order-card:has([data-order-id="${orderId}"])`);
                                $card.find('.order-status')
                                    .text('Cancelled')
                                    .removeClass(function(index, className) {
                                        return (className.match(/(^|\s)status-\S+/g) || []).join(' ');
                                    })
                                    .addClass('status-cancelled');
                                $card.find('.approve-cancel, .reject-cancel').hide();
                                $card.find('.update-status').val('Cancelled').prop('disabled', true);
                            });
                        },
                        error: function(xhr) {
                            Swal.fire('Error', xhr.responseJSON?.message || 'Failed to process cancellation', 'error');
                        }
                    });
                }
            });
        });

        // Handle cancel request rejection
        $('.reject-cancel').click(function() {
            const orderId = $(this).data('order-id');
            Swal.fire({
                title: 'Reject Cancel Request',
                text: 'Are you sure you want to reject this cancellation request?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Reject',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/admin/orders/cancel/${orderId}`,
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify({ action: 'reject' }),
                        success: function(response) {
                            Swal.fire('Success', response.message, 'success').then(() => {
                                const $card = $(`.order-card:has([data-order-id="${orderId}"])`);
                                $card.find('.order-status')
                                    .text(response.newStatus || 'Pending')
                                    .removeClass(function(index, className) {
                                        return (className.match(/(^|\s)status-\S+/g) || []).join(' ');
                                    })
                                    .addClass(`status-${(response.newStatus || 'Pending').toLowerCase().replace(/\s+/g, '-')}`);
                                $card.find('.approve-cancel, .reject-cancel').hide();
                                $card.find('.update-status').val(response.newStatus || 'Pending').prop('disabled', false);
                            });
                        },
                        error: function(xhr) {
                            Swal.fire('Error', xhr.responseJSON?.message || 'Failed to process cancellation', 'error');
                        }
                    });
                }
            });
        });
    });
</script>

<%- include('../partials/admin/footer') %>