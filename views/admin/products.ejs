<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #4895ef;
            --secondary: #3a0ca3;
            --success: #2ec4b6;
            --danger: #e63946;
            --warning: #f9c74f;
            --info: #4cc9f0;
            --light: #f8f9fa;
            --dark: #212529;
            --grey: #6c757d;
            --border-radius: 12px;
            --shadow-sm: 0 2px 8px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
            --shadow-lg: 0 8px 24px rgba(0,0,0,0.12);
            --transition: all 0.3s ease;
        }
        
        body {
            background-color: #f8fafc;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .dashboard-container {
            padding: 2rem;
            background: #f8fafc;
            max-width: 1600px;
            margin: 0 auto;
        }
        
        .content-header {
            margin-bottom: 2rem;
        }
        
        .content-header h2 {
            color: var(--dark);
            font-weight: 700;
            margin-bottom: 0.5rem;
            font-size: 1.8rem;
            letter-spacing: -0.5px;
            position: relative;
            display: inline-block;
        }
        
        .content-header h2::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--primary);
            border-radius: 2px;
        }
        
        .search-wrapper {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            padding: 1.8rem;
            margin-bottom: 2rem;
            transition: var(--transition);
            border: 1px solid rgba(0,0,0,0.03);
        }
        
        .search-wrapper:hover {
            box-shadow: var(--shadow-lg);
        }
        
        /* Improved search area */
        .filter-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .toggle-buttons {
            display: flex;
            gap: 10px;
        }
        
        .search-input-container {
            flex-grow: 1;
            max-width: 100%;
            min-width: 250px;
            position: relative;
        }
        
        .search-input {
            width: 100%;
            position: relative;
        }
        
        .search-input input {
            width: 100%;
            padding: 0.75rem 1.2rem;
            border-radius: 30px;
            border: 1px solid #e0e0e0;
            font-size: 1rem;
            box-shadow: var(--shadow-sm);
            padding-right: 40px;
            transition: var(--transition);
        }
        
        .search-input input:focus {
            outline: none;
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }
        
        .search-input input::placeholder {
            color: #adb5bd;
        }
        
        .clear-search-btn {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #adb5bd;
            cursor: pointer;
            font-size: 16px;
            transition: var(--transition);
        }
        
        .clear-search-btn:hover {
            color: var(--danger);
        }
        
        /* Table styles */
        .custom-table {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            overflow: hidden;
            transition: var(--transition);
            border: 1px solid rgba(0,0,0,0.03);
        }
        
        .custom-table:hover {
            box-shadow: var(--shadow-lg);
        }
        
        .custom-table table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
        }
        
        .custom-table thead {
            background: #f8f9fa;
        }
        
        .custom-table th {
            font-weight: 600;
            color: var(--dark);
            padding: 1.2rem 1rem;
            border-bottom: 2px solid #f0f0f0;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }
        
        .custom-table td {
            padding: 1.2rem 1rem;
            vertical-align: middle;
            border-bottom: 1px solid #f0f0f0;
            font-size: 0.95rem;
        }
        
        .custom-table tr:last-child td {
            border-bottom: none;
        }
        
        .custom-table tr {
            transition: var(--transition);
        }
        
        .custom-table tr:hover {
            background: #f8f9fa;
        }
        
        .action-btn {
            border-radius: 8px;
            padding: 0.6rem 1rem;
            transition: var(--transition);
            font-weight: 500;
            border: none;
            font-size: 0.9rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }
        
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }
        
        .offer-btn {
            background: var(--info);
            color: white;
        }
        
        .offer-btn:hover {
            background: #32b0e4;
        }
        
        .block-btn {
            background: var(--danger);
            color: white;
        }
        
        .block-btn:hover {
            background: #d5303d;
        }
        
        .unblock-btn {
            background: var(--success);
            color: white;
        }
        
        .unblock-btn:hover {
            background: #23b0a3;
        }
        
        .edit-btn {
            background: var(--secondary);
            color: white;
        }
        
        .edit-btn:hover {
            background: #3107a3;
        }
        
        .pagination {
            margin-top: 2rem;
            gap: 5px;
        }
        
        .pagination .page-link {
            border-radius: 8px;
            margin: 0 3px;
            border: none;
            color: var(--dark);
            cursor: pointer;
            transition: var(--transition);
            min-width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
        }
        
        .pagination .page-link:hover {
            background: rgba(67, 97, 238, 0.1);
            color: var(--primary);
        }
        
        .pagination .active .page-link {
            background: var(--primary);
            color: white;
            font-weight: 600;
        }
        
        tr {
            transition: opacity 0.5s ease;
        }
        
        .spinner-border {
            width: 2rem;
            height: 2rem;
            color: var(--primary);
        }
        
        /* Enhanced toggle buttons */
        .toggle-btn {
            border-radius: 30px;
            min-width: 170px;
            padding: 0.75rem 1.2rem;
            font-weight: 500;
            transition: var(--transition);
            border: 2px solid var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            cursor: pointer;
        }
        
        .toggle-btn.active {
            background: var(--primary);
            color: white;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2);
        }
        
        .toggle-btn:not(.active) {
            background: white;
            color: var(--primary);
        }
        
        .toggle-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2);
        }
        
        /* Badge for quantity */
        .quantity-badge {
            padding: 0.35rem 0.7rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            display: inline-block;
        }
        
        .high-quantity {
            background-color: rgba(46, 196, 182, 0.15);
            color: #21a99a;
        }
        
        .medium-quantity {
            background-color: rgba(249, 199, 79, 0.15);
            color: #e8b62a;
        }
        
        .low-quantity {
            background-color: rgba(230, 57, 70, 0.15);
            color: #d32d39;
        }
        
        /* Price styles */
        .price-tag {
            font-weight: 600;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .regular-price {
            color: var(--grey);
        }
        
        .sale-price {
            color: var(--primary);
        }
        
        /* No results message */
        .no-results {
            padding: 3rem;
            text-align: center;
            color: var(--grey);
        }
        
        .no-results i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        .no-results h4 {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .no-results p {
            max-width: 500px;
            margin: 0 auto;
            opacity: 0.7;
        }
        
        /* Loading animation */
        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }
        
        .loading-pulse {
            animation: pulse 1.5s infinite ease-in-out;
        }
        
        /* Mobile responsiveness */
        @media (max-width: 992px) {
            .filter-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .toggle-buttons {
                justify-content: center;
                margin-bottom: 1rem;
            }
            
            .custom-table {
                overflow-x: auto;
            }
        }
        
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }
            
            .search-wrapper {
                padding: 1.2rem;
            }
            
            .toggle-btn {
                min-width: 140px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>

<div class="dashboard-container">
    <div class="content-header">
        <h2>Product Management</h2>
    </div>

    <div class="search-wrapper">
        <div class="filter-controls">
            <div class="toggle-buttons">
                <button class="toggle-btn <%= !isBlocked ? 'active' : '' %>" id="availableProductsBtn">
                    <i class="fas fa-box-open"></i> Available Products
                </button>
                <button class="toggle-btn <%= isBlocked ? 'active' : '' %>" id="blockedProductsBtn">
                    <i class="fas fa-ban"></i> Blocked Products
                </button>
            </div>
            <div class="search-input-container">
                <div class="search-input">
                    <input type="text" placeholder="Search products or brands..." id="searchInput" value="<%= search %>">
                    <button class="clear-search-btn" id="clearSearchBtn">
                        <i class="fas fa-times-circle"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="custom-table">
        <table class="table table-borderless mb-0">
            <thead>
                <tr>
                    <th scope="col">PRODUCT NAME</th>
                    <th scope="col">BRAND</th>
                    <th scope="col">CATEGORY</th>
                    <th scope="col">SALE PRICE</th>
                    <th scope="col">OFFER PRICE</th>
                    <th scope="col">QUANTITY</th>
                    <th scope="col">OFFER</th>
                    <th scope="col">ACTION</th>
                    <th scope="col">EDIT</th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                <% if(data.length === 0) { %>
                <tr>
                    <td colspan="9">
                        <div class="no-results">
                            <i class="fas fa-search"></i>
                            <h4>No products found</h4>
                            <p>Try adjusting your search or filters to find what you're looking for.</p>
                        </div>
                    </td>
                </tr>
                <% } else { %>
                <% for (let i = 0; i < data.length; i++) { %>
                <tr>
                    <td><strong><%= data[i].productName %></strong></td>
                    <td><%= data[i].brand.brandName %></td>
                    <td><%= data[i].category.name %></td>
                    <td><span class="price-tag regular-price">₹<%= data[i].regularPrice %></span></td>
                    <td><span class="price-tag sale-price">₹<%= data[i].salePrice %></span></td>
                    <td>
                        <% 
                        let quantityClass = "medium-quantity";
                        if(data[i].quantity > 50) quantityClass = "high-quantity";
                        if(data[i].quantity < 10) quantityClass = "low-quantity";
                        %>
                        <span class="quantity-badge <%= quantityClass %>"><%= data[i].quantity %></span>
                    </td>
                    <td>
                        <button class="action-btn offer-btn w-100">
                            <i class="fas fa-tag fa-sm"></i> Add Offer
                        </button>
                    </td>
                    <td>
                        <% if(data[i].isBlocked === false) { %>
                        <button class="action-btn block-btn w-100" data-product-id="<%= data[i]._id %>" data-action="block">
                            <i class="fas fa-ban fa-sm"></i> Block
                        </button>
                        <% } else { %>
                        <button class="action-btn unblock-btn w-100" data-product-id="<%= data[i]._id %>" data-action="unblock">
                            <i class="fas fa-check-circle fa-sm"></i> Unblock
                        </button>
                        <% } %>
                    </td>
                    <td>
                        <button class="action-btn edit-btn w-100">
                            <a href="/admin/editProduct?id=<%= data[i]._id %>" class="text-white" style="text-decoration: none;">
                                <i class="fas fa-edit fa-sm"></i> Edit
                            </a>
                        </button>
                    </td>
                </tr>
                <% } %>
                <% } %>
            </tbody>
        </table>
    </div>

    <div class="container mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center" id="pagination">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="<%= currentPage - 1 %>">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="<%= currentPage + 1 %>">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Function to load a page dynamically
    async function loadPage(page, search = '', isBlocked = false) {
        try {
            const tbody = document.querySelector('#productTableBody');
            tbody.innerHTML = '<tr><td colspan="9" class="text-center py-5"><div class="spinner-border loading-pulse" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';

            let url = `/admin/products?page=${page}&format=json`;
            if (search) url += `&search=${encodeURIComponent(search)}`;
            if (isBlocked) url += '&blocked=true';

            const response = await fetch(url, {
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Failed to load page');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Failed to load data');
            }

            // Update table body
            if (data.data.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9">
                            <div class="no-results">
                                <i class="fas fa-search"></i>
                                <h4>No products found</h4>
                                <p>Try adjusting your search or filters to find what you're looking for.</p>
                            </div>
                        </td>
                    </tr>
                `;
            } else {
                tbody.innerHTML = data.data.map(product => {
                    let quantityClass = "medium-quantity";
                    if(product.quantity > 50) quantityClass = "high-quantity";
                    if(product.quantity < 10) quantityClass = "low-quantity";
                    
                    return `
                        <tr>
                            <td><strong>${product.productName}</strong></td>
                            <td>${product.brand.brandName}</td>
                            <td>${product.category.name}</td>
                            <td><span class="price-tag regular-price">₹${product.regularPrice}</span></td>
                            <td><span class="price-tag sale-price">₹${product.salePrice}</span></td>
                            <td>
                                <span class="quantity-badge ${quantityClass}">${product.quantity}</span>
                            </td>
                            <td>
                                <button class="action-btn offer-btn w-100">
                                    <i class="fas fa-tag fa-sm"></i> Add Offer
                                </button>
                            </td>
                            <td>
                                ${product.isBlocked ?
                                    `<button class="action-btn unblock-btn w-100" data-product-id="${product._id}" data-action="unblock">
                                        <i class="fas fa-check-circle fa-sm"></i> Unblock
                                    </button>` :
                                    `<button class="action-btn block-btn w-100" data-product-id="${product._id}" data-action="block">
                                        <i class="fas fa-ban fa-sm"></i> Block
                                    </button>`
                                }
                            </td>
                            <td>
                                <button class="action-btn edit-btn w-100">
                                    <a href="/admin/editProduct?id=${product._id}" class="text-white" style="text-decoration: none;">
                                        <i class="fas fa-edit fa-sm"></i> Edit
                                    </a>
                                </button>
                            </td>
                        </tr>
                    `;
                }).join('');
            }

            // Update pagination
            const pagination = document.querySelector('#pagination');
            pagination.innerHTML = '';
            if (data.currentPage > 1) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${data.currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;
            }
            for (let i = 1; i <= data.totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === data.currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            }
            if (data.currentPage < data.totalPages) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${data.currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;
            }

            // Update button styles
            const availableBtn = document.querySelector('#availableProductsBtn');
            const blockedBtn = document.querySelector('#blockedProductsBtn');
            availableBtn.className = `toggle-btn ${!isBlocked ? 'active' : ''}`;
            blockedBtn.className = `toggle-btn ${isBlocked ? 'active' : ''}`;

            // Re-attach event listeners
            attachPaginationListeners();
            attachBlockUnblockListeners();

            // Update browser URL
            const newUrl = `/admin/products?page=${page}${search ? '&search=' + encodeURIComponent(search) : ''}${isBlocked ? '&blocked=true' : ''}`;
            history.pushState({ page, search, isBlocked }, '', newUrl);

            // Update clear button visibility
            updateClearButtonVisibility();

        } catch (error) {
            console.error('Error loading page:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Failed to load page. Please try again.',
                timer: 3000,
                showConfirmButton: false
            });
            tbody.innerHTML = `
                <tr>
                    <td colspan="9">
                        <div class="no-results">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>Error loading data</h4>
                            <p>There was a problem fetching the products. Please try again later.</p>
                        </div>
                    </td>
                </tr>
            `;
        }
    }

    // Function to attach pagination event listeners
    function attachPaginationListeners() {
        document.querySelectorAll('.pagination .page-link').forEach(link => {
            link.addEventListener('click', async function(e) {
                e.preventDefault();
                const page = this.getAttribute('data-page');
                const search = document.querySelector('#searchInput').value;
                const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
                await loadPage(page, search, isBlocked);
            });
        });
    }

    // Function to attach block/unblock event listeners
    function attachBlockUnblockListeners() {
        // Block product
        document.querySelectorAll('.block-btn').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');
                const row = this.closest('tr');

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to block this product?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#e63946',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, block it!',
                    cancelButtonText: 'Cancel',
                    customClass: {
                        confirmButton: 'btn btn-danger',
                        cancelButton: 'btn btn-secondary'
                    },
                    buttonsStyling: true
                });

                if (result.isConfirmed) {
                    try {
                        button.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Processing...';
                        button.disabled = true;
                        
                        const response = await fetch('/admin/blockProduct', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: `id=${productId}`
                        });

                        const data = await response.json();
                        if (data.success) {
                            const actionCell = row.querySelector('td:nth-child(8)');
                            actionCell.innerHTML = `
                                <button class="action-btn unblock-btn w-100" data-product-id="${productId}" data-action="unblock">
                                    <i class="fas fa-check-circle fa-sm"></i> Unblock
                                </button>
                            `;
                            attachBlockUnblockListeners();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Product has been blocked successfully',
                                timer: 2000,
                                showConfirmButton: false,
                                customClass: {
                                    popup: 'animated fadeInDown faster'
                                }
                            });
                            if (!window.location.href.includes('blocked=true')) {
                                setTimeout(() => {
                                    row.style.opacity = '0';
                                    setTimeout(() => row.remove(), 500);
                                }, 1000);
                            }
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: data.message || 'Failed to block product',
                                timer: 3000,
                                showConfirmButton: false
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to block product. Please try again.',
                            timer: 3000,
                            showConfirmButton: false
                        });
                    }
                }
            });
        });

        // Unblock product
        document.querySelectorAll('.unblock-btn').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');
                const row = this.closest('tr');

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to unblock this product?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#2ec4b6',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, unblock it!',
                    cancelButtonText: 'Cancel',
                    customClass: {
                        confirmButton: 'btn btn-success',
                        cancelButton: 'btn btn-secondary'
                    },
                    buttonsStyling: true
                });

                if (result.isConfirmed) {
                    try {
                        button.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Processing...';
                        button.disabled = true;
                        
                        const response = await fetch('/admin/unblockProduct', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: `id=${productId}`
                        });

                        const data = await response.json();
                        if (data.success) {
                            const actionCell = row.querySelector('td:nth-child(8)');
                            actionCell.innerHTML = `
                                <button class="action-btn block-btn w-100" data-product-id="${productId}" data-action="block">
                                    <i class="fas fa-ban fa-sm"></i> Block
                                </button>
                            `;
                            attachBlockUnblockListeners();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Product has been unblocked successfully',
                                timer: 2000,
                                showConfirmButton: false,
                                customClass: {
                                    popup: 'animated fadeInDown faster'
                                }
                            });
                            if (window.location.href.includes('blocked=true')) {
                                setTimeout(() => {
                                    row.style.opacity = '0';
                                    setTimeout(() => row.remove(), 500);
                                }, 1000);
                            }
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: data.message || 'Failed to unblock product',
                                timer: 3000,
                                showConfirmButton: false
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to unblock product. Please try again.',
                            timer: 3000,
                            showConfirmButton: false
                        });
                    }
                }
            });
        });

        // Add event listeners for offer buttons
        document.querySelectorAll('.offer-btn').forEach(button => {
            button.addEventListener('click', function(e) {
                //offer button working blocked by me
                e.eventPreventDefault()
                const productName = this.closest('tr').querySelector('td:first-child').textContent;
                
                Swal.fire({
                    title: 'Add Offer',
                    html: `
                        <form id="offerForm" class="text-left">
                            <div class="mb-3">
                                <label for="offerDiscount" class="form-label">Discount Percentage (%)</label>
                                <input type="number" class="form-control" id="offerDiscount" min="1" max="99" required>
                            </div>
                            <div class="mb-3">
                                <label for="offerStartDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="offerStartDate" required>
                            </div>
                            <div class="mb-3">
                                <label for="offerEndDate" class="form-label">End Date</label>
                                <input type="date" class="form-control" id="offerEndDate" required>
                            </div>
                        </form>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Add Offer',
                    confirmButtonColor: '#4cc9f0',
                    cancelButtonColor: '#6c757d',
                    preConfirm: () => {
                        const form = document.getElementById('offerForm');
                        if (!form.checkValidity()) {
                            form.reportValidity();
                            return false;
                        }
                        return {
                            discount: document.getElementById('offerDiscount').value,
                            startDate: document.getElementById('offerStartDate').value,
                            endDate: document.getElementById('offerEndDate').value
                        };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Here you would send the offer data to your backend
                        // For now, we'll just show a success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Offer Added!',
                            text: `Offer of ${result.value.discount}% added to ${productName}`,
                            timer: 2000,
                            showConfirmButton: false
                        });
                    }
                });
            });
        });
    }

    // Update the clear button visibility based on search input
    function updateClearButtonVisibility() {
        const searchInput = document.querySelector('#searchInput');
        const clearButton = document.querySelector('#clearSearchBtn');
        
        if (searchInput.value.trim() !== '') {
            clearButton.style.display = 'block';
        } else {
            clearButton.style.display = 'none';
        }
    }

    // Function to clear search and reset results
    function clearSearch() {
        const searchInput = document.querySelector('#searchInput');
        searchInput.value = '';
        updateClearButtonVisibility();
        
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(1, '', isBlocked);
    }

    // Add loading animation to buttons
    function addLoadingToButton(button, text) {
        const originalContent = button.innerHTML;
        button.innerHTML = `<i class="fas fa-circle-notch fa-spin"></i> ${text}`;
        button.disabled = true;
        return () => {
            button.innerHTML = originalContent;
            button.disabled = false;
        };
    }

    // Initial setup
    const searchInput = document.querySelector('#searchInput');
    const clearSearchBtn = document.querySelector('#clearSearchBtn');

    // Create debounced search function
    const debouncedSearch = debounce(function(value) {
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(1, value, isBlocked);
    }, 500);

    // Add event listener to search input
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            updateClearButtonVisibility();
            debouncedSearch(this.value);
        });
        
        // Initial visibility check
        updateClearButtonVisibility();
    }

    // Add event listener to clear button
    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            clearSearch();
            searchInput.focus();
        });
    }

    // Handle Available/Blocked Products buttons
    document.querySelector('#availableProductsBtn').addEventListener('click', function() {
        if (this.classList.contains('active')) return;
        
        const resetBlockedBtn = addLoadingToButton(this, 'Loading...');
        
        const search = searchInput ? searchInput.value : '';
        loadPage(1, search, false).then(resetBlockedBtn);
    });

    document.querySelector('#blockedProductsBtn').addEventListener('click', function() {
        if (this.classList.contains('active')) return;
        
        const resetBlockedBtn = addLoadingToButton(this, 'Loading...');
        
        const search = searchInput ? searchInput.value : '';
        loadPage(1, search, true).then(resetBlockedBtn);
    });

    // Add keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Focus search box on Ctrl+F or Cmd+F (but don't prevent default browser search)
        if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
            setTimeout(() => {
                searchInput.focus();
            }, 100);
        }
        
        // Clear search on Escape when search input is focused
        if (e.key === 'Escape' && document.activeElement === searchInput && searchInput.value !== '') {
            clearSearch();
            e.preventDefault();
        }
    });

    // Initialize event listeners
    attachPaginationListeners();
    attachBlockUnblockListeners();

    // Handle popstate for browser back/forward
    window.addEventListener('popstate', function(event) {
        const state = event.state;
        if (state) {
            if (searchInput) searchInput.value = state.search || '';
            updateClearButtonVisibility();
            loadPage(state.page, state.search || '', state.isBlocked || false);
        }
    });
    
    // Add visual feedback when clicking on buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('action-btn') || 
            e.target.classList.contains('toggle-btn') ||
            e.target.classList.contains('page-link')) {
            
            const ripple = document.createElement('div');
            const rect = e.target.getBoundingClientRect();
            
            ripple.style.position = 'absolute';
            ripple.style.borderRadius = '50%';
            ripple.style.backgroundColor = 'rgba(255, 255, 255, 0.3)';
            ripple.style.width = '100px';
            ripple.style.height = '100px';
            ripple.style.marginTop = '-50px';
            ripple.style.marginLeft = '-50px';
            ripple.style.top = (e.clientY - rect.top) + 'px';
            ripple.style.left = (e.clientX - rect.left) + 'px';
            ripple.style.pointerEvents = 'none';
            ripple.style.transform = 'scale(0)';
            ripple.style.transition = 'transform 0.5s, opacity 0.5s';
            
            e.target.style.position = 'relative';
            e.target.style.overflow = 'hidden';
            e.target.appendChild(ripple);
            
            setTimeout(() => {
                ripple.style.transform = 'scale(4)';
                ripple.style.opacity = '0';
                setTimeout(() => {
                    if (ripple.parentNode) {
                        ripple.parentNode.removeChild(ripple);
                    }
                }, 500);
            }, 1);
        }
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>