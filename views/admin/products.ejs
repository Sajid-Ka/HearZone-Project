<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #4895ef;
            --secondary: #3a0ca3;
            --success: #2ec4b6;
            --danger: #e63946;
            --warning: #f9c74f;
            --info: #4cc9f0;
            --light: #f8f9fa;
            --dark: #212529;
            --grey: #6c757d;
            --border-radius: 12px;
            --shadow-sm: 0 2px 8px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 12px rgba(0,0,0,0.08);
            --shadow-lg: 0 8px 24px rgba(0,0,0,0.12);
            --transition: all 0.3s ease;
        }
        
        body {
            background-color: #f8fafc;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .dashboard-container {
            padding: 2rem;
            background: #f8fafc;
            max-width: 1600px;
            margin: 0 auto;
        }
        
        .content-header {
            margin-bottom: 2rem;
        }
        
        .content-header h2 {
            color: var(--dark);
            font-weight: 700;
            margin-bottom: 0.5rem;
            font-size: 1.8rem;
            letter-spacing: -0.5px;
            position: relative;
            display: inline-block;
        }
        
        .content-header h2::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--primary);
            border-radius: 2px;
        }
        
        .search-wrapper {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            padding: 1.8rem;
            margin-bottom: 2rem;
            transition: var(--transition);
            border: 1px solid rgba(0,0,0,0.03);
        }
        
        .search-wrapper:hover {
            box-shadow: var(--shadow-lg);
        }
        
        .filter-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .toggle-buttons {
            display: flex;
            gap: 10px;
        }
        
        .search-input-container {
            flex-grow: 1;
            max-width: 100%;
            min-width: 250px;
            position: relative;
        }
        
        .search-input {
            width: 100%;
            position: relative;
        }
        
        .search-input input {
            width: 100%;
            padding: 0.75rem 1.2rem;
            border-radius: 30px;
            border: 1px solid #e0e0e0;
            font-size: 1rem;
            box-shadow: var(--shadow-sm);
            padding-right: 40px;
            transition: var(--transition);
        }
        
        .search-input input:focus {
            outline: none;
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }
        
        .search-input input::placeholder {
            color: #adb5bd;
        }
        
        .clear-search-btn {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #adb5bd;
            cursor: pointer;
            font-size: 16px;
            transition: var(--transition);
        }
        
        .clear-search-btn:hover {
            color: var(--danger);
        }
        
        .custom-table {
            background: white;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow-md);
            overflow: hidden;
            transition: var(--transition);
            border: 1px solid rgba(0,0,0,0.03);
        }
        
        .custom-table:hover {
            box-shadow: var(--shadow-lg);
        }
        
        .custom-table table {
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
        }
        
        .custom-table thead {
            background: #f8f9fa;
        }
        
        .custom-table th {
            font-weight: 600;
            color: var(--dark);
            padding: 1.2rem 1rem;
            border-bottom: 2px solid #f0f0f0;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }
        
        .custom-table td {
            padding: 1.2rem 1rem;
            vertical-align: middle;
            border-bottom: 1px solid #f0f0f0;
            font-size: 0.95rem;
        }
        
        .custom-table tr:last-child td {
            border-bottom: none;
        }
        
        .custom-table tr {
            transition: var(--transition);
        }
        
        .custom-table tr:hover {
            background: #f8f9fa;
        }
        
        .action-btn {
            border-radius: 8px;
            padding: 0.6rem 1rem;
            transition: var(--transition);
            font-weight: 500;
            border: none;
            font-size: 0.9rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }
        
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-sm);
        }
        
        .offer-btn {
            background: var(--info);
            color: white;
        }
        
        .offer-btn:hover {
            background: #32b0e4;
        }
        
        .block-btn {
            background: var(--danger);
            color: white;
        }
        
        .block-btn:hover {
            background: #d5303d;
        }
        
        .unblock-btn {
            background: var(--success);
            color: white;
        }
        
        .unblock-btn:hover {
            background: #23b0a3;
        }
        
        .edit-btn {
            background: var(--secondary);
            color: white;
        }
        
        .edit-btn:hover {
            background: #3107a3;
        }
        
        .cancel-offer-btn {
            background: var(--danger);
            color: white;
        }
        
        .cancel-offer-btn:hover {
            background: #d5303d;
        }
        
        .pagination {
            margin-top: 2rem;
            gap: 5px;
        }
        
        .pagination .page-link {
            border-radius: 8px;
            margin: 0 3px;
            border: none;
            color: var(--dark);
            cursor: pointer;
            transition: var(--transition);
            min-width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 500;
        }
        
        .pagination .page-link:hover {
            background: rgba(67, 97, 238, 0.1);
            color: var(--primary);
        }
        
        .pagination .active .page-link {
            background: var(--primary);
            color: white;
            font-weight: 600;
        }
        
        tr {
            transition: opacity 0.5s ease;
        }
        
        .spinner-border {
            width: 2rem;
            height: 2rem;
            color: var(--primary);
        }
        
        .toggle-btn {
            border-radius: 30px;
            min-width: 170px;
            padding: 0.75rem 1.2rem;
            font-weight: 500;
            transition: var(--transition);
            border: 2px solid var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            cursor: pointer;
        }
        
        .toggle-btn.active {
            background: var(--primary);
            color: white;
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2);
        }
        
        .toggle-btn:not(.active) {
            background: white;
            color: var(--primary);
        }
        
        .toggle-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(67, 97, 238, 0.2);
        }
        
        .quantity-badge {
            padding: 0.35rem 0.7rem;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
            display: inline-block;
        }
        
        .high-quantity {
            background-color: rgba(46, 196, 182, 0.15);
            color: #21a99a;
        }
        
        .medium-quantity {
            background-color: rgba(249, 199, 79, 0.15);
            color: #e8b62a;
        }
        
        .low-quantity {
            background-color: rgba(230, 57, 70, 0.15);
            color: #d32d39;
        }
        
        .price-tag {
            font-weight: 600;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .regular-price {
            color: var(--grey);
            text-decoration: line-through;
        }
        
        .sale-price {
            color: var(--primary);
        }
        
        .no-results {
            padding: 3rem;
            text-align: center;
            color: var(--grey);
        }
        
        .no-results i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }
        
        .no-results h4 {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .no-results p {
            max-width: 500px;
            margin: 0 auto;
            opacity: 0.7;
        }
        
        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }
        
        .loading-pulse {
            animation: pulse 1.5s infinite ease-in-out;
        }
        
        .error-message {
            color: var(--danger);
            font-size: 0.85rem;
            margin-top: 0.25rem;
            display: none;
        }
        
        .is-invalid {
            border-color: var(--danger) !important;
        }
        
        .is-invalid ~ .error-message {
            display: block;
        }
        
        @media (max-width: 992px) {
            .filter-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .toggle-buttons {
                justify-content: center;
                margin-bottom: 1rem;
            }
            
            .custom-table {
                overflow-x: auto;
            }
        }
        
        @media (max-width: 768px) {
            .dashboard-container {
                padding: 1rem;
            }
            
            .search-wrapper {
                padding: 1.2rem;
            }
            
            .toggle-btn {
                min-width: 140px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>

<div class="dashboard-container">
    <div class="content-header">
        <h2>Product Management</h2>
    </div>

    <div class="search-wrapper">
        <div class="filter-controls">
            <div class="toggle-buttons">
                <button class="toggle-btn <%= !isBlocked ? 'active' : '' %>" id="availableProductsBtn">
                    <i class="fas fa-box-open"></i> Available Products
                </button>
                <button class="toggle-btn <%= isBlocked ? 'active' : '' %>" id="blockedProductsBtn">
                    <i class="fas fa-ban"></i> Blocked Products
                </button>
            </div>
            <div class="search-input-container">
                <div class="search-input">
                    <input type="text" placeholder="Search products or brands..." id="searchInput" value="<%= search %>">
                    <button class="clear-search-btn" id="clearSearchBtn">
                        <i class="fas fa-times-circle"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="custom-table">
        <table class="table table-borderless mb-0">
            <thead>
                <tr>
                    <th scope="col">PRODUCT NAME</th>
                    <th scope="col">BRAND</th>
                    <th scope="col">CATEGORY</th>
                    <th scope="col">REGULAR PRICE</th>
                    <th scope="col">OFFER PRICE</th>
                    <th scope="col">QUANTITY</th>
                    <th scope="col">OFFER</th>
                    <th scope="col">ACTION</th>
                    <th scope="col">EDIT</th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                <% if(data.length === 0) { %>
                <tr>
                    <td colspan="9">
                        <div class="no-results">
                            <i class="fas fa-search"></i>
                            <h4>No products found</h4>
                            <p>Try adjusting your search or filters to find what you're looking for.</p>
                        </div>
                    </td>
                </tr>
                <% } else { %>
                <% for (let i = 0; i < data.length; i++) { %>
                <tr>
                    <td><strong><%= data[i].productName %></strong></td>
                    <td><%= data[i].brand.brandName %></td>
                    <td><%= data[i].category.name %></td>
                    <td><span class="price-tag <%= data[i].salePrice > 0 ? 'regular-price' : '' %>">₹<%= data[i].regularPrice %></span></td>
                    <td>
                        <% if (data[i].salePrice > 0) { %>
                            <span class="price-tag sale-price">₹<%= data[i].salePrice %></span>
                        <% } else { %>
                            <span>No Offer</span>
                        <% } %>
                    </td>
                    <td>
                        <% 
                        let quantityClass = "medium-quantity";
                        if(data[i].quantity > 50) quantityClass = "high-quantity";
                        if(data[i].quantity < 10) quantityClass = "low-quantity";
                        %>
                        <span class="quantity-badge <%= quantityClass %>"><%= data[i].quantity %></span>
                    </td>
                    <td>
                        <button class="action-btn offer-btn w-100" 
                                data-bs-toggle="modal" 
                                data-bs-target="#addOfferModal"
                                data-product-id="<%= data[i]._id %>"
                                data-product-name="<%= data[i].productName %>"
                                data-regular-price="<%= data[i].regularPrice %>"
                                data-current-offer="<%= data[i].offer ? JSON.stringify(data[i].offer) : '' %>">
                            <i class="fas fa-tag fa-sm"></i> 
                            <%= data[i].offer && new Date(data[i].offer.endDate) >= new Date() ? 'Edit Offer' : 'Add Offer' %>
                        </button>
                    </td>
                    <td>
                        <% if(data[i].isBlocked === false) { %>
                        <button class="action-btn block-btn w-100" data-product-id="<%= data[i]._id %>" data-action="block">
                            <i class="fas fa-ban fa-sm"></i> Block
                        </button>
                        <% } else { %>
                        <button class="action-btn unblock-btn w-100" data-product-id="<%= data[i]._id %>" data-action="unblock">
                            <i class="fas fa-check-circle fa-sm"></i> Unblock
                        </button>
                        <% } %>
                    </td>
                    <td>
                        <button class="action-btn edit-btn w-100">
                            <a href="/admin/editProduct?id=<%= data[i]._id %>" class="text-white" style="text-decoration: none;">
                                <i class="fas fa-edit fa-sm"></i> Edit
                            </a>
                        </button>
                    </td>
                </tr>
                <% } %>
                <% } %>
            </tbody>
        </table>
    </div>

    <div class="container mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center" id="pagination">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="<%= currentPage - 1 %>">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="<%= currentPage + 1 %>">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>

    <!-- Add/Edit Offer Modal -->
    <div class="modal fade" id="addOfferModal" tabindex="-1" aria-labelledby="addOfferModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addOfferModalLabel"><span id="offerAction">Add</span> Offer for <span id="productName"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="offerForm">
                        <div class="mb-3">
                            <label for="productNameInput" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productNameInput" name="productName" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="regularPrice" class="form-label">Regular Price</label>
                            <input type="text" class="form-control" id="regularPrice" name="regularPrice" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="discountValue" class="form-label">Discount Percentage (%)</label>
                            <input type="number" class="form-control" id="discountValue" name="discountValue" min="0" max="100" step="1">
                            <div class="error-message" id="discountValueError"></div>
                        </div>
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date</label>
                            <input type="date" class="form-control" id="startDate" name="startDate">
                            <div class="error-message" id="startDateError"></div>
                        </div>
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="endDate" name="endDate">
                            <div class="error-message" id="endDateError"></div>
                        </div>
                        <input type="hidden" id="productId" name="productId">
                        <input type="hidden" id="offerId" name="offerId">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger cancel-offer-btn" id="cancelOfferBtn" style="display: none;">Cancel Offer</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="saveOfferBtn">Save Offer</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Function to load a page dynamically
    async function loadPage(page, search = '', isBlocked = false) {
        try {
            const tbody = document.querySelector('#productTableBody');
            tbody.innerHTML = '<tr><td colspan="9" class="text-center py-5"><div class="spinner-border loading-pulse" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';

            let url = `/admin/products?page=${page}&format=json`;
            if (search) url += `&search=${encodeURIComponent(search)}`;
            if (isBlocked) url += '&blocked=true';

            const response = await fetch(url, {
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Failed to load page');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Failed to load data');
            }

            // Update table body
            if (data.data.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9">
                            <div class="no-results">
                                <i class="fas fa-search"></i>
                                <h4>No products found</h4>
                                <p>Try adjusting your search or filters to find what you're looking for.</p>
                            </div>
                        </td>
                    </tr>
                `;
            } else {
                tbody.innerHTML = data.data.map(product => {
                    let quantityClass = "medium-quantity";
                    if (product.quantity > 50) quantityClass = "high-quantity";
                    if (product.quantity < 10) quantityClass = "low-quantity";
                    
                    const isOfferActive = product.offer && new Date(product.offer.endDate) >= new Date();
                    
                    return `
                        <tr>
                            <td><strong>${product.productName}</strong></td>
                            <td>${product.brand.brandName}</td>
                            <td>${product.category.name}</td>
                            <td><span class="price-tag ${product.salePrice > 0 ? 'regular-price' : ''}">₹${product.regularPrice}</span></td>
                            <td>
                                ${product.salePrice > 0 ? `<span class="price-tag sale-price">₹${product.salePrice}</span>` : '<span>No Offer</span>'}
                            </td>
                            <td>
                                <span class="quantity-badge ${quantityClass}">${product.quantity}</span>
                            </td>
                            <td>
                                <button class="action-btn offer-btn w-100" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#addOfferModal"
                                        data-product-id="${product._id}"
                                        data-product-name="${product.productName}"
                                        data-regular-price="${product.regularPrice}"
                                        data-current-offer='${product.offer ? JSON.stringify(product.offer) : ''}'>
                                    <i class="fas fa-tag fa-sm"></i> ${isOfferActive ? 'Edit Offer' : 'Add Offer'}
                                </button>
                            </td>
                            <td>
                                ${product.isBlocked ?
                                    `<button class="action-btn unblock-btn w-100" data-product-id="${product._id}" data-action="unblock">
                                        <i class="fas fa-check-circle fa-sm"></i> Unblock
                                    </button>` :
                                    `<button class="action-btn block-btn w-100" data-product-id="${product._id}" data-action="block">
                                        <i class="fas fa-ban fa-sm"></i> Block
                                    </button>`
                                }
                            </td>
                            <td>
                                <button class="action-btn edit-btn w-100">
                                    <a href="/admin/editProduct?id=${product._id}" class="text-white" style="text-decoration: none;">
                                        <i class="fas fa-edit fa-sm"></i> Edit
                                    </a>
                                </button>
                            </td>
                        </tr>
                    `;
                }).join('');
            }

            // Update pagination
            const pagination = document.querySelector('#pagination');
            pagination.innerHTML = '';
            if (data.currentPage > 1) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${data.currentPage - 1}">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                `;
            }
            for (let i = 1; i <= data.totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === data.currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            }
            if (data.currentPage < data.totalPages) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${data.currentPage + 1}">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                `;
            }

            // Update button styles
            const availableBtn = document.querySelector('#availableProductsBtn');
            const blockedBtn = document.querySelector('#blockedProductsBtn');
            availableBtn.className = `toggle-btn ${!isBlocked ? 'active' : ''}`;
            blockedBtn.className = `toggle-btn ${isBlocked ? 'active' : ''}`;

            // Update browser URL
            const newUrl = `/admin/products?page=${page}${search ? '&search=' + encodeURIComponent(search) : ''}${isBlocked ? '&blocked=true' : ''}`;
            history.pushState({ page, search, isBlocked }, '', newUrl);

            // Update clear button visibility
            updateClearButtonVisibility();

            // Re-attach event listeners
            attachPaginationListeners();
            attachBlockUnblockListeners();
            attachOfferModalListeners();

        } catch (error) {
            console.error('Error loading page:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Failed to load page. Please try again.',
                timer: 3000,
                showConfirmButton: false
            });
            tbody.innerHTML = `
                <tr>
                    <td colspan="9">
                        <div class="no-results">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>Error loading data</h4>
                            <p>There was a problem fetching the products. Please try again later.</p>
                        </div>
                    </td>
                </tr>
            `;
        }
    }

    // Function to attach pagination event listeners
    function attachPaginationListeners() {
        const links = document.querySelectorAll('.pagination .page-link');
        links.forEach(link => {
            link.removeEventListener('click', handlePaginationClick); // Remove existing listeners
            link.addEventListener('click', handlePaginationClick);
        });
    }

    function handlePaginationClick(e) {
        e.preventDefault();
        const page = this.getAttribute('data-page');
        const search = document.querySelector('#searchInput').value;
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(page, search, isBlocked);
    }

    // Function to attach block/unblock event listeners
    function attachBlockUnblockListeners() {
        const blockButtons = document.querySelectorAll('.block-btn');
        const unblockButtons = document.querySelectorAll('.unblock-btn');

        blockButtons.forEach(button => {
            button.removeEventListener('click', handleBlockClick); // Remove existing listeners
            button.addEventListener('click', handleBlockClick);
        });

        unblockButtons.forEach(button => {
            button.removeEventListener('click', handleUnblockClick); // Remove existing listeners
            button.addEventListener('click', handleUnblockClick);
        });
    }

    async function handleBlockClick(e) {
        e.preventDefault();
        const productId = this.getAttribute('data-product-id');
        const row = this.closest('tr');
        const button = this;

        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to block this product?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e63946',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, block it!',
            cancelButtonText: 'Cancel'
        });

        if (result.isConfirmed) {
            try {
                button.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Processing...';
                button.disabled = true;
                
                const response = await fetch('/admin/blockProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'application/json'
                    },
                    body: `id=${productId}`
                });

                const data = await response.json();
                if (data.success) {
                    const actionCell = row.querySelector('td:nth-child(8)');
                    actionCell.innerHTML = `
                        <button class="action-btn unblock-btn w-100" data-product-id="${productId}" data-action="unblock">
                            <i class="fas fa-check-circle fa-sm"></i> Unblock
                        </button>
                    `;
                    attachBlockUnblockListeners();
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Product has been blocked successfully',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    if (!window.location.href.includes('blocked=true')) {
                        setTimeout(() => {
                            row.style.opacity = '0';
                            setTimeout(() => row.remove(), 500);
                        }, 1000);
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to block product',
                        timer: 3000,
                        showConfirmButton: false
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to block product. Please try again.',
                    timer: 3000,
                    showConfirmButton: false
                });
            } finally {
                button.innerHTML = '<i class="fas fa-ban fa-sm"></i> Block';
                button.disabled = false;
            }
        }
    }

    async function handleUnblockClick(e) {
        e.preventDefault();
        const productId = this.getAttribute('data-product-id');
        const row = this.closest('tr');
        const button = this;

        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to unblock this product?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#2ec4b6',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, unblock it!',
            cancelButtonText: 'Cancel'
        });

        if (result.isConfirmed) {
            try {
                button.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Processing...';
                button.disabled = true;
                
                const response = await fetch('/admin/unblockProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Accept': 'application/json'
                    },
                    body: `id=${productId}`
                });

                const data = await response.json();
                if (data.success) {
                    const actionCell = row.querySelector('td:nth-child(8)');
                    actionCell.innerHTML = `
                        <button class="action-btn block-btn w-100" data-product-id="${productId}" data-action="block">
                            <i class="fas fa-ban fa-sm"></i> Block
                        </button>
                    `;
                    attachBlockUnblockListeners();
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Product has been unblocked successfully',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    if (window.location.href.includes('blocked=true')) {
                        setTimeout(() => {
                            row.style.opacity = '0';
                            setTimeout(() => row.remove(), 500);
                        }, 1000);
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to unblock product',
                        timer: 3000,
                        showConfirmButton: false
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to unblock product. Please try again.',
                    timer: 3000,
                    showConfirmButton: false
                });
            } finally {
                button.innerHTML = '<i class="fas fa-check-circle fa-sm"></i> Unblock';
                button.disabled = false;
            }
        }
    }

    // Function to validate offer form
    function validateOfferForm() {
        let isValid = true;
        const discountValue = document.getElementById('discountValue');
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        
        // Reset error states
        [discountValue, startDate, endDate].forEach(input => {
            input.classList.remove('is-invalid');
            document.getElementById(`${input.id}Error`).textContent = '';
        });

        // Validate discount value
        const discount = parseFloat(discountValue.value);
        if (isNaN(discount) || discount <= 0) {
            discountValue.classList.add('is-invalid');
            document.getElementById('discountValueError').textContent = 'Discount percentage is required and must be greater than 0';
            isValid = false;
        } else if (discount > 100) {
            discountValue.classList.add('is-invalid');
            document.getElementById('discountValueError').textContent = 'Discount percentage cannot exceed 100%';
            isValid = false;
        }

        // Validate start date
        const start = new Date(startDate.value);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        if (!startDate.value) {
            startDate.classList.add('is-invalid');
            document.getElementById('startDateError').textContent = 'Start date is required';
            isValid = false;
        } else if (start < today) {
            startDate.classList.add('is-invalid');
            document.getElementById('startDateError').textContent = 'Start date cannot be in the past';
            isValid = false;
        }

        // Validate end date
        const end = new Date(endDate.value);
        if (!endDate.value) {
            endDate.classList.add('is-invalid');
            document.getElementById('endDateError').textContent = 'End date is required';
            isValid = false;
        } else if (end <= start) {
            endDate.classList.add('is-invalid');
            document.getElementById('endDateError').textContent = 'End date must be after start date';
            isValid = false;
        }

        return isValid;
    }

    // Function to attach offer modal event listeners
    function attachOfferModalListeners() {
        const offerButtons = document.querySelectorAll('.offer-btn');
        const offerModal = document.getElementById('addOfferModal');
        const productNameSpan = document.getElementById('productName');
        const productNameInput = document.getElementById('productNameInput');
        const regularPriceInput = document.getElementById('regularPrice');
        const discountValue = document.getElementById('discountValue');
        const startDate = document.getElementById('startDate');
        const endDate = document.getElementById('endDate');
        const productIdInput = document.getElementById('productId');
        const offerIdInput = document.getElementById('offerId');
        const saveOfferBtn = document.getElementById('saveOfferBtn');
        const cancelOfferBtn = document.getElementById('cancelOfferBtn');
        const offerAction = document.getElementById('offerAction');

        offerButtons.forEach(button => {
            button.removeEventListener('click', handleOfferButtonClick); // Remove existing listeners
            button.addEventListener('click', handleOfferButtonClick);
        });

        function handleOfferButtonClick() {
            const productId = this.getAttribute('data-product-id');
            const productName = this.getAttribute('data-product-name');
            const regularPrice = this.getAttribute('data-regular-price');
            const currentOffer = this.getAttribute('data-current-offer');

            // Reset form
            [discountValue, startDate, endDate].forEach(input => {
                input.value = '';
                input.classList.remove('is-invalid');
                document.getElementById(`${input.id}Error`).textContent = '';
            });

            productNameSpan.textContent = productName;
            productNameInput.value = productName;
            regularPriceInput.value = `₹${regularPrice}`;
            productIdInput.value = productId;
            offerIdInput.value = '';

            if (currentOffer) {
                const offer = JSON.parse(currentOffer);
                if (new Date(offer.endDate) >= new Date()) {
                    offerAction.textContent = 'Edit';
                    discountValue.value = offer.discountValue;
                    startDate.value = new Date(offer.startDate).toISOString().split('T')[0];
                    endDate.value = new Date(offer.endDate).toISOString().split('T')[0];
                    offerIdInput.value = offer._id;
                    cancelOfferBtn.style.display = 'inline-block'; // Show Cancel Offer button
                } else {
                    offerAction.textContent = 'Add';
                    cancelOfferBtn.style.display = 'none'; // Hide Cancel Offer button
                }
            } else {
                offerAction.textContent = 'Add';
                cancelOfferBtn.style.display = 'none'; // Hide Cancel Offer button
            }
        }

        // Remove existing listener for save button
        saveOfferBtn.removeEventListener('click', handleSaveOfferClick);
        saveOfferBtn.addEventListener('click', handleSaveOfferClick);

        async function handleSaveOfferClick() {
            if (!validateOfferForm()) {
                return;
            }

            const productId = productIdInput.value;
            const discountValue = parseFloat(document.getElementById('discountValue').value);
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const offerId = offerIdInput.value;
            const regularPrice = parseFloat(regularPriceInput.value.replace('₹', ''));

            try {
                saveOfferBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Saving...';
                saveOfferBtn.disabled = true;

                let url, payload;
                if (offerId) {
                    // Editing existing offer
                    url = '/admin/offers/assign';
                    payload = {
                        productId,
                        offerId,
                        discountValue,
                        startDate,
                        endDate,
                        regularPrice
                    };
                } else {
                    // Creating new offer
                    url = '/admin/offers/create';
                    payload = {
                        productId,
                        name: `Offer for ${productNameInput.value}`,
                        discountType: 'percentage',
                        discountValue,
                        startDate,
                        endDate,
                        regularPrice
                    };
                }

                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const data = await response.json();
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: offerId ? 'Offer updated successfully' : 'Offer added successfully',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        // Force close modal and remove backdrop
                        const modal = bootstrap.Modal.getInstance(offerModal);
                        if (modal) {
                            modal.hide();
                            document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
                            document.body.classList.remove('modal-open');
                            document.body.style = '';
                        }
                        // Reload page
                        const search = document.querySelector('#searchInput').value;
                        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
                        loadPage(1, search, isBlocked);
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to save offer',
                        timer: 3000,
                        showConfirmButton: false
                    });
                }
            } catch (error) {
                console.error('Error saving offer:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to save offer. Please try again.',
                    timer: 3000,
                    showConfirmButton: false
                });
            } finally {
                saveOfferBtn.innerHTML = 'Save Offer';
                saveOfferBtn.disabled = false;
            }
        }

        // Add event listener for Cancel Offer button
        cancelOfferBtn.removeEventListener('click', handleCancelOfferClick);
        cancelOfferBtn.addEventListener('click', handleCancelOfferClick);

        async function handleCancelOfferClick() {
            const productId = productIdInput.value;

            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to cancel this offer for the product?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#e63946',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, cancel it!',
                cancelButtonText: 'No'
            });

            if (result.isConfirmed) {
                try {
                    cancelOfferBtn.innerHTML = '<i class="fas fa-circle-notch fa-spin"></i> Cancelling...';
                    cancelOfferBtn.disabled = true;

                    const response = await fetch('/admin/offers/remove', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ productId })
                    });

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Offer cancelled successfully',
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            // Force close modal and remove backdrop
                            const modal = bootstrap.Modal.getInstance(offerModal);
                            if (modal) {
                                modal.hide();
                                document.querySelectorAll('.modal-backdrop').forEach(backdrop => backdrop.remove());
                                document.body.classList.remove('modal-open');
                                document.body.style = '';
                            }
                            // Reload page
                            const search = document.querySelector('#searchInput').value;
                            const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
                            loadPage(1, search, isBlocked);
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: data.message || 'Failed to cancel offer',
                            timer: 3000,
                            showConfirmButton: false
                        });
                    }
                } catch (error) {
                    console.error('Error cancelling offer:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'Failed to cancel offer. Please try again.',
                        timer: 3000,
                        showConfirmButton: false
                    });
                } finally {
                    cancelOfferBtn.innerHTML = 'Cancel Offer';
                    cancelOfferBtn.disabled = false;
                }
            }
        }
    }

    // Update the clear button visibility based on search input
    function updateClearButtonVisibility() {
        const searchInput = document.querySelector('#searchInput');
        const clearButton = document.querySelector('#clearSearchBtn');
        
        if (searchInput.value.trim() !== '') {
            clearButton.style.display = 'block';
        } else {
            clearButton.style.display = 'none';
        }
    }

    // Function to clear search and reset results
    function clearSearch() {
        const searchInput = document.querySelector('#searchInput');
        searchInput.value = '';
        updateClearButtonVisibility();
        
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(1, '', isBlocked);
    }

    // Add loading animation to buttons
    function addLoadingToButton(button, text) {
        const originalContent = button.innerHTML;
        button.innerHTML = `<i class="fas fa-circle-notch fa-spin"></i> ${text}`;
        button.disabled = true;
        return () => {
            button.innerHTML = originalContent;
            button.disabled = false;
        };
    }

    // Initial setup
    const searchInput = document.querySelector('#searchInput');
    const clearSearchBtn = document.querySelector('#clearSearchBtn');

    // Create debounced search function
    const debouncedSearch = debounce(function(value) {
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(1, value, isBlocked);
    }, 500);

    // Add event listener to search input
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            updateClearButtonVisibility();
            debouncedSearch(this.value);
        });
        
        // Initial visibility check
        updateClearButtonVisibility();
    }

    // Add event listener to clear button
    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            clearSearch();
            searchInput.focus();
        });
    }

    // Handle Available/Blocked Products buttons
    document.querySelector('#availableProductsBtn').addEventListener('click', function() {
        if (this.classList.contains('active')) return;
        
        const resetBlockedBtn = addLoadingToButton(this, 'Loading...');
        
        const search = searchInput ? searchInput.value : '';
        loadPage(1, search, false).then(resetBlockedBtn);
    });

    document.querySelector('#blockedProductsBtn').addEventListener('click', function() {
        if (this.classList.contains('active')) return;
        
        const resetBlockedBtn = addLoadingToButton(this, 'Loading...');
        
        const search = searchInput ? searchInput.value : '';
        loadPage(1, search, true).then(resetBlockedBtn);
    });

    // Add keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
            setTimeout(() => {
                searchInput.focus();
            }, 100);
        }
        
        if (e.key === 'Escape' && document.activeElement === searchInput && searchInput.value !== '') {
            clearSearch();
            e.preventDefault();
        }
    });

    // Initialize event listeners
    attachPaginationListeners();
    attachBlockUnblockListeners();
    attachOfferModalListeners();

    // Handle popstate for browser back/forward
    window.addEventListener('popstate', function(event) {
        const state = event.state;
        if (state) {
            if (searchInput) searchInput.value = state.search || '';
            updateClearButtonVisibility();
            loadPage(state.page, state.search || '', state.isBlocked || false);
        }
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>