<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .dashboard-container {
            padding: 2rem;
            background: #f8f9fa;
        }
        .content-header h2 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 1.5rem;
        }
        .search-wrapper {
            background: white;
            border-radius: 15px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.05);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }
        /* Improved search area */
        .filter-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        .toggle-buttons {
            display: flex;
            gap: 10px;
        }
        .search-input-container {
            flex-grow: 1;
            max-width: 100%;
            position: relative;
        }
        .search-input {
            width: 100%;
            position: relative;
        }
        .search-input input {
            width: 100%;
            padding: 0.75rem 1rem;
            border-radius: 30px;
            border: 1px solid #e0e0e0;
            font-size: 1rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.03);
            padding-right: 40px;
        }
        .clear-search-btn {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            font-size: 16px;
        }
        .clear-search-btn:hover {
            color: #e74c3c;
        }
        /* Table styles */
        .custom-table {
            background: white;
            border-radius: 15px;
            box-shadow: 0 2px 15px rgba(0,0,0,0.05);
            overflow: hidden;
        }
        .custom-table thead {
            background: #f8f9fa;
        }
        .custom-table th {
            font-weight: 600;
            color: #2c3e50;
            padding: 1rem;
            border-bottom: 2px solid #eee;
        }
        .custom-table td {
            padding: 1rem;
            vertical-align: middle;
        }
        .custom-table tr:hover {
            background: #f8f9fa;
        }
        .action-btn {
            border-radius: 8px;
            padding: 0.5rem 1rem;
            transition: all 0.2s;
            font-weight: 500;
            border: none;
        }
        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .offer-btn {
            background: #3498db;
            color: white;
        }
        .block-btn {
            background: #e74c3c;
            color: white;
        }
        .unblock-btn {
            background: #2ecc71;
            color: white;
        }
        .edit-btn {
            background: #9b59b6;
            color: white;
        }
        .pagination {
            margin-top: 2rem;
        }
        .pagination .page-link {
            border-radius: 8px;
            margin: 0 3px;
            border: none;
            color: #2c3e50;
            cursor: pointer;
        }
        .pagination .active .page-link {
            background: #3498db;
            color: white;
        }
        tr {
            transition: opacity 0.5s ease;
        }
        .spinner-border {
            width: 2rem;
            height: 2rem;
        }
        /* Enhanced toggle buttons */
        .toggle-btn {
            border-radius: 25px;
            min-width: 140px;
            padding: 0.6rem 1.2rem;
            font-weight: 500;
            transition: all 0.3s;
            border: 2px solid #3498db;
        }
        .toggle-btn.active {
            background: #3498db;
            color: white;
        }
        .toggle-btn:not(.active) {
            background: white;
            color: #3498db;
        }
        .toggle-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(52, 152, 219, 0.2);
        }
    </style>
</head>

<div class="dashboard-container">
    <div class="content-header">
        <h2>Product Management</h2>
    </div>

    <div class="search-wrapper">
        <div class="filter-controls">
            <div class="toggle-buttons">
                <button class="toggle-btn <%= !isBlocked ? 'active' : '' %>" id="availableProductsBtn">
                    <i class="fas fa-box-open mr-2"></i> Available Products
                </button>
                <button class="toggle-btn <%= isBlocked ? 'active' : '' %>" id="blockedProductsBtn">
                    <i class="fas fa-ban mr-2"></i> Blocked Products
                </button>
            </div>
            <div class="search-input-container">
                <div class="search-input">
                    <input type="text" placeholder="Search products or brands..." id="searchInput" value="<%= search %>">
                    <button class="clear-search-btn" id="clearSearchBtn">
                        <i class="fas fa-times-circle"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="custom-table">
        <table class="table table-borderless mb-0">
            <thead>
                <tr>
                    <th scope="col"><b>Product name</b></th>
                    <th scope="col"><b>Brand</b></th>
                    <th scope="col"><b>Category</b></th>
                    <th scope="col"><b>Sale Price</b></th>
                    <th scope="col"><b>Offer Price</b></th>
                    <th scope="col"><b>Quantity</b></th>
                    <th scope="col"><b>Offer</b></th>
                    <th scope="col"><b>Action</b></th>
                    <th scope="col"><b>Edit</b></th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                <% for (let i = 0; i < data.length; i++) { %>
                <tr>
                    <td><%= data[i].productName %></td>
                    <td><%= data[i].brand.brandName %></td>
                    <td><%= data[i].category.name %></td>
                    <td><%= data[i].regularPrice %></td>
                    <td><%= data[i].salePrice %></td>
                    <td><%= data[i].quantity %></td>
                    <td>
                        <button class="action-btn offer-btn w-100">Add Offer</button>
                    </td>
                    <td>
                        <% if(data[i].isBlocked === false) { %>
                        <button class="action-btn block-btn w-100" data-product-id="<%= data[i]._id %>" data-action="block">Block</button>
                        <% } else { %>
                        <button class="action-btn unblock-btn w-100" data-product-id="<%= data[i]._id %>" data-action="unblock">Unblock</button>
                        <% } %>
                    </td>
                    <td>
                        <button class="action-btn edit-btn w-100">
                            <a href="/admin/editProduct?id=<%= data[i]._id %>" class="text-white" style="text-decoration: none;">Edit</a>
                        </button>
                    </td>
                </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <div class="container mt-3">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mb-20" id="pagination">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="<%= currentPage - 1 %>">Previous</a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="#" data-page="<%= i %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="<%= currentPage + 1 %>">Next</a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Function to load a page dynamically
    async function loadPage(page, search = '', isBlocked = false) {
        try {
            const tbody = document.querySelector('#productTableBody');
            tbody.innerHTML = '<tr><td colspan="9" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';

            let url = `/admin/products?page=${page}&format=json`;
            if (search) url += `&search=${encodeURIComponent(search)}`;
            if (isBlocked) url += '&blocked=true';

            const response = await fetch(url, {
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('Failed to load page');
            }

            const data = await response.json();
            if (!data.success) {
                throw new Error(data.message || 'Failed to load data');
            }

            // Update table body
            tbody.innerHTML = data.data.map(product => `
                <tr>
                    <td>${product.productName}</td>
                    <td>${product.brand.brandName}</td>
                    <td>${product.category.name}</td>
                    <td>${product.regularPrice}</td>
                    <td>${product.salePrice}</td>
                    <td>${product.quantity}</td>
                    <td>
                        <button class="action-btn offer-btn w-100">Add Offer</button>
                    </td>
                    <td>
                        ${product.isBlocked ?
                            `<button class="action-btn unblock-btn w-100" data-product-id="${product._id}" data-action="unblock">Unblock</button>` :
                            `<button class="action-btn block-btn w-100" data-product-id="${product._id}" data-action="block">Block</button>`
                        }
                    </td>
                    <td>
                        <button class="action-btn edit-btn w-100">
                            <a href="/admin/editProduct?id=${product._id}" class="text-white" style="text-decoration: none;">Edit</a>
                        </button>
                    </td>
                </tr>
            `).join('');

            // Update pagination
            const pagination = document.querySelector('#pagination');
            pagination.innerHTML = '';
            if (data.currentPage > 1) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${data.currentPage - 1}">Previous</a>
                    </li>
                `;
            }
            for (let i = 1; i <= data.totalPages; i++) {
                pagination.innerHTML += `
                    <li class="page-item ${i === data.currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            }
            if (data.currentPage < data.totalPages) {
                pagination.innerHTML += `
                    <li class="page-item">
                        <a class="page-link" href="#" data-page="${data.currentPage + 1}">Next</a>
                    </li>
                `;
            }

            // Update button styles
            const availableBtn = document.querySelector('#availableProductsBtn');
            const blockedBtn = document.querySelector('#blockedProductsBtn');
            availableBtn.className = `toggle-btn ${!isBlocked ? 'active' : ''}`;
            blockedBtn.className = `toggle-btn ${isBlocked ? 'active' : ''}`;

            // Re-attach event listeners
            attachPaginationListeners();
            attachBlockUnblockListeners();

            // Update browser URL
            const newUrl = `/admin/products?page=${page}${search ? '&search=' + encodeURIComponent(search) : ''}${isBlocked ? '&blocked=true' : ''}`;
            history.pushState({ page, search, isBlocked }, '', newUrl);

            // Update clear button visibility
            updateClearButtonVisibility();

        } catch (error) {
            console.error('Error loading page:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: 'Failed to load page. Please try again.',
                timer: 3000,
                showConfirmButton: false
            });
            tbody.innerHTML = '<tr><td colspan="9" class="text-center">Error loading data</td></tr>';
        }
    }

    // Function to attach pagination event listeners
    function attachPaginationListeners() {
        document.querySelectorAll('.pagination .page-link').forEach(link => {
            link.addEventListener('click', async function(e) {
                e.preventDefault();
                const page = this.getAttribute('data-page');
                const search = document.querySelector('#searchInput').value;
                const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
                await loadPage(page, search, isBlocked);
            });
        });
    }

    // Function to attach block/unblock event listeners
    function attachBlockUnblockListeners() {
        // Block product
        document.querySelectorAll('.block-btn').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');
                const row = this.closest('tr');

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to block this product?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, block it!'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/admin/blockProduct', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: `id=${productId}`
                        });

                        const data = await response.json();
                        if (data.success) {
                            const actionCell = row.querySelector('td:nth-child(8)');
                            actionCell.innerHTML = `
                                <button class="action-btn unblock-btn w-100" data-product-id="${productId}" data-action="unblock">Unblock</button>
                            `;
                            attachBlockUnblockListeners();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Product has been blocked successfully',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            if (!window.location.href.includes('blocked=true')) {
                                setTimeout(() => {
                                    row.style.opacity = '0';
                                    setTimeout(() => row.remove(), 500);
                                }, 1000);
                            }
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: data.message || 'Failed to block product',
                                timer: 3000,
                                showConfirmButton: false
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to block product. Please try again.',
                            timer: 3000,
                            showConfirmButton: false
                        });
                    }
                }
            });
        });

        // Unblock product
        document.querySelectorAll('.unblock-btn').forEach(button => {
            button.addEventListener('click', async function(e) {
                e.preventDefault();
                const productId = this.getAttribute('data-product-id');
                const row = this.closest('tr');

                const result = await Swal.fire({
                    title: 'Are you sure?',
                    text: "Do you want to unblock this product?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, unblock it!'
                });

                if (result.isConfirmed) {
                    try {
                        const response = await fetch('/admin/unblockProduct', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'Accept': 'application/json'
                            },
                            body: `id=${productId}`
                        });

                        const data = await response.json();
                        if (data.success) {
                            const actionCell = row.querySelector('td:nth-child(8)');
                            actionCell.innerHTML = `
                                <button class="action-btn block-btn w-100" data-product-id="${productId}" data-action="block">Block</button>
                            `;
                            attachBlockUnblockListeners();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Product has been unblocked successfully',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            if (window.location.href.includes('blocked=true')) {
                                setTimeout(() => {
                                    row.style.opacity = '0';
                                    setTimeout(() => row.remove(), 500);
                                }, 1000);
                            }
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error!',
                                text: data.message || 'Failed to unblock product',
                                timer: 3000,
                                showConfirmButton: false
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to unblock product. Please try again.',
                            timer: 3000,
                            showConfirmButton: false
                        });
                    }
                }
            });
        });
    }

    // Update the clear button visibility based on search input
    function updateClearButtonVisibility() {
        const searchInput = document.querySelector('#searchInput');
        const clearButton = document.querySelector('#clearSearchBtn');
        
        if (searchInput.value.trim() !== '') {
            clearButton.style.display = 'block';
        } else {
            clearButton.style.display = 'none';
        }
    }

    // Function to clear search and reset results
    function clearSearch() {
        const searchInput = document.querySelector('#searchInput');
        searchInput.value = '';
        updateClearButtonVisibility();
        
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(1, '', isBlocked);
    }

    // Initial setup
    const searchInput = document.querySelector('#searchInput');
    const clearSearchBtn = document.querySelector('#clearSearchBtn');

    // Create debounced search function
    const debouncedSearch = debounce(function(value) {
        const isBlocked = document.querySelector('#blockedProductsBtn').classList.contains('active');
        loadPage(1, value, isBlocked);
    }, 500);

    // Add event listener to search input
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            updateClearButtonVisibility();
            debouncedSearch(this.value);
        });
        
        // Initial visibility check
        updateClearButtonVisibility();
    }

    // Add event listener to clear button
    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            clearSearch();
            searchInput.focus();
        });
    }

    // Handle Available/Blocked Products buttons
    document.querySelector('#availableProductsBtn').addEventListener('click', function() {
        const search = searchInput ? searchInput.value : '';
        loadPage(1, search, false);
    });

    document.querySelector('#blockedProductsBtn').addEventListener('click', function() {
        const search = searchInput ? searchInput.value : '';
        loadPage(1, search, true);
    });

    // Initialize event listeners
    attachPaginationListeners();
    attachBlockUnblockListeners();

    // Handle popstate for browser back/forward
    window.addEventListener('popstate', function(event) {
        const state = event.state;
        if (state) {
            if (searchInput) searchInput.value = state.search || '';
            updateClearButtonVisibility();
            loadPage(state.page, state.search || '', state.isBlocked || false);
        }
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>