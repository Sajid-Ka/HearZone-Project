<%- include("../../views/partials/admin/header") %>
<head>
<style>
    .content-main {
        padding: 30px;
        background: #f8f9fa;
    }
    
    .card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 0 20px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

    .card:hover {
        box-shadow: 0 0 30px rgba(0,0,0,0.1);
    }

    .card-header {
        background: #fff;
        border-radius: 15px 15px 0 0 !important;
        border-bottom: 1px solid #eee;
    }

    .form-control, .form-select {
        border-radius: 10px;
        padding: 12px;
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.1);
        border-color: #0d6efd;
    }

    .btn {
        padding: 12px 25px;
        border-radius: 10px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: #0d6efd;
        border: none;
    }

    .btn-primary:hover {
        background: #0b5ed7;
        transform: translateY(-2px);
    }

    .thumbnails-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
        padding: 15px;
    }

    .thumbnail {
        position: relative;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .thumbnail img {
        width: 100%;
        height: 150px;
        object-fit: cover;
    }

    .image-input-container {
        position: relative;
        margin-bottom: 20px;
    }

    .image-preview {
        width: 100%;
        height: 200px;
        border-radius: 10px;
        object-fit: cover;
        margin-bottom: 10px;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
        display: none;
    }

    .content-header h2 {
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 30px;
    }

    .form-label {
        font-weight: 500;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .image-cropper {
        background: #fff;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
    }

    .image-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
        padding: 15px;
    }

    .image-item {
        position: relative;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        aspect-ratio: 1;
    }

    .image-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .image-item:hover img {
        transform: scale(1.05);
    }

    .image-actions {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .image-item:hover .image-actions {
        opacity: 1;
    }

    .remove-image-btn {
        background: #dc3545;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .remove-image-btn:hover {
        background: #c82333;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }

    .add-image-btn {
        border: 2px dashed #dee2e6;
        background: #f8f9fa;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        aspect-ratio: 1;
        transition: all 0.3s ease;
    }

    .add-image-btn:hover {
        border-color: #0d6efd;
        background: #e7f1ff;
    }

    .add-image-btn i {
        font-size: 24px;
        color: #6c757d;
    }

    .change-image-btn {
        background: #17a2b8;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        transition: transform 0.2s ease;
        margin-left: 8px;
    }

    .change-image-btn:hover {
        transform: scale(1.1);
        background: #138496;
    }

    .image-actions {
        gap: 10px;
    }

    .crop-btn {
        background: #28a745;
        margin-left: 5px;
    }

    .crop-btn:hover {
        background: #218838;
    }

    .btn-secondary {
        background-color: #6c757d;
        border: none;
        margin-left: 10px;
    }

    .btn-secondary:hover {
        background-color: #5a6268;
        transform: translateY(-2px);
    }
</style>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>


            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">


                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data" onsubmit="return validateForm()">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>"
                                class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                                <%for(let i=0;i<brand.length;i++){%>
                                    <option value="<%=brand[i]._id%>" 
                                            data-name="<%=brand[i].brandName%>"
                                            <%= brand[i]._id.toString() === product.brand.toString() ? 'selected' : '' %>>
                                        <%=brand[i].brandName%>
                                    </option>
                                <%}%>
                            </select>
                            <div id="brand-error" class="error-message"></div>


                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <input name="descriptionData" value="<%=product.description%>"  class="form-control border" rows="4">
                                <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text"
                                        value="<%=product.regularPrice%>" class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sale price</label>
                                    <input name="salePrice" type="text" value="<%=product.salePrice%>"
                                        class="form-control border">
                                </div>
                                <div id="salePrice-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="text" value="<%=product.quantity%>"
                                        class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" value="<%=product.color%>"
                                        class="form-control border">
                                        <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                            
                        </div>
                        <div class="card mb-4">


                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" style="width: 150px;" name="category">
                                            <%for(let i=0;i<cat.length;i++){%>
                                                <option value="<%=cat[i].name%>">
                                                    <%=cat[i].name%>
                                                </option>
                                                <%}%>
                                        </select>


                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="image-gallery">
                                    <% for(let i=0; i < product.productImage.length; i++) { %>
                                        <div class="image-item">
                                            <img src="/uploads/product-images/<%=product.productImage[i]%>" alt="Product image">
                                            <div class="image-actions">
                                                <button type="button" 
                                                        class="remove-image-btn"
                                                        onclick="deleteImage('<%=product.productImage[i]%>', '<%=product._id%>', this)">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                                <button type="button" 
                                                        class="remove-image-btn crop-btn"
                                                        onclick="cropExistingImage(this)">
                                                    <i class="fas fa-crop"></i> Crop
                                                </button>
                                            </div>
                                        </div>
                                    <% } %>
                                    
                                    <% for(let i = product.productImage.length; i < 4; i++) { %>
                                        <label class="add-image-btn">
                                            <input type="file" 
                                                   name="images" 
                                                   accept="image/png, image/jpeg, image/jpg"
                                                   style="display: none;"
                                                   onchange="handleImageUpload(event)">
                                            <i class="fas fa-plus"></i>
                                        </label>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" 
                                    id="updatebtn" 
                                    type="submit">
                                Update
                            </button>
                            <button class="btn btn-md rounded font-sm hover-up btn-secondary" 
                                    id="cancelbtn" 
                                    type="button" 
                                    onclick="handleCancel()">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    </div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.js" integrity="sha512-lR8d1BXfYQuiqoM/LeGFVtxFyspzWFTZNyYIiE5O2CcAGtTCRRUMLloxATRuLz8EmR2fYqdXYlrGh+D6TVGp3g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<script>



function validateForm() {
    console.log("Validating form...");
    clearErrorMessages();
    
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementsByName('descriptionData')[0].value;
    const brand = document.getElementsByName('brand')[0].value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const saleprice = document.getElementsByName('salePrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const quantity = document.getElementsByName('quantity')[0].value;
    
    
    const existingImagesCount = document.querySelectorAll('.image-item img').length;
    
    const imageInputs = document.querySelectorAll('input[name="images"]');
    let newImagesCount = 0;
    
    imageInputs.forEach(input => {
        if (input.files && input.files.length > 0) newImagesCount++;
    });
    
    let isValid = true;
    
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    }
    
    if (description.trim() === '') {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }
    
    if (!quantity || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }
    
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    
    if (saleprice && (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0)) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }
    
    
    if (existingImagesCount === 0 && newImagesCount === 0) {
        Swal.fire({
            icon: 'error',
            title: 'Image Required',
            text: 'Please upload at least one product image.'
        });
        isValid = false;
    }
    
    return isValid;
}

function validateAndSubmit() {
    if (validateForm()) {
        
        const hasChanges = checkForChanges();
        
        if (!hasChanges) {
            Swal.fire({
                icon: 'warning',
                title: 'No Changes Detected',
                text: 'Please make changes before updating the product',
                confirmButtonText: 'OK'
            });
            return false;
        }

        const form = document.querySelector('form');
        const formData = new FormData(form);
        
        
        Swal.fire({
            title: 'Updating Product',
            text: 'Please wait...',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        $.ajax({
            url: form.action,
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: response.message || 'Product updated successfully',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/admin/products';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: response.message || 'Failed to update product',
                        confirmButtonText: 'OK'
                    });
                }
            },
            error: function(xhr) {
                const response = xhr.responseJSON || {};
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: response.message || 'An error occurred while updating the product',
                    confirmButtonText: 'OK'
                });
            }
        });
    }
    return false;
}

function checkForChanges() {
    const currentData = {
        productName: document.getElementsByName('productName')[0].value.trim(),
        description: document.getElementsByName('descriptionData')[0].value.trim(),
        brand: document.getElementsByName('brand')[0].value,
        regularPrice: document.getElementsByName('regularPrice')[0].value,
        salePrice: document.getElementsByName('salePrice')[0].value || '0',
        quantity: document.getElementsByName('quantity')[0].value,
        color: document.getElementsByName('color')[0].value,
        category: document.getElementsByName('category')[0].value
    };

    const originalData = {
        productName: document.getElementById('product_name').defaultValue.trim(),
        description: document.getElementsByName('descriptionData')[0].defaultValue.trim(),
        brand: document.getElementsByName('brand')[0].getAttribute('data-original-value') || document.getElementsByName('brand')[0].value,
        regularPrice: document.getElementsByName('regularPrice')[0].defaultValue,
        salePrice: document.getElementsByName('salePrice')[0].defaultValue || '0',
        quantity: document.getElementsByName('quantity')[0].defaultValue,
        color: document.getElementsByName('color')[0].defaultValue,
        category: document.getElementsByName('category')[0].getAttribute('data-original-value') || document.getElementsByName('category')[0].value
    };

    const hasNewImages = Array.from(document.querySelectorAll('input[type="file"]'))
        .some(input => input.files && input.files.length > 0);

    const changes = {};
    let hasChanges = false;

    Object.keys(currentData).forEach(key => {
        if (String(currentData[key]) !== String(originalData[key])) {
            changes[key] = {
                from: originalData[key],
                to: currentData[key]
            };
            hasChanges = true;
        }
    });

    
    const hasImageChanges = deletedImages.length > 0 || hasNewImages;

    console.log('Changes detected:', changes);
    console.log('Has image changes:', hasImageChanges, 'Deleted images:', deletedImages, 'New images:', hasNewImages);

    return hasChanges || hasImageChanges;
}


document.addEventListener('DOMContentLoaded', function() {
    
    const brandSelect = document.getElementsByName('brand')[0];
    brandSelect.setAttribute('data-original-value', brandSelect.value);

   
    const categorySelect = document.getElementsByName('category')[0];
    categorySelect.setAttribute('data-original-value', categorySelect.value);

    
    const form = document.querySelector('form');
    const inputs = form.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
        input.addEventListener('change', function() {
            console.log(`${input.name} changed from ${input.defaultValue} to ${input.value}`);
        });
    });
});

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.style.display = "none";
        element.innerText = '';
    });
}
let deletedImages = [];


function deleteImage(imageId, productId, buttonElement) {
    Swal.fire({
        title: 'Delete Image?',
        text: "This action cannot be undone!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            const imageItem = buttonElement.closest('.image-item');
            const gallery = imageItem.parentElement;

            Swal.fire({
                title: 'Deleting...',
                text: 'Please wait',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch('/admin/deleteImage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    imageNameToServer: imageId,
                    productIdToServer: productId
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => Promise.reject(err));
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    deletedImages.push(imageId);
                    imageItem.remove();

                    // Update upload button logic
                    const totalItems = gallery.querySelectorAll('.image-item, .add-image-btn').length;
                    if (totalItems < 4) {
                        const existingUploadBtn = gallery.querySelector('.add-image-btn');
                        if (!existingUploadBtn) {
                            gallery.appendChild(createUploadButton());
                        }
                    }

                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Image deleted successfully',
                        timer: 1500,
                        showConfirmButton: false
                    });
                } else {
                    throw new Error(data.message || 'Failed to delete image');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: error.message || 'Failed to delete image',
                    confirmButtonText: 'OK'
                });
            });
        }
    });
}

function handleImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    // Validate file size
    if (file.size > 5 * 1024 * 1024) { 
        Swal.fire({
            icon: 'error',
            title: 'File too large',
            text: 'Please select an image less than 5MB'
        });
        event.target.value = '';
        return;
    }
    
    // Validate file type
    const validTypes = ['image/jpeg', 'image/jpg', 'image/png'];
    if (!validTypes.includes(file.type)) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid file type',
            text: 'Please select a JPG, JPEG or PNG image'
        });
        event.target.value = '';
        return;
    }

    // Create preview immediately without cropping
    const reader = new FileReader();
    reader.onload = function(e) {
        const parent = event.target.parentElement;
        const gallery = parent.parentElement;
        
        const newImageItem = document.createElement('div');
        newImageItem.className = 'image-item';
        newImageItem.innerHTML = `
            <img src="${e.target.result}" alt="New product image">
            <div class="image-actions">
                <button type="button" class="remove-image-btn" onclick="removeNewImage(this)">
                    <i class="fas fa-trash"></i> Delete
                </button>
                <button type="button" class="remove-image-btn crop-btn" onclick="cropExistingImage(this)">
                    <i class="fas fa-crop"></i> Crop
                </button>
            </div>
            <input type="file" name="images" style="display: none;">
        `;
        
        // Set the file to the hidden input
        const newFileInput = newImageItem.querySelector('input[type="file"]');
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        newFileInput.files = dataTransfer.files;
        
        gallery.replaceChild(newImageItem, parent);
        
        // Add new upload button if needed
        const totalItems = gallery.querySelectorAll('.image-item, .add-image-btn').length;
        if (totalItems < 4) {
            const existingUploadBtn = gallery.querySelector('.add-image-btn');
            if (!existingUploadBtn) {
                gallery.appendChild(createUploadButton());
            }
        }
    };
    reader.readAsDataURL(file);
}

function cropExistingImage(button) {
    const imageElement = button.closest('.image-item').querySelector('img');
    setupImageCropper();
    
    const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'));
    const cropperImage = document.getElementById('cropperImage');
    cropperImage.src = imageElement.src;
    
    cropperModal.show();
    
    document.getElementById('cropperModal').addEventListener('shown.bs.modal', function() {
        if (cropper) {
            cropper.destroy();
        }
        
        cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            responsive: true,
            zoomable: true,
            background: false,
            autoCropArea: 0.8,
            guides: true
        });
    });
    
    document.getElementById('cropImageBtn').onclick = function() {
        const canvas = cropper.getCroppedCanvas({
            width: 600,
            height: 600,
            imageSmoothingQuality: 'high'
        });
        
        canvas.toBlob(function(blob) {
            const imageUrl = URL.createObjectURL(blob);
            imageElement.src = imageUrl;
            
            // Create a new file input for the cropped image
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(new File([blob], 'cropped_image.jpg', { type: 'image/jpeg' }));
            
            // Find or create hidden file input
            let fileInput = button.closest('.image-item').querySelector('input[type="file"]');
            if (!fileInput) {
                fileInput = document.createElement('input');
                fileInput.type = 'file';
                fileInput.name = 'images';
                fileInput.style.display = 'none';
                button.closest('.image-item').appendChild(fileInput);
            }
            fileInput.files = dataTransfer.files;
            
            bootstrap.Modal.getInstance(document.getElementById('cropperModal')).hide();
        }, 'image/jpeg');
    };
}

function removeNewImage(button) {
    const imageItem = button.closest('.image-item');
    const gallery = imageItem.parentElement;
    
    imageItem.remove();

    // Check if we need to add an upload button
    const totalItems = gallery.querySelectorAll('.image-item, .add-image-btn').length;
    if (totalItems < 4) {
        const existingUploadBtn = gallery.querySelector('.add-image-btn');
        if (!existingUploadBtn) {
            gallery.appendChild(createUploadButton());
        }
    }
}

function createUploadButton() {
    const label = document.createElement('label');
    label.className = 'add-image-btn';
    label.innerHTML = `
        <input type="file" 
               name="images" 
               accept="image/png, image/jpeg, image/jpg"
               style="display: none;"
               onchange="handleImageUpload(event)">
        <i class="fas fa-plus"></i>
    `;
    return label;
}


document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        validateAndSubmit();
    });

    
    form.addEventListener('submit', function() {
        
        const fileInputs = document.querySelectorAll('input[type="file"][name="images"]');
        fileInputs.forEach(input => {
            if (input.files.length === 0 && input.parentElement.className !== 'add-image-btn') {
                input.remove();
            }
        });
    });
});

function setupImageCropper() {
    // Create modal HTML if it doesn't exist
    if (!document.getElementById('cropperModal')) {
        const modalHTML = `
            <div class="modal fade" id="cropperModal" tabindex="-1" role="dialog" aria-labelledby="cropperModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="img-container">
                                <img id="cropperImage" src="" alt="Image to crop">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="cropImageBtn">Crop</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }
}

// Global variables for cropper
let cropper;
let currentFileInput;


function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.style.display = "none";
        element.innerText = '';
    });
}

function handleCancel() {
    if (checkForChanges()) {
        Swal.fire({
            title: 'Unsaved Changes',
            text: 'You have unsaved changes. Are you sure you want to leave?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, leave page',
            cancelButtonText: 'Stay'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/admin/products';
            }
        });
    } else {
        window.location.href = '/admin/products';
    }
}

window.addEventListener('beforeunload', function(e) {
    if (checkForChanges()) {
        e.preventDefault();
        e.returnValue = '';
    }
});
           
       </script>

<%- include("../../views/partials/admin/footer") %>