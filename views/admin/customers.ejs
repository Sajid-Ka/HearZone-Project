<%- include("../../views/partials/admin/header") %>
<!-- Add SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .table tr:hover {
        background-color: #f8f9fa;
        transition: all 0.2s;
    }
    .block-btn:hover {
        background: #c0392b !important;
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .unblock-btn:hover {
        background: #27ae60 !important;
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .page-item.active .page-link {
        background-color: #3498db;
        border-color: #3498db;
        color: white;
    }
    .page-link:hover {
        background-color: #f8f9fa;
        color: #3498db;
    }
</style>

<div class="content-header row">
    <div class="d-flex justify-content-between align-items-center">
        <h2 class="content-title card-title" style="color: #2c3e50; font-weight: 600; margin: 20px 0;">Customers</h2>
    </div>
</div>

<div class="card shadow-lg rounded-3 p-4" style="background: #ffffff;">
    <header class="card-header text-center mb-4 border-0 bg-transparent">
        <% if(search) { %>
            <div class="text-start mb-3">
                <a href="/admin/users<%= isBlocked ? '?blocked=true' : '' %>" class="btn btn-secondary" 
                    style="border-radius: 20px;">
                    <i class="fas fa-arrow-left"></i> Back
                </a>
            </div>
        <% } %>
        <div class="d-flex justify-content-center align-items-center mb-3">
            <a href="/admin/users" class="btn mx-2 <%= !isBlocked ? 'btn-primary' : 'btn-outline-primary' %>" 
                style="border-radius: 20px; min-width: 120px;">
                All Users
            </a>
            <a href="/admin/users?blocked=true" class="btn mx-2 <%= isBlocked ? 'btn-primary' : 'btn-outline-primary' %>" 
                style="border-radius: 20px; min-width: 120px;">
                Blocked Users
            </a>
        </div>
        <form action="/admin/users/" method="get" class="d-inline">
            <div class="input-group input-group-sm" style="width: 500px; margin: 0 auto;">
                <input type="text" class="form-control shadow-sm" 
                    style="border-radius: 20px 0 0 20px; border: 1px solid #e0e0e0; padding: 12px 20px;" 
                    placeholder="Search customers..." name="search" value="<%= search %>">
                <% if(isBlocked) { %>
                    <input type="hidden" name="blocked" value="true">
                <% } %>
                <button class="btn text-white" type="submit" 
                    style="border-radius: 0 20px 20px 0; background: #3498db; padding: 12px 25px;">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
        </form>
    </header>
    <div class="right mt-4">
        <table class="table">
            <thead>
                <tr style="background: #f8f9fa;">
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Name</b></th>
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Email</b></th>
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Phone No</b></th>
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Action</b></th>
                </tr>
            </thead>
            <tbody>
                <% for(let i=0; i < data.length; i++) { %>
                    <tr class="align-middle">
                        <td style="padding: 15px;"><%= data[i].name %></td>
                        <td style="padding: 15px;"><%= data[i].email %></td>
                        <td style="padding: 15px;"><%= data[i].phone %></td>
                        <td style="padding: 15px;">
                            <% if(data[i].isBlocked === false) { %>
                                <button class="btn block-btn" 
                                    style="width: 100px; background: #e74c3c; color: white; border-radius: 20px; transition: all 0.3s;" 
                                    data-id="<%= data[i]._id %>">
                                    Block
                                </button>
                            <% } else { %>
                                <button class="btn unblock-btn" 
                                    style="width: 100px; background: #2ecc71; color: white; border-radius: 20px; transition: all 0.3s;" 
                                    data-id="<%= data[i]._id %>">
                                    Unblock
                                </button>
                            <% } %>
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
    <div class="container mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <% for(let i=1; i <= totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %><%= search ? '&search=' + search : '' %><%= isBlocked ? '&blocked=true' : '' %>" 
                            style="color: #2c3e50; border-color: #e0e0e0; margin: 0 2px; border-radius: 5px;">
                            <%= i %>
                        </a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>

<script>

document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const success = urlParams.get('success');
    const error = urlParams.get('error');
    
    if (success === 'block') {
        Swal.fire({
            title: 'Blocked!',
            text: 'Customer has been blocked successfully',
            icon: 'success',
            confirmButtonColor: '#3498db',
            timer: 2000
        });
    } else if (success === 'unblock') {
        Swal.fire({
            title: 'Unblocked!',
            text: 'Customer has been unblocked successfully',
            icon: 'success',
            confirmButtonColor: '#3498db',
            timer: 2000
        });
    } else if (error) {
        Swal.fire({
            title: 'Error!',
            text: error,
            icon: 'error',
            confirmButtonColor: '#e74c3c',
            timer: 3000
        });
    }

    // Adding debugging info
    console.log("Script loaded. Setting up block/unblock event listeners.");

    // Block confirmation
    document.querySelectorAll('.block-btn').forEach(button => {
        button.addEventListener('click', function() {
            const userId = this.getAttribute('data-id');
            console.log("Block button clicked for user ID:", userId);
            const row = this.closest('tr');
            
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to block this customer?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, block it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("Block confirmation clicked for user ID:", userId);
                    
                    // Use XMLHttpRequest instead of fetch for better browser compatibility
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', `/admin/blockCustomer?id=${userId}`, true);
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.setRequestHeader('Accept', 'application/json');
                    
                    xhr.onload = function() {
                        console.log("XHR response received:", xhr.status, xhr.responseText);
                        
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                const data = JSON.parse(xhr.responseText);
                                
                                if (data.success) {
                                    console.log("Block successful:", data);
                                    // Update button without page reload
                                    const actionCell = row.querySelector('td:last-child');
                                    actionCell.innerHTML = `
                                        <button class="btn unblock-btn" 
                                            style="width: 100px; background: #2ecc71; color: white; border-radius: 20px; transition: all 0.3s;" 
                                            data-id="${userId}">
                                            Unblock
                                        </button>
                                    `;
                                    
                                    // Add event listener to the new button
                                    addUnblockEventListener(actionCell.querySelector('.unblock-btn'));
                                    
                                    // Show success message
                                    Swal.fire({
                                        title: 'Blocked!',
                                        text: 'Customer has been blocked successfully',
                                        icon: 'success',
                                        confirmButtonColor: '#3498db',
                                        timer: 2000
                                    });
                                    
                                    // If we're on the "All Users" page, we might want to remove this row
                                    if (!window.location.href.includes('blocked=true')) {
                                        setTimeout(() => {
                                            row.style.opacity = '0';
                                            setTimeout(() => {
                                                row.remove();
                                            }, 500);
                                        }, 1000);
                                    }
                                } else {
                                    console.error("Block failed:", data);
                                    Swal.fire({
                                        title: 'Error!',
                                        text: data.message || 'Failed to block customer',
                                        icon: 'error',
                                        confirmButtonColor: '#e74c3c',
                                        timer: 3000
                                    });
                                }
                            } catch (parseError) {
                                console.error("Error parsing JSON:", parseError, xhr.responseText);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An unexpected error occurred. Please try again.',
                                    icon: 'error',
                                    confirmButtonColor: '#e74c3c',
                                    timer: 3000
                                });
                            }
                        } else {
                            console.error("XHR error status:", xhr.status);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Server error. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#e74c3c',
                                timer: 3000
                            });
                        }
                    };
                    
                    xhr.onerror = function() {
                        console.error("XHR network error");
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error. Please check your connection.',
                            icon: 'error',
                            confirmButtonColor: '#e74c3c',
                            timer: 3000
                        });
                    };
                    
                    xhr.send(`id=${userId}`);
                }
            });
        });
    });

    // Function to add event listener to unblock buttons
    function addUnblockEventListener(button) {
        button.addEventListener('click', function() {
            const userId = this.getAttribute('data-id');
            console.log("Unblock button clicked for user ID:", userId);
            const row = this.closest('tr');
            
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to unblock this customer?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, unblock it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("Unblock confirmation clicked for user ID:", userId);
                    
                    // Use XMLHttpRequest instead of fetch for better browser compatibility
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', `/admin/unblockCustomer?id=${userId}`, true);
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.setRequestHeader('Accept', 'application/json');
                    
                    xhr.onload = function() {
                        console.log("XHR response received:", xhr.status, xhr.responseText);
                        
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                const data = JSON.parse(xhr.responseText);
                                
                                if (data.success) {
                                    console.log("Unblock successful:", data);
                                    // Update button without page reload
                                    const actionCell = row.querySelector('td:last-child');
                                    actionCell.innerHTML = `
                                        <button class="btn block-btn" 
                                            style="width: 100px; background: #e74c3c; color: white; border-radius: 20px; transition: all 0.3s;" 
                                            data-id="${userId}">
                                            Block
                                        </button>
                                    `;
                                    
                                    // Add event listener to the new button
                                    addBlockEventListener(actionCell.querySelector('.block-btn'));
                                    
                                    // Show success message
                                    Swal.fire({
                                        title: 'Unblocked!',
                                        text: 'Customer has been unblocked successfully',
                                        icon: 'success',
                                        confirmButtonColor: '#3498db',
                                        timer: 2000
                                    });
                                    
                                    // If we're on the "Blocked Users" page, we might want to remove this row
                                    if (window.location.href.includes('blocked=true')) {
                                        setTimeout(() => {
                                            row.style.opacity = '0';
                                            setTimeout(() => {
                                                row.remove();
                                            }, 500);
                                        }, 1000);
                                    }
                                } else {
                                    console.error("Unblock failed:", data);
                                    Swal.fire({
                                        title: 'Error!',
                                        text: data.message || 'Failed to unblock customer',
                                        icon: 'error',
                                        confirmButtonColor: '#e74c3c',
                                        timer: 3000
                                    });
                                }
                            } catch (parseError) {
                                console.error("Error parsing JSON:", parseError, xhr.responseText);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An unexpected error occurred. Please try again.',
                                    icon: 'error',
                                    confirmButtonColor: '#e74c3c',
                                    timer: 3000
                                });
                            }
                        } else {
                            console.error("XHR error status:", xhr.status);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Server error. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#e74c3c',
                                timer: 3000
                            });
                        }
                    };
                    
                    xhr.onerror = function() {
                        console.error("XHR network error");
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error. Please check your connection.',
                            icon: 'error',
                            confirmButtonColor: '#e74c3c',
                            timer: 3000
                        });
                    };
                    
                    xhr.send(`id=${userId}`);
                }
            });
        });
    }

    // Function to add event listener to block buttons
    function addBlockEventListener(button) {
        button.addEventListener('click', function() {
            const userId = this.getAttribute('data-id');
            console.log("Block button clicked for user ID:", userId);
            const row = this.closest('tr');
            
            // Reuse the block confirmation logic
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to block this customer?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, block it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log("Block confirmation clicked for user ID:", userId);
                    
                    // Use XMLHttpRequest instead of fetch for better browser compatibility
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', `/admin/blockCustomer?id=${userId}`, true);
                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                    xhr.setRequestHeader('Accept', 'application/json');
                    
                    xhr.onload = function() {
                        console.log("XHR response received:", xhr.status, xhr.responseText);
                        
                        if (xhr.status >= 200 && xhr.status < 300) {
                            try {
                                const data = JSON.parse(xhr.responseText);
                                
                                if (data.success) {
                                    console.log("Block successful:", data);
                                    // Update button without page reload
                                    const actionCell = row.querySelector('td:last-child');
                                    actionCell.innerHTML = `
                                        <button class="btn unblock-btn" 
                                            style="width: 100px; background: #2ecc71; color: white; border-radius: 20px; transition: all 0.3s;" 
                                            data-id="${userId}">
                                            Unblock
                                        </button>
                                    `;
                                    
                                    // Add event listener to the new button
                                    addUnblockEventListener(actionCell.querySelector('.unblock-btn'));
                                    
                                    // Show success message
                                    Swal.fire({
                                        title: 'Blocked!',
                                        text: 'Customer has been blocked successfully',
                                        icon: 'success',
                                        confirmButtonColor: '#3498db',
                                        timer: 2000
                                    });
                                    
                                    // If we're on the "All Users" page, we might want to remove this row
                                    if (!window.location.href.includes('blocked=true')) {
                                        setTimeout(() => {
                                            row.style.opacity = '0';
                                            setTimeout(() => {
                                                row.remove();
                                            }, 500);
                                        }, 1000);
                                    }
                                } else {
                                    console.error("Block failed:", data);
                                    Swal.fire({
                                        title: 'Error!',
                                        text: data.message || 'Failed to block customer',
                                        icon: 'error',
                                        confirmButtonColor: '#e74c3c',
                                        timer: 3000
                                    });
                                }
                            } catch (parseError) {
                                console.error("Error parsing JSON:", parseError, xhr.responseText);
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An unexpected error occurred. Please try again.',
                                    icon: 'error',
                                    confirmButtonColor: '#e74c3c',
                                    timer: 3000
                                });
                            }
                        } else {
                            console.error("XHR error status:", xhr.status);
                            Swal.fire({
                                title: 'Error!',
                                text: 'Server error. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#e74c3c',
                                timer: 3000
                            });
                        }
                    };
                    
                    xhr.onerror = function() {
                        console.error("XHR network error");
                        Swal.fire({
                            title: 'Error!',
                            text: 'Network error. Please check your connection.',
                            icon: 'error',
                            confirmButtonColor: '#e74c3c',
                            timer: 3000
                        });
                    };
                    
                    xhr.send(`id=${userId}`);
                }
            });
        });
    }

    // Initialize event listeners for block buttons
    document.querySelectorAll('.block-btn').forEach(button => {
        addBlockEventListener(button);
    });

    // Initialize event listeners for unblock buttons
    document.querySelectorAll('.unblock-btn').forEach(button => {
        addUnblockEventListener(button);
    });

    // Initialize CSS for smooth transitions
    const style = document.createElement('style');
    style.textContent = `
        tr {
            transition: opacity 0.5s ease;
        }
    `;
    document.head.appendChild(style);
    
    console.log("Script initialization complete");
});
</script>



<%- include("../../views/partials/admin/footer") %>