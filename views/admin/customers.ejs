<%- include("../../views/partials/admin/header") %>
<!-- Add SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .table tr:hover {
        background-color: #f8f9fa;
        transition: all 0.2s;
    }
    .block-btn:hover {
        background: #c0392b !important;
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .unblock-btn:hover {
        background: #27ae60 !important;
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .page-item.active .page-link {
        background-color: #3498db;
        border-color: #3498db;
        color: white;
    }
    .page-link:hover {
        background-color: #f8f9fa;
        color: #3498db;
    }
    .search-container {
        position: relative;
        width: 500px;
        margin: 0 auto;
    }
    .search-input {
        padding-right: 40px; /* Space for clear button */
    }
    .clear-btn {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        display: none; /* Hidden by default */
        color: #666;
    }
    .clear-btn:hover {
        color: #e74c3c;
    }
</style>

<div class="content-header row">
    <div class="d-flex justify-content-between align-items-center">
        <h2 class="content-title card-title" style="color: #2c3e50; font-weight: 600; margin: 20px 0;">Customers</h2>
    </div>
</div>

<div class="card shadow-lg rounded-3 p-4" style="background: #ffffff;">
    <header class="card-header text-center mb-4 border-0 bg-transparent">
        <div class="d-flex justify-content-center align-items-center mb-3">
            <button class="btn mx-2 <%= !isBlocked ? 'btn-primary' : 'btn-outline-primary' %>" 
                style="border-radius: 20px; min-width: 120px;" 
                id="allUsersBtn">
                All Users
            </button>
            <button class="btn mx-2 <%= isBlocked ? 'btn-primary' : 'btn-outline-primary' %>" 
                style="border-radius: 20px; min-width: 120px;" 
                id="blockedUsersBtn">
                Blocked Users
            </button>
        </div>
        <div class="search-container">
            <input type="text" class="form-control shadow-sm search-input" 
                style="border-radius: 20px; border: 1px solid #e0e0e0; padding: 12px 20px;" 
                placeholder="Search customers..." id="searchInput" value="<%= search %>">
            <button class="clear-btn" id="clearSearch" title="Clear search">Ã—</button>
        </div>
    </header>
    <div class="right mt-4">
        <table class="table">
            <thead>
                <tr style="background: #f8f9fa;">
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Name</b></th>
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Email</b></th>
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Phone No</b></th>
                    <th scope="col" style="color: #2c3e50; font-weight: 600; padding: 15px;"><b>Action</b></th>
                </tr>
            </thead>
            <tbody id="customerTableBody">
                <% for(let i=0; i < data.length; i++) { %>
                    <tr class="align-middle">
                        <td style="padding: 15px;"><%= data[i].name %></td>
                        <td style="padding: 15px;"><%= data[i].email %></td>
                        <td style="padding: 15px;"><%= data[i].phone %></td>
                        <td style="padding: 15px;">
                            <% if(data[i].isBlocked === false) { %>
                                <button class="btn block-btn" 
                                    style="width: 100px; background: #e74c3c; color: white; border-radius: 20px; transition: all 0.3s;" 
                                    data-id="<%= data[i]._id %>">
                                    Block
                                </button>
                            <% } else { %>
                                <button class="btn unblock-btn" 
                                    style="width: 100px; background: #2ecc71; color: white; border-radius: 20px; transition: all 0.3s;" 
                                    data-id="<%= data[i]._id %>">
                                    Unblock
                                </button>
                            <% } %>
                        </td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>
    <div class="container mt-4">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center" id="pagination">
                <% for(let i=1; i <= totalPages; i++) { %>
                    <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %><%= search ? '&search=' + search : '' %><%= isBlocked ? '&blocked=true' : '' %>" 
                            data-page="<%= i %>"
                            style="color: #2c3e50; border-color: #e0e0e0; margin: 0 2px; border-radius: 5px;">
                            <%= i %>
                        </a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const success = urlParams.get('success');
        const error = urlParams.get('error');
        
        if (success === 'block') {
            Swal.fire({
                title: 'Blocked!',
                text: 'Customer has been blocked successfully',
                icon: 'success',
                confirmButtonColor: '#3498db',
                timer: 2000
            });
        } else if (success === 'unblock') {
            Swal.fire({
                title: 'Unblocked!',
                text: 'Customer has been unblocked successfully',
                icon: 'success',
                confirmButtonColor: '#3498db',
                timer: 2000
            });
        } else if (error) {
            Swal.fire({
                title: 'Error!',
                text: error,
                icon: 'error',
                confirmButtonColor: '#e74c3c',
                timer: 3000
            });
        }

        // Debounce function
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Function to load a page dynamically
        async function loadPage(page, search = '', isBlocked = false) {
            try {
                const tbody = document.querySelector('#customerTableBody');
                tbody.innerHTML = '<tr><td colspan="4" class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></td></tr>';

                let url = `/admin/users?page=${page}&format=json`;
                if (search) url += `&search=${encodeURIComponent(search)}`;
                if (isBlocked) url += '&blocked=true';

                const response = await fetch(url, {
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to load page');
                }

                const data = await response.json();
                if (!data.success) {
                    throw new Error(data.message || 'Failed to load data');
                }

                // Update table body
                tbody.innerHTML = data.data.map(user => `
                    <tr class="align-middle">
                        <td style="padding: 15px;">${user.name}</td>
                        <td style="padding: 15px;">${user.email}</td>
                        <td style="padding: 15px;">${user.phone}</td>
                        <td style="padding: 15px;">
                            ${user.isBlocked ?
                                `<button class="btn unblock-btn" style="width: 100px; background: #2ecc71; color: white; border-radius: 20px; transition: all 0.3s;" data-id="${user._id}">Unblock</button>` :
                                `<button class="btn block-btn" style="width: 100px; background: #e74c3c; color: white; border-radius: 20px; transition: all 0.3s;" data-id="${user._id}">Block</button>`
                            }
                        </td>
                    </tr>
                `).join('');

                // Update pagination
                const pagination = document.querySelector('#pagination');
                pagination.innerHTML = '';
                for (let i = 1; i <= data.totalPages; i++) {
                    const li = document.createElement('li');
                    li.className = `page-item ${i === data.currentPage ? 'active' : ''}`;
                    li.innerHTML = `
                        <a class="page-link" href="#" 
                            data-page="${i}" 
                            style="color: #2c3e50; border-color: #e0e0e0; margin: 0 2px; border-radius: 5px;">
                            ${i}
                        </a>
                    `;
                    pagination.appendChild(li);
                }

                // Update button styles
                const allUsersBtn = document.querySelector('#allUsersBtn');
                const blockedUsersBtn = document.querySelector('#blockedUsersBtn');
                allUsersBtn.className = `btn mx-2 ${!isBlocked ? 'btn-primary' : 'btn-outline-primary'}`;
                blockedUsersBtn.className = `btn mx-2 ${isBlocked ? 'btn-primary' : 'btn-outline-primary'}`;

                // Re-attach event listeners to new pagination links
                document.querySelectorAll('.pagination .page-link').forEach(link => {
                    link.addEventListener('click', async function(e) {
                        e.preventDefault();
                        const page = this.getAttribute('data-page');
                        const searchInput = document.querySelector('#searchInput').value;
                        const currentIsBlocked = allUsersBtn.classList.contains('btn-outline-primary') ? true : false;
                        await loadPage(page, searchInput, currentIsBlocked);
                    });
                });

                // Re-attach event listeners to block/unblock buttons
                attachBlockUnblockListeners();

                // Update browser URL
                const newUrl = `/admin/users?page=${page}${data.search ? '&search=' + encodeURIComponent(data.search) : ''}${data.isBlocked ? '&blocked=true' : ''}`;
                history.pushState({ page, search: data.search, isBlocked: data.isBlocked }, '', newUrl);
            } catch (error) {
                console.error('Error loading page:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'Failed to load page. Please try again.',
                    icon: 'error',
                    confirmButtonColor: '#e74c3c',
                    timer: 3000
                });
                tbody.innerHTML = '<tr><td colspan="4" class="text-center">Error loading data</td></tr>';
            }
        }

        // Handle search input with debouncing
        const searchInput = document.querySelector('#searchInput');
        const clearBtn = document.querySelector('#clearSearch');

        // Show/hide clear button based on input
        function toggleClearButton() {
            clearBtn.style.display = searchInput.value ? 'block' : 'none';
        }

        searchInput.addEventListener('input', function() {
            toggleClearButton();
            debouncedSearch(this.value);
        });

        // Initialize clear button visibility
        toggleClearButton();

        // Handle clear button click
        clearBtn.addEventListener('click', async function() {
            searchInput.value = '';
            toggleClearButton();
            const currentIsBlocked = document.querySelector('#allUsersBtn').classList.contains('btn-outline-primary') ? true : false;
            await loadPage(1, '', currentIsBlocked);
        });

        const debouncedSearch = debounce(async (value) => {
            const currentIsBlocked = document.querySelector('#allUsersBtn').classList.contains('btn-outline-primary') ? true : false;
            await loadPage(1, value, currentIsBlocked);
        }, 500);

        // Handle All Users and Blocked Users buttons
        document.querySelector('#allUsersBtn').addEventListener('click', async function(e) {
            e.preventDefault();
            const searchInput = document.querySelector('#searchInput').value;
            await loadPage(1, searchInput, false);
        });

        document.querySelector('#blockedUsersBtn').addEventListener('click', async function(e) {
            e.preventDefault();
            const searchInput = document.querySelector('#searchInput').value;
            await loadPage(1, searchInput, true);
        });

        // Function to attach block/unblock event listeners
        function attachBlockUnblockListeners() {
            // Block buttons
            document.querySelectorAll('.block-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const userId = this.getAttribute('data-id');
                    const row = this.closest('tr');

                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you want to block this customer?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, block it!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/blockCustomer?id=${userId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'Accept': 'application/json'
                                },
                                body: `id=${userId}`
                            });

                            const data = await response.json();
                            if (data.success) {
                                const actionCell = row.querySelector('td:last-child');
                                actionCell.innerHTML = `
                                    <button class="btn unblock-btn" 
                                        style="width: 100px; background: #2ecc71; color: white; border-radius: 20px; transition: all 0.3s;" 
                                        data-id="${userId}">
                                        Unblock
                                    </button>
                                `;
                                attachBlockUnblockListeners();
                                Swal.fire({
                                    title: 'Blocked!',
                                    text: 'Customer has been blocked successfully',
                                    icon: 'success',
                                    confirmButtonColor: '#3498db',
                                    timer: 2000
                                });
                                if (!window.location.href.includes('blocked=true')) {
                                    setTimeout(() => {
                                        row.style.opacity = '0';
                                        setTimeout(() => row.remove(), 500);
                                    }, 1000);
                                }
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Failed to block customer',
                                    icon: 'error',
                                    confirmButtonColor: '#e74c3c',
                                    timer: 3000
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to block customer. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#e74c3c',
                                timer: 3000
                            });
                        }
                    }
                });
            });

            // Unblock buttons
            document.querySelectorAll('.unblock-btn').forEach(button => {
                button.addEventListener('click', async function() {
                    const userId = this.getAttribute('data-id');
                    const row = this.closest('tr');

                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "Do you want to unblock this customer?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, unblock it!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/unblockCustomer?id=${userId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'Accept': 'application/json'
                                },
                                body: `id=${userId}`
                            });

                            const data = await response.json();
                            if (data.success) {
                                const actionCell = row.querySelector('td:last-child');
                                actionCell.innerHTML = `
                                    <button class="btn block-btn" 
                                        style="width: 100px; background: #e74c3c; color: white; border-radius: 20px; transition: all 0.3s;" 
                                        data-id="${userId}">
                                        Block
                                    </button>
                                `;
                                attachBlockUnblockListeners();
                                Swal.fire({
                                    title: 'Unblocked!',
                                    text: 'Customer has been unblocked successfully',
                                    icon: 'success',
                                    confirmButtonColor: '#3498db',
                                    timer: 2000
                                });
                                if (window.location.href.includes('blocked=true')) {
                                    setTimeout(() => {
                                        row.style.opacity = '0';
                                        setTimeout(() => row.remove(), 500);
                                    }, 1000);
                                }
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: data.message || 'Failed to unblock customer',
                                    icon: 'error',
                                    confirmButtonColor: '#e74c3c',
                                    timer: 3000
                                });
                            }
                        } catch (error) {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to unblock customer. Please try again.',
                                icon: 'error',
                                confirmButtonColor: '#e74c3c',
                                timer: 3000
                            });
                        }
                    }
                });
            });
        }

        // Initialize block/unblock listeners
        attachBlockUnblockListeners();

        // Handle popstate for browser back/forward
        window.addEventListener('popstate', async function(event) {
            const state = event.state;
            if (state) {
                await loadPage(state.page, state.search || '', state.isBlocked || false);
                searchInput.value = state.search || '';
                toggleClearButton();
            }
        });

        // Initialize CSS for smooth transitions
        const style = document.createElement('style');
        style.textContent = `
            tr {
                transition: opacity 0.5s ease;
            }
            .spinner-border {
                width: 2rem;
                height: 2rem;
            }
        `;
        document.head.appendChild(style);
    });
</script>

<%- include("../../views/partials/admin/footer") %>